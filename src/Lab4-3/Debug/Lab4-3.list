
Lab4-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a270  0800a270  0001a270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2c8  0800a2c8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2c8  0800a2c8  0001a2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2d0  0800a2d0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2d0  0800a2d0  0001a2d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2d4  0800a2d4  0001a2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a2d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  20000090  0800a368  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000914  0800a368  00020914  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e0f6  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e32  00000000  00000000  0003e1b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018f0  00000000  00000000  00041fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001748  00000000  00000000  000438d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002621a  00000000  00000000  00045020  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015c78  00000000  00000000  0006b23a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8405  00000000  00000000  00080eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001592b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ed0  00000000  00000000  00159334  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a258 	.word	0x0800a258

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800a258 	.word	0x0800a258

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b972 	b.w	8000d58 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	4688      	mov	r8, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14b      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4615      	mov	r5, r2
 8000a9e:	d967      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0720 	rsb	r7, r2, #32
 8000aaa:	fa01 f302 	lsl.w	r3, r1, r2
 8000aae:	fa20 f707 	lsr.w	r7, r0, r7
 8000ab2:	4095      	lsls	r5, r2
 8000ab4:	ea47 0803 	orr.w	r8, r7, r3
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ac4:	fa1f fc85 	uxth.w	ip, r5
 8000ac8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000acc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18eb      	adds	r3, r5, r3
 8000ada:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ade:	f080 811b 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8118 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000ae8:	3f02      	subs	r7, #2
 8000aea:	442b      	add	r3, r5
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000af4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b00:	45a4      	cmp	ip, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	192c      	adds	r4, r5, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8107 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000b0e:	45a4      	cmp	ip, r4
 8000b10:	f240 8104 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000b14:	3802      	subs	r0, #2
 8000b16:	442c      	add	r4, r5
 8000b18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b1c:	eba4 040c 	sub.w	r4, r4, ip
 8000b20:	2700      	movs	r7, #0
 8000b22:	b11e      	cbz	r6, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0xbe>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80eb 	beq.w	8000d12 <__udivmoddi4+0x286>
 8000b3c:	2700      	movs	r7, #0
 8000b3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b42:	4638      	mov	r0, r7
 8000b44:	4639      	mov	r1, r7
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	fab3 f783 	clz	r7, r3
 8000b4e:	2f00      	cmp	r7, #0
 8000b50:	d147      	bne.n	8000be2 <__udivmoddi4+0x156>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d302      	bcc.n	8000b5c <__udivmoddi4+0xd0>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f200 80fa 	bhi.w	8000d50 <__udivmoddi4+0x2c4>
 8000b5c:	1a84      	subs	r4, r0, r2
 8000b5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b62:	2001      	movs	r0, #1
 8000b64:	4698      	mov	r8, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d0e0      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000b6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b6e:	e7dd      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000b70:	b902      	cbnz	r2, 8000b74 <__udivmoddi4+0xe8>
 8000b72:	deff      	udf	#255	; 0xff
 8000b74:	fab2 f282 	clz	r2, r2
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f040 808f 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7e:	1b49      	subs	r1, r1, r5
 8000b80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b84:	fa1f f885 	uxth.w	r8, r5
 8000b88:	2701      	movs	r7, #1
 8000b8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b98:	fb08 f10c 	mul.w	r1, r8, ip
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000ba0:	18eb      	adds	r3, r5, r3
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	f200 80cd 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1a59      	subs	r1, r3, r1
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x14c>
 8000bc8:	192c      	adds	r4, r5, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x14a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80b6 	bhi.w	8000d42 <__udivmoddi4+0x2b6>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e79f      	b.n	8000b22 <__udivmoddi4+0x96>
 8000be2:	f1c7 0c20 	rsb	ip, r7, #32
 8000be6:	40bb      	lsls	r3, r7
 8000be8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bf0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bf4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c00:	4325      	orrs	r5, r4
 8000c02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c06:	0c2c      	lsrs	r4, r5, #16
 8000c08:	fb08 3319 	mls	r3, r8, r9, r3
 8000c0c:	fa1f fa8e 	uxth.w	sl, lr
 8000c10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c14:	fb09 f40a 	mul.w	r4, r9, sl
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1e 0303 	adds.w	r3, lr, r3
 8000c28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c2c:	f080 8087 	bcs.w	8000d3e <__udivmoddi4+0x2b2>
 8000c30:	429c      	cmp	r4, r3
 8000c32:	f240 8084 	bls.w	8000d3e <__udivmoddi4+0x2b2>
 8000c36:	f1a9 0902 	sub.w	r9, r9, #2
 8000c3a:	4473      	add	r3, lr
 8000c3c:	1b1b      	subs	r3, r3, r4
 8000c3e:	b2ad      	uxth	r5, r5
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c50:	45a2      	cmp	sl, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1e 0404 	adds.w	r4, lr, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	d26b      	bcs.n	8000d36 <__udivmoddi4+0x2aa>
 8000c5e:	45a2      	cmp	sl, r4
 8000c60:	d969      	bls.n	8000d36 <__udivmoddi4+0x2aa>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4474      	add	r4, lr
 8000c66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6e:	eba4 040a 	sub.w	r4, r4, sl
 8000c72:	454c      	cmp	r4, r9
 8000c74:	46c2      	mov	sl, r8
 8000c76:	464b      	mov	r3, r9
 8000c78:	d354      	bcc.n	8000d24 <__udivmoddi4+0x298>
 8000c7a:	d051      	beq.n	8000d20 <__udivmoddi4+0x294>
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d069      	beq.n	8000d54 <__udivmoddi4+0x2c8>
 8000c80:	ebb1 050a 	subs.w	r5, r1, sl
 8000c84:	eb64 0403 	sbc.w	r4, r4, r3
 8000c88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c8c:	40fd      	lsrs	r5, r7
 8000c8e:	40fc      	lsrs	r4, r7
 8000c90:	ea4c 0505 	orr.w	r5, ip, r5
 8000c94:	e9c6 5400 	strd	r5, r4, [r6]
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e747      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000c9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ca0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ca4:	4095      	lsls	r5, r2
 8000ca6:	fa01 f002 	lsl.w	r0, r1, r2
 8000caa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb2:	4338      	orrs	r0, r7
 8000cb4:	0c01      	lsrs	r1, r0, #16
 8000cb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cba:	fa1f f885 	uxth.w	r8, r5
 8000cbe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc6:	fb07 f308 	mul.w	r3, r7, r8
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x256>
 8000cd2:	1869      	adds	r1, r5, r1
 8000cd4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd8:	d22f      	bcs.n	8000d3a <__udivmoddi4+0x2ae>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d92d      	bls.n	8000d3a <__udivmoddi4+0x2ae>
 8000cde:	3f02      	subs	r7, #2
 8000ce0:	4429      	add	r1, r5
 8000ce2:	1acb      	subs	r3, r1, r3
 8000ce4:	b281      	uxth	r1, r0
 8000ce6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf2:	fb00 f308 	mul.w	r3, r0, r8
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x27e>
 8000cfa:	1869      	adds	r1, r5, r1
 8000cfc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d00:	d217      	bcs.n	8000d32 <__udivmoddi4+0x2a6>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d915      	bls.n	8000d32 <__udivmoddi4+0x2a6>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4429      	add	r1, r5
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d10:	e73b      	b.n	8000b8a <__udivmoddi4+0xfe>
 8000d12:	4637      	mov	r7, r6
 8000d14:	4630      	mov	r0, r6
 8000d16:	e709      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d18:	4607      	mov	r7, r0
 8000d1a:	e6e7      	b.n	8000aec <__udivmoddi4+0x60>
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	e6fb      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d20:	4541      	cmp	r1, r8
 8000d22:	d2ab      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d28:	eb69 020e 	sbc.w	r2, r9, lr
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	4613      	mov	r3, r2
 8000d30:	e7a4      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d32:	4660      	mov	r0, ip
 8000d34:	e7e9      	b.n	8000d0a <__udivmoddi4+0x27e>
 8000d36:	4618      	mov	r0, r3
 8000d38:	e795      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3a:	4667      	mov	r7, ip
 8000d3c:	e7d1      	b.n	8000ce2 <__udivmoddi4+0x256>
 8000d3e:	4681      	mov	r9, r0
 8000d40:	e77c      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d42:	3802      	subs	r0, #2
 8000d44:	442c      	add	r4, r5
 8000d46:	e747      	b.n	8000bd8 <__udivmoddi4+0x14c>
 8000d48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d4c:	442b      	add	r3, r5
 8000d4e:	e72f      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d50:	4638      	mov	r0, r7
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xda>
 8000d54:	4637      	mov	r7, r6
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0xa0>

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <HAL_Init+0x40>)
 8000d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <HAL_Init+0x40>)
 8000d72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <HAL_Init+0x40>)
 8000d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f000 fd07 	bl	8001798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f000 f808 	bl	8000da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d90:	f008 f846 	bl	8008e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023c00 	.word	0x40023c00

08000da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_InitTick+0x54>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_InitTick+0x58>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 fd1f 	bl	8001802 <HAL_SYSTICK_Config>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00e      	b.n	8000dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	d80a      	bhi.n	8000dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f000 fce7 	bl	80017ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de0:	4a06      	ldr	r2, [pc, #24]	; (8000dfc <HAL_InitTick+0x5c>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e000      	b.n	8000dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000028 	.word	0x20000028
 8000df8:	20000004 	.word	0x20000004
 8000dfc:	20000000 	.word	0x20000000

08000e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x20>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x24>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <HAL_IncTick+0x24>)
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000004 	.word	0x20000004
 8000e24:	200000c0 	.word	0x200000c0

08000e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <HAL_GetTick+0x14>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	200000c0 	.word	0x200000c0

08000e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e48:	f7ff ffee 	bl	8000e28 <HAL_GetTick>
 8000e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e58:	d005      	beq.n	8000e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <HAL_Delay+0x40>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4413      	add	r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e66:	bf00      	nop
 8000e68:	f7ff ffde 	bl	8000e28 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d8f7      	bhi.n	8000e68 <HAL_Delay+0x28>
  {
  }
}
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000004 	.word	0x20000004

08000e84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d101      	bne.n	8000e9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e033      	b.n	8000f02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d109      	bne.n	8000eb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f007 ffe4 	bl	8008e70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f003 0310 	and.w	r3, r3, #16
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d118      	bne.n	8000ef4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000eca:	f023 0302 	bic.w	r3, r3, #2
 8000ece:	f043 0202 	orr.w	r2, r3, #2
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f000 fa92 	bl	8001400 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f023 0303 	bic.w	r3, r3, #3
 8000eea:	f043 0201 	orr.w	r2, r3, #1
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ef2:	e001      	b.n	8000ef8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d101      	bne.n	8000f26 <HAL_ADC_Start+0x1a>
 8000f22:	2302      	movs	r3, #2
 8000f24:	e0a5      	b.n	8001072 <HAL_ADC_Start+0x166>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d018      	beq.n	8000f6e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f042 0201 	orr.w	r2, r2, #1
 8000f4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f4c:	4b4c      	ldr	r3, [pc, #304]	; (8001080 <HAL_ADC_Start+0x174>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a4c      	ldr	r2, [pc, #304]	; (8001084 <HAL_ADC_Start+0x178>)
 8000f52:	fba2 2303 	umull	r2, r3, r2, r3
 8000f56:	0c9a      	lsrs	r2, r3, #18
 8000f58:	4613      	mov	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	4413      	add	r3, r2
 8000f5e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f60:	e002      	b.n	8000f68 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1f9      	bne.n	8000f62 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d179      	bne.n	8001070 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f84:	f023 0301 	bic.w	r3, r3, #1
 8000f88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d007      	beq.n	8000fae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fa6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fba:	d106      	bne.n	8000fca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc0:	f023 0206 	bic.w	r2, r3, #6
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	645a      	str	r2, [r3, #68]	; 0x44
 8000fc8:	e002      	b.n	8000fd0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <HAL_ADC_Start+0x17c>)
 8000fda:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000fe4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 031f 	and.w	r3, r3, #31
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d12a      	bne.n	8001048 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a25      	ldr	r2, [pc, #148]	; (800108c <HAL_ADC_Start+0x180>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d015      	beq.n	8001028 <HAL_ADC_Start+0x11c>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a23      	ldr	r2, [pc, #140]	; (8001090 <HAL_ADC_Start+0x184>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d105      	bne.n	8001012 <HAL_ADC_Start+0x106>
 8001006:	4b20      	ldr	r3, [pc, #128]	; (8001088 <HAL_ADC_Start+0x17c>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 031f 	and.w	r3, r3, #31
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00a      	beq.n	8001028 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <HAL_ADC_Start+0x188>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d129      	bne.n	8001070 <HAL_ADC_Start+0x164>
 800101c:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <HAL_ADC_Start+0x17c>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 031f 	and.w	r3, r3, #31
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d823      	bhi.n	8001070 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d11c      	bne.n	8001070 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	e013      	b.n	8001070 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0f      	ldr	r2, [pc, #60]	; (800108c <HAL_ADC_Start+0x180>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d10e      	bne.n	8001070 <HAL_ADC_Start+0x164>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d107      	bne.n	8001070 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800106e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000028 	.word	0x20000028
 8001084:	431bde83 	.word	0x431bde83
 8001088:	40012300 	.word	0x40012300
 800108c:	40012000 	.word	0x40012000
 8001090:	40012100 	.word	0x40012100
 8001094:	40012200 	.word	0x40012200

08001098 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010b4:	d113      	bne.n	80010de <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010c4:	d10b      	bne.n	80010de <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f043 0220 	orr.w	r2, r3, #32
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e05c      	b.n	8001198 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80010de:	f7ff fea3 	bl	8000e28 <HAL_GetTick>
 80010e2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010e4:	e01a      	b.n	800111c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ec:	d016      	beq.n	800111c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d007      	beq.n	8001104 <HAL_ADC_PollForConversion+0x6c>
 80010f4:	f7ff fe98 	bl	8000e28 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d20b      	bcs.n	800111c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	f043 0204 	orr.w	r2, r3, #4
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e03d      	b.n	8001198 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b02      	cmp	r3, #2
 8001128:	d1dd      	bne.n	80010e6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f06f 0212 	mvn.w	r2, #18
 8001132:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d123      	bne.n	8001196 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001152:	2b00      	cmp	r3, #0
 8001154:	d11f      	bne.n	8001196 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001160:	2b00      	cmp	r3, #0
 8001162:	d006      	beq.n	8001172 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800116e:	2b00      	cmp	r3, #0
 8001170:	d111      	bne.n	8001196 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d105      	bne.n	8001196 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f043 0201 	orr.w	r2, r3, #1
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d101      	bne.n	80011d8 <HAL_ADC_ConfigChannel+0x1c>
 80011d4:	2302      	movs	r3, #2
 80011d6:	e105      	b.n	80013e4 <HAL_ADC_ConfigChannel+0x228>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b09      	cmp	r3, #9
 80011e6:	d925      	bls.n	8001234 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68d9      	ldr	r1, [r3, #12]
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	461a      	mov	r2, r3
 80011f6:	4613      	mov	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	3b1e      	subs	r3, #30
 80011fe:	2207      	movs	r2, #7
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43da      	mvns	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	400a      	ands	r2, r1
 800120c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68d9      	ldr	r1, [r3, #12]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	b29b      	uxth	r3, r3
 800121e:	4618      	mov	r0, r3
 8001220:	4603      	mov	r3, r0
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4403      	add	r3, r0
 8001226:	3b1e      	subs	r3, #30
 8001228:	409a      	lsls	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	430a      	orrs	r2, r1
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	e022      	b.n	800127a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6919      	ldr	r1, [r3, #16]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	b29b      	uxth	r3, r3
 8001240:	461a      	mov	r2, r3
 8001242:	4613      	mov	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4413      	add	r3, r2
 8001248:	2207      	movs	r2, #7
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43da      	mvns	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	400a      	ands	r2, r1
 8001256:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6919      	ldr	r1, [r3, #16]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	b29b      	uxth	r3, r3
 8001268:	4618      	mov	r0, r3
 800126a:	4603      	mov	r3, r0
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4403      	add	r3, r0
 8001270:	409a      	lsls	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	430a      	orrs	r2, r1
 8001278:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b06      	cmp	r3, #6
 8001280:	d824      	bhi.n	80012cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	3b05      	subs	r3, #5
 8001294:	221f      	movs	r2, #31
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	400a      	ands	r2, r1
 80012a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	4618      	mov	r0, r3
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	3b05      	subs	r3, #5
 80012be:	fa00 f203 	lsl.w	r2, r0, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	635a      	str	r2, [r3, #52]	; 0x34
 80012ca:	e04c      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b0c      	cmp	r3, #12
 80012d2:	d824      	bhi.n	800131e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	3b23      	subs	r3, #35	; 0x23
 80012e6:	221f      	movs	r2, #31
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43da      	mvns	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	400a      	ands	r2, r1
 80012f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	b29b      	uxth	r3, r3
 8001302:	4618      	mov	r0, r3
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	3b23      	subs	r3, #35	; 0x23
 8001310:	fa00 f203 	lsl.w	r2, r0, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	631a      	str	r2, [r3, #48]	; 0x30
 800131c:	e023      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	3b41      	subs	r3, #65	; 0x41
 8001330:	221f      	movs	r2, #31
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43da      	mvns	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	400a      	ands	r2, r1
 800133e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	b29b      	uxth	r3, r3
 800134c:	4618      	mov	r0, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	3b41      	subs	r3, #65	; 0x41
 800135a:	fa00 f203 	lsl.w	r2, r0, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	430a      	orrs	r2, r1
 8001364:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001366:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <HAL_ADC_ConfigChannel+0x234>)
 8001368:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a21      	ldr	r2, [pc, #132]	; (80013f4 <HAL_ADC_ConfigChannel+0x238>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d109      	bne.n	8001388 <HAL_ADC_ConfigChannel+0x1cc>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b12      	cmp	r3, #18
 800137a:	d105      	bne.n	8001388 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a19      	ldr	r2, [pc, #100]	; (80013f4 <HAL_ADC_ConfigChannel+0x238>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d123      	bne.n	80013da <HAL_ADC_ConfigChannel+0x21e>
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b10      	cmp	r3, #16
 8001398:	d003      	beq.n	80013a2 <HAL_ADC_ConfigChannel+0x1e6>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b11      	cmp	r3, #17
 80013a0:	d11b      	bne.n	80013da <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b10      	cmp	r3, #16
 80013b4:	d111      	bne.n	80013da <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <HAL_ADC_ConfigChannel+0x23c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a10      	ldr	r2, [pc, #64]	; (80013fc <HAL_ADC_ConfigChannel+0x240>)
 80013bc:	fba2 2303 	umull	r2, r3, r2, r3
 80013c0:	0c9a      	lsrs	r2, r3, #18
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013cc:	e002      	b.n	80013d4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f9      	bne.n	80013ce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	40012300 	.word	0x40012300
 80013f4:	40012000 	.word	0x40012000
 80013f8:	20000028 	.word	0x20000028
 80013fc:	431bde83 	.word	0x431bde83

08001400 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001408:	4b79      	ldr	r3, [pc, #484]	; (80015f0 <ADC_Init+0x1f0>)
 800140a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	431a      	orrs	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001434:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6859      	ldr	r1, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	021a      	lsls	r2, r3, #8
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001458:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6859      	ldr	r1, [r3, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	430a      	orrs	r2, r1
 800146a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800147a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6899      	ldr	r1, [r3, #8]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001492:	4a58      	ldr	r2, [pc, #352]	; (80015f4 <ADC_Init+0x1f4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d022      	beq.n	80014de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6899      	ldr	r1, [r3, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6899      	ldr	r1, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	e00f      	b.n	80014fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 0202 	bic.w	r2, r2, #2
 800150c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6899      	ldr	r1, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7e1b      	ldrb	r3, [r3, #24]
 8001518:	005a      	lsls	r2, r3, #1
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d01b      	beq.n	8001564 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800153a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800154a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6859      	ldr	r1, [r3, #4]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	3b01      	subs	r3, #1
 8001558:	035a      	lsls	r2, r3, #13
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	e007      	b.n	8001574 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001572:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001582:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	3b01      	subs	r3, #1
 8001590:	051a      	lsls	r2, r3, #20
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6899      	ldr	r1, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015b6:	025a      	lsls	r2, r3, #9
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6899      	ldr	r1, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	029a      	lsls	r2, r3, #10
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	609a      	str	r2, [r3, #8]
}
 80015e4:	bf00      	nop
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	40012300 	.word	0x40012300
 80015f4:	0f000001 	.word	0x0f000001

080015f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001614:	4013      	ands	r3, r2
 8001616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162a:	4a04      	ldr	r2, [pc, #16]	; (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	60d3      	str	r3, [r2, #12]
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <__NVIC_GetPriorityGrouping+0x18>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	f003 0307 	and.w	r3, r3, #7
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	2b00      	cmp	r3, #0
 800166c:	db0b      	blt.n	8001686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	f003 021f 	and.w	r2, r3, #31
 8001674:	4907      	ldr	r1, [pc, #28]	; (8001694 <__NVIC_EnableIRQ+0x38>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	095b      	lsrs	r3, r3, #5
 800167c:	2001      	movs	r0, #1
 800167e:	fa00 f202 	lsl.w	r2, r0, r2
 8001682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000e100 	.word	0xe000e100

08001698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	db0a      	blt.n	80016c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	490c      	ldr	r1, [pc, #48]	; (80016e4 <__NVIC_SetPriority+0x4c>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	0112      	lsls	r2, r2, #4
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	440b      	add	r3, r1
 80016bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c0:	e00a      	b.n	80016d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4908      	ldr	r1, [pc, #32]	; (80016e8 <__NVIC_SetPriority+0x50>)
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	3b04      	subs	r3, #4
 80016d0:	0112      	lsls	r2, r2, #4
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	440b      	add	r3, r1
 80016d6:	761a      	strb	r2, [r3, #24]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000e100 	.word	0xe000e100
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f1c3 0307 	rsb	r3, r3, #7
 8001706:	2b04      	cmp	r3, #4
 8001708:	bf28      	it	cs
 800170a:	2304      	movcs	r3, #4
 800170c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3304      	adds	r3, #4
 8001712:	2b06      	cmp	r3, #6
 8001714:	d902      	bls.n	800171c <NVIC_EncodePriority+0x30>
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3b03      	subs	r3, #3
 800171a:	e000      	b.n	800171e <NVIC_EncodePriority+0x32>
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	f04f 32ff 	mov.w	r2, #4294967295
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43da      	mvns	r2, r3
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	401a      	ands	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001734:	f04f 31ff 	mov.w	r1, #4294967295
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	fa01 f303 	lsl.w	r3, r1, r3
 800173e:	43d9      	mvns	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	4313      	orrs	r3, r2
         );
}
 8001746:	4618      	mov	r0, r3
 8001748:	3724      	adds	r7, #36	; 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001764:	d301      	bcc.n	800176a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001766:	2301      	movs	r3, #1
 8001768:	e00f      	b.n	800178a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <SysTick_Config+0x40>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3b01      	subs	r3, #1
 8001770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001772:	210f      	movs	r1, #15
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	f7ff ff8e 	bl	8001698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <SysTick_Config+0x40>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001782:	4b04      	ldr	r3, [pc, #16]	; (8001794 <SysTick_Config+0x40>)
 8001784:	2207      	movs	r2, #7
 8001786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	e000e010 	.word	0xe000e010

08001798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff ff29 	bl	80015f8 <__NVIC_SetPriorityGrouping>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b086      	sub	sp, #24
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c0:	f7ff ff3e 	bl	8001640 <__NVIC_GetPriorityGrouping>
 80017c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	6978      	ldr	r0, [r7, #20]
 80017cc:	f7ff ff8e 	bl	80016ec <NVIC_EncodePriority>
 80017d0:	4602      	mov	r2, r0
 80017d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff5d 	bl	8001698 <__NVIC_SetPriority>
}
 80017de:	bf00      	nop
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff31 	bl	800165c <__NVIC_EnableIRQ>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ffa2 	bl	8001754 <SysTick_Config>
 8001810:	4603      	mov	r3, r0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800181c:	b480      	push	{r7}
 800181e:	b089      	sub	sp, #36	; 0x24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	e16b      	b.n	8001b10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001838:	2201      	movs	r2, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	4013      	ands	r3, r2
 800184a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	429a      	cmp	r2, r3
 8001852:	f040 815a 	bne.w	8001b0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_Init+0x4a>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b12      	cmp	r3, #18
 8001864:	d123      	bne.n	80018ae <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	08da      	lsrs	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3208      	adds	r2, #8
 800186e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	220f      	movs	r2, #15
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	691a      	ldr	r2, [r3, #16]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	08da      	lsrs	r2, r3, #3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3208      	adds	r2, #8
 80018a8:	69b9      	ldr	r1, [r7, #24]
 80018aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	2203      	movs	r2, #3
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4013      	ands	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0203 	and.w	r2, r3, #3
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d00b      	beq.n	8001902 <HAL_GPIO_Init+0xe6>
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d007      	beq.n	8001902 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018f6:	2b11      	cmp	r3, #17
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b12      	cmp	r3, #18
 8001900:	d130      	bne.n	8001964 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	2203      	movs	r2, #3
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001938:	2201      	movs	r2, #1
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f003 0201 	and.w	r2, r3, #1
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 80b4 	beq.w	8001b0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	4b5f      	ldr	r3, [pc, #380]	; (8001b24 <HAL_GPIO_Init+0x308>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	4a5e      	ldr	r2, [pc, #376]	; (8001b24 <HAL_GPIO_Init+0x308>)
 80019ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b0:	6453      	str	r3, [r2, #68]	; 0x44
 80019b2:	4b5c      	ldr	r3, [pc, #368]	; (8001b24 <HAL_GPIO_Init+0x308>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019be:	4a5a      	ldr	r2, [pc, #360]	; (8001b28 <HAL_GPIO_Init+0x30c>)
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	089b      	lsrs	r3, r3, #2
 80019c4:	3302      	adds	r3, #2
 80019c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	220f      	movs	r2, #15
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a51      	ldr	r2, [pc, #324]	; (8001b2c <HAL_GPIO_Init+0x310>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d02b      	beq.n	8001a42 <HAL_GPIO_Init+0x226>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a50      	ldr	r2, [pc, #320]	; (8001b30 <HAL_GPIO_Init+0x314>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d025      	beq.n	8001a3e <HAL_GPIO_Init+0x222>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4f      	ldr	r2, [pc, #316]	; (8001b34 <HAL_GPIO_Init+0x318>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d01f      	beq.n	8001a3a <HAL_GPIO_Init+0x21e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4e      	ldr	r2, [pc, #312]	; (8001b38 <HAL_GPIO_Init+0x31c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d019      	beq.n	8001a36 <HAL_GPIO_Init+0x21a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4d      	ldr	r2, [pc, #308]	; (8001b3c <HAL_GPIO_Init+0x320>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d013      	beq.n	8001a32 <HAL_GPIO_Init+0x216>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a4c      	ldr	r2, [pc, #304]	; (8001b40 <HAL_GPIO_Init+0x324>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d00d      	beq.n	8001a2e <HAL_GPIO_Init+0x212>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4b      	ldr	r2, [pc, #300]	; (8001b44 <HAL_GPIO_Init+0x328>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d007      	beq.n	8001a2a <HAL_GPIO_Init+0x20e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a4a      	ldr	r2, [pc, #296]	; (8001b48 <HAL_GPIO_Init+0x32c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d101      	bne.n	8001a26 <HAL_GPIO_Init+0x20a>
 8001a22:	2307      	movs	r3, #7
 8001a24:	e00e      	b.n	8001a44 <HAL_GPIO_Init+0x228>
 8001a26:	2308      	movs	r3, #8
 8001a28:	e00c      	b.n	8001a44 <HAL_GPIO_Init+0x228>
 8001a2a:	2306      	movs	r3, #6
 8001a2c:	e00a      	b.n	8001a44 <HAL_GPIO_Init+0x228>
 8001a2e:	2305      	movs	r3, #5
 8001a30:	e008      	b.n	8001a44 <HAL_GPIO_Init+0x228>
 8001a32:	2304      	movs	r3, #4
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x228>
 8001a36:	2303      	movs	r3, #3
 8001a38:	e004      	b.n	8001a44 <HAL_GPIO_Init+0x228>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e002      	b.n	8001a44 <HAL_GPIO_Init+0x228>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_GPIO_Init+0x228>
 8001a42:	2300      	movs	r3, #0
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	f002 0203 	and.w	r2, r2, #3
 8001a4a:	0092      	lsls	r2, r2, #2
 8001a4c:	4093      	lsls	r3, r2
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a54:	4934      	ldr	r1, [pc, #208]	; (8001b28 <HAL_GPIO_Init+0x30c>)
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a62:	4b3a      	ldr	r3, [pc, #232]	; (8001b4c <HAL_GPIO_Init+0x330>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a86:	4a31      	ldr	r2, [pc, #196]	; (8001b4c <HAL_GPIO_Init+0x330>)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a8c:	4b2f      	ldr	r3, [pc, #188]	; (8001b4c <HAL_GPIO_Init+0x330>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ab0:	4a26      	ldr	r2, [pc, #152]	; (8001b4c <HAL_GPIO_Init+0x330>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab6:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <HAL_GPIO_Init+0x330>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ada:	4a1c      	ldr	r2, [pc, #112]	; (8001b4c <HAL_GPIO_Init+0x330>)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae0:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <HAL_GPIO_Init+0x330>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b04:	4a11      	ldr	r2, [pc, #68]	; (8001b4c <HAL_GPIO_Init+0x330>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	61fb      	str	r3, [r7, #28]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	2b0f      	cmp	r3, #15
 8001b14:	f67f ae90 	bls.w	8001838 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b18:	bf00      	nop
 8001b1a:	3724      	adds	r7, #36	; 0x24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40013800 	.word	0x40013800
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	40020400 	.word	0x40020400
 8001b34:	40020800 	.word	0x40020800
 8001b38:	40020c00 	.word	0x40020c00
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40021400 	.word	0x40021400
 8001b44:	40021800 	.word	0x40021800
 8001b48:	40021c00 	.word	0x40021c00
 8001b4c:	40013c00 	.word	0x40013c00

08001b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	807b      	strh	r3, [r7, #2]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b60:	787b      	ldrb	r3, [r7, #1]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b66:	887a      	ldrh	r2, [r7, #2]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b6c:	e003      	b.n	8001b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b6e:	887b      	ldrh	r3, [r7, #2]
 8001b70:	041a      	lsls	r2, r3, #16
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	619a      	str	r2, [r3, #24]
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001b82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b84:	b08f      	sub	sp, #60	; 0x3c
 8001b86:	af0a      	add	r7, sp, #40	; 0x28
 8001b88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e054      	b.n	8001c3e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d106      	bne.n	8001bb4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f007 fc36 	bl	8009420 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d102      	bne.n	8001bce <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f004 f8f2 	bl	8005dbc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	603b      	str	r3, [r7, #0]
 8001bde:	687e      	ldr	r6, [r7, #4]
 8001be0:	466d      	mov	r5, sp
 8001be2:	f106 0410 	add.w	r4, r6, #16
 8001be6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bf2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bf6:	1d33      	adds	r3, r6, #4
 8001bf8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bfa:	6838      	ldr	r0, [r7, #0]
 8001bfc:	f004 f86c 	bl	8005cd8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2101      	movs	r1, #1
 8001c06:	4618      	mov	r0, r3
 8001c08:	f004 f8e9 	bl	8005dde <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	687e      	ldr	r6, [r7, #4]
 8001c14:	466d      	mov	r5, sp
 8001c16:	f106 0410 	add.w	r4, r6, #16
 8001c1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c26:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c2a:	1d33      	adds	r3, r6, #4
 8001c2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c2e:	6838      	ldr	r0, [r7, #0]
 8001c30:	f004 f9fc 	bl	800602c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c46 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001c46:	b590      	push	{r4, r7, lr}
 8001c48:	b089      	sub	sp, #36	; 0x24
 8001c4a:	af04      	add	r7, sp, #16
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	4608      	mov	r0, r1
 8001c50:	4611      	mov	r1, r2
 8001c52:	461a      	mov	r2, r3
 8001c54:	4603      	mov	r3, r0
 8001c56:	70fb      	strb	r3, [r7, #3]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	70bb      	strb	r3, [r7, #2]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_HCD_HC_Init+0x28>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e07f      	b.n	8001d6e <HAL_HCD_HC_Init+0x128>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001c76:	78fa      	ldrb	r2, [r7, #3]
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	440b      	add	r3, r1
 8001c84:	333d      	adds	r3, #61	; 0x3d
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001c8a:	78fa      	ldrb	r2, [r7, #3]
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	440b      	add	r3, r1
 8001c98:	3338      	adds	r3, #56	; 0x38
 8001c9a:	787a      	ldrb	r2, [r7, #1]
 8001c9c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001c9e:	78fa      	ldrb	r2, [r7, #3]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	440b      	add	r3, r1
 8001cac:	3340      	adds	r3, #64	; 0x40
 8001cae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001cb0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001cb2:	78fa      	ldrb	r2, [r7, #3]
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	440b      	add	r3, r1
 8001cc0:	3339      	adds	r3, #57	; 0x39
 8001cc2:	78fa      	ldrb	r2, [r7, #3]
 8001cc4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001cc6:	78fa      	ldrb	r2, [r7, #3]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	440b      	add	r3, r1
 8001cd4:	333f      	adds	r3, #63	; 0x3f
 8001cd6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001cda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001cdc:	78fa      	ldrb	r2, [r7, #3]
 8001cde:	78bb      	ldrb	r3, [r7, #2]
 8001ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ce4:	b2d8      	uxtb	r0, r3
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	440b      	add	r3, r1
 8001cf2:	333a      	adds	r3, #58	; 0x3a
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001cf8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	da0a      	bge.n	8001d16 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001d00:	78fa      	ldrb	r2, [r7, #3]
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	440b      	add	r3, r1
 8001d0e:	333b      	adds	r3, #59	; 0x3b
 8001d10:	2201      	movs	r2, #1
 8001d12:	701a      	strb	r2, [r3, #0]
 8001d14:	e009      	b.n	8001d2a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001d16:	78fa      	ldrb	r2, [r7, #3]
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	440b      	add	r3, r1
 8001d24:	333b      	adds	r3, #59	; 0x3b
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001d2a:	78fa      	ldrb	r2, [r7, #3]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	440b      	add	r3, r1
 8001d38:	333c      	adds	r3, #60	; 0x3c
 8001d3a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d3e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	787c      	ldrb	r4, [r7, #1]
 8001d46:	78ba      	ldrb	r2, [r7, #2]
 8001d48:	78f9      	ldrb	r1, [r7, #3]
 8001d4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d4c:	9302      	str	r3, [sp, #8]
 8001d4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	4623      	mov	r3, r4
 8001d5c:	f004 fae8 	bl	8006330 <USB_HC_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd90      	pop	{r4, r7, pc}

08001d76 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <HAL_HCD_HC_Halt+0x1e>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e00f      	b.n	8001db4 <HAL_HCD_HC_Halt+0x3e>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	78fa      	ldrb	r2, [r7, #3]
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f004 fd22 	bl	80067ee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	4608      	mov	r0, r1
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4603      	mov	r3, r0
 8001dcc:	70fb      	strb	r3, [r7, #3]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	70bb      	strb	r3, [r7, #2]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001dd6:	78fa      	ldrb	r2, [r7, #3]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	440b      	add	r3, r1
 8001de4:	333b      	adds	r3, #59	; 0x3b
 8001de6:	78ba      	ldrb	r2, [r7, #2]
 8001de8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001dea:	78fa      	ldrb	r2, [r7, #3]
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	440b      	add	r3, r1
 8001df8:	333f      	adds	r3, #63	; 0x3f
 8001dfa:	787a      	ldrb	r2, [r7, #1]
 8001dfc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001dfe:	7c3b      	ldrb	r3, [r7, #16]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10a      	bne.n	8001e1a <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001e04:	78fa      	ldrb	r2, [r7, #3]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	440b      	add	r3, r1
 8001e12:	3342      	adds	r3, #66	; 0x42
 8001e14:	2203      	movs	r2, #3
 8001e16:	701a      	strb	r2, [r3, #0]
 8001e18:	e009      	b.n	8001e2e <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e1a:	78fa      	ldrb	r2, [r7, #3]
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	440b      	add	r3, r1
 8001e28:	3342      	adds	r3, #66	; 0x42
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001e2e:	787b      	ldrb	r3, [r7, #1]
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	f200 80d6 	bhi.w	8001fe2 <HAL_HCD_HC_SubmitRequest+0x226>
 8001e36:	a201      	add	r2, pc, #4	; (adr r2, 8001e3c <HAL_HCD_HC_SubmitRequest+0x80>)
 8001e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3c:	08001e4d 	.word	0x08001e4d
 8001e40:	08001fcd 	.word	0x08001fcd
 8001e44:	08001eb9 	.word	0x08001eb9
 8001e48:	08001f43 	.word	0x08001f43
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001e4c:	7c3b      	ldrb	r3, [r7, #16]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	f040 80c9 	bne.w	8001fe6 <HAL_HCD_HC_SubmitRequest+0x22a>
 8001e54:	78bb      	ldrb	r3, [r7, #2]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f040 80c5 	bne.w	8001fe6 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001e5c:	8b3b      	ldrh	r3, [r7, #24]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d109      	bne.n	8001e76 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001e62:	78fa      	ldrb	r2, [r7, #3]
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	440b      	add	r3, r1
 8001e70:	3351      	adds	r3, #81	; 0x51
 8001e72:	2201      	movs	r2, #1
 8001e74:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e76:	78fa      	ldrb	r2, [r7, #3]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	440b      	add	r3, r1
 8001e84:	3351      	adds	r3, #81	; 0x51
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10a      	bne.n	8001ea2 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e8c:	78fa      	ldrb	r2, [r7, #3]
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	440b      	add	r3, r1
 8001e9a:	3342      	adds	r3, #66	; 0x42
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ea0:	e0a1      	b.n	8001fe6 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ea2:	78fa      	ldrb	r2, [r7, #3]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	440b      	add	r3, r1
 8001eb0:	3342      	adds	r3, #66	; 0x42
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	701a      	strb	r2, [r3, #0]
      break;
 8001eb6:	e096      	b.n	8001fe6 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001eb8:	78bb      	ldrb	r3, [r7, #2]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d120      	bne.n	8001f00 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	440b      	add	r3, r1
 8001ecc:	3351      	adds	r3, #81	; 0x51
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10a      	bne.n	8001eea <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ed4:	78fa      	ldrb	r2, [r7, #3]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	440b      	add	r3, r1
 8001ee2:	3342      	adds	r3, #66	; 0x42
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ee8:	e07e      	b.n	8001fe8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001eea:	78fa      	ldrb	r2, [r7, #3]
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	440b      	add	r3, r1
 8001ef8:	3342      	adds	r3, #66	; 0x42
 8001efa:	2202      	movs	r2, #2
 8001efc:	701a      	strb	r2, [r3, #0]
      break;
 8001efe:	e073      	b.n	8001fe8 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f00:	78fa      	ldrb	r2, [r7, #3]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	440b      	add	r3, r1
 8001f0e:	3350      	adds	r3, #80	; 0x50
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10a      	bne.n	8001f2c <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f16:	78fa      	ldrb	r2, [r7, #3]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	440b      	add	r3, r1
 8001f24:	3342      	adds	r3, #66	; 0x42
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
      break;
 8001f2a:	e05d      	b.n	8001fe8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f2c:	78fa      	ldrb	r2, [r7, #3]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	440b      	add	r3, r1
 8001f3a:	3342      	adds	r3, #66	; 0x42
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	701a      	strb	r2, [r3, #0]
      break;
 8001f40:	e052      	b.n	8001fe8 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001f42:	78bb      	ldrb	r3, [r7, #2]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d120      	bne.n	8001f8a <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f48:	78fa      	ldrb	r2, [r7, #3]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	440b      	add	r3, r1
 8001f56:	3351      	adds	r3, #81	; 0x51
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10a      	bne.n	8001f74 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f5e:	78fa      	ldrb	r2, [r7, #3]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	3342      	adds	r3, #66	; 0x42
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f72:	e039      	b.n	8001fe8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f74:	78fa      	ldrb	r2, [r7, #3]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	440b      	add	r3, r1
 8001f82:	3342      	adds	r3, #66	; 0x42
 8001f84:	2202      	movs	r2, #2
 8001f86:	701a      	strb	r2, [r3, #0]
      break;
 8001f88:	e02e      	b.n	8001fe8 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f8a:	78fa      	ldrb	r2, [r7, #3]
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	440b      	add	r3, r1
 8001f98:	3350      	adds	r3, #80	; 0x50
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10a      	bne.n	8001fb6 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fa0:	78fa      	ldrb	r2, [r7, #3]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	440b      	add	r3, r1
 8001fae:	3342      	adds	r3, #66	; 0x42
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
      break;
 8001fb4:	e018      	b.n	8001fe8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	3342      	adds	r3, #66	; 0x42
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	701a      	strb	r2, [r3, #0]
      break;
 8001fca:	e00d      	b.n	8001fe8 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	440b      	add	r3, r1
 8001fda:	3342      	adds	r3, #66	; 0x42
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
      break;
 8001fe0:	e002      	b.n	8001fe8 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001fe2:	bf00      	nop
 8001fe4:	e000      	b.n	8001fe8 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001fe6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001fe8:	78fa      	ldrb	r2, [r7, #3]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3344      	adds	r3, #68	; 0x44
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ffc:	78fa      	ldrb	r2, [r7, #3]
 8001ffe:	8b39      	ldrh	r1, [r7, #24]
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4403      	add	r3, r0
 800200c:	3348      	adds	r3, #72	; 0x48
 800200e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002010:	78fa      	ldrb	r2, [r7, #3]
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	440b      	add	r3, r1
 800201e:	335c      	adds	r3, #92	; 0x5c
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002024:	78fa      	ldrb	r2, [r7, #3]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	440b      	add	r3, r1
 8002032:	334c      	adds	r3, #76	; 0x4c
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002038:	78fa      	ldrb	r2, [r7, #3]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	440b      	add	r3, r1
 8002046:	3339      	adds	r3, #57	; 0x39
 8002048:	78fa      	ldrb	r2, [r7, #3]
 800204a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800204c:	78fa      	ldrb	r2, [r7, #3]
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	440b      	add	r3, r1
 800205a:	335d      	adds	r3, #93	; 0x5d
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	78fa      	ldrb	r2, [r7, #3]
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	3338      	adds	r3, #56	; 0x38
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	18d1      	adds	r1, r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	f004 fa62 	bl	8006544 <USB_HC_StartXfer>
 8002080:	4603      	mov	r3, r0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop

0800208c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f003 ff7f 	bl	8005fa6 <USB_GetMode>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	f040 80f1 	bne.w	8002292 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f003 ff63 	bl	8005f80 <USB_ReadInterrupts>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80e7 	beq.w	8002290 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f003 ff5a 	bl	8005f80 <USB_ReadInterrupts>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020d6:	d104      	bne.n	80020e2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80020e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f003 ff4a 	bl	8005f80 <USB_ReadInterrupts>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020f6:	d104      	bne.n	8002102 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002100:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f003 ff3a 	bl	8005f80 <USB_ReadInterrupts>
 800210c:	4603      	mov	r3, r0
 800210e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002112:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002116:	d104      	bne.n	8002122 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002120:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f003 ff2a 	bl	8005f80 <USB_ReadInterrupts>
 800212c:	4603      	mov	r3, r0
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b02      	cmp	r3, #2
 8002134:	d103      	bne.n	800213e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2202      	movs	r2, #2
 800213c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f003 ff1c 	bl	8005f80 <USB_ReadInterrupts>
 8002148:	4603      	mov	r3, r0
 800214a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800214e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002152:	d117      	bne.n	8002184 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002162:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002166:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f007 f9d7 	bl	800951c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2101      	movs	r1, #1
 8002174:	4618      	mov	r0, r3
 8002176:	f004 f815 	bl	80061a4 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002182:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f003 fef9 	bl	8005f80 <USB_ReadInterrupts>
 800218e:	4603      	mov	r3, r0
 8002190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002198:	d102      	bne.n	80021a0 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f001 f8c8 	bl	8003330 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f003 feeb 	bl	8005f80 <USB_ReadInterrupts>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d106      	bne.n	80021c2 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f007 f995 	bl	80094e4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2208      	movs	r2, #8
 80021c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f003 feda 	bl	8005f80 <USB_ReadInterrupts>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021d6:	d138      	bne.n	800224a <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f004 faf5 	bl	80067cc <USB_HC_ReadInterrupt>
 80021e2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	e025      	b.n	8002236 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f003 030f 	and.w	r3, r3, #15
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	fa22 f303 	lsr.w	r3, r2, r3
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d018      	beq.n	8002230 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002214:	d106      	bne.n	8002224 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	4619      	mov	r1, r3
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f8cf 	bl	80023c0 <HCD_HC_IN_IRQHandler>
 8002222:	e005      	b.n	8002230 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	4619      	mov	r1, r3
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 fc5f 	bl	8002aee <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	3301      	adds	r3, #1
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	429a      	cmp	r2, r3
 800223e:	d3d4      	bcc.n	80021ea <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002248:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f003 fe96 	bl	8005f80 <USB_ReadInterrupts>
 8002254:	4603      	mov	r3, r0
 8002256:	f003 0310 	and.w	r3, r3, #16
 800225a:	2b10      	cmp	r3, #16
 800225c:	d101      	bne.n	8002262 <HAL_HCD_IRQHandler+0x1d6>
 800225e:	2301      	movs	r3, #1
 8002260:	e000      	b.n	8002264 <HAL_HCD_IRQHandler+0x1d8>
 8002262:	2300      	movs	r3, #0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d014      	beq.n	8002292 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699a      	ldr	r2, [r3, #24]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0210 	bic.w	r2, r2, #16
 8002276:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 ffad 	bl	80031d8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	699a      	ldr	r2, [r3, #24]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f042 0210 	orr.w	r2, r2, #16
 800228c:	619a      	str	r2, [r3, #24]
 800228e:	e000      	b.n	8002292 <HAL_HCD_IRQHandler+0x206>
      return;
 8002290:	bf00      	nop
    }
  }
}
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_HCD_Start+0x16>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e013      	b.n	80022d6 <HAL_HCD_Start+0x3e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f003 fd6d 	bl	8005d9a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2101      	movs	r1, #1
 80022c6:	4618      	mov	r0, r3
 80022c8:	f003 ffd0 	bl	800626c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_HCD_Stop+0x16>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e00d      	b.n	8002310 <HAL_HCD_Stop+0x32>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f004 fbaf 	bl	8006a64 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f003 ff77 	bl	8006218 <USB_ResetPort>
 800232a:	4603      	mov	r3, r0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	440b      	add	r3, r1
 800234e:	335c      	adds	r3, #92	; 0x5c
 8002350:	781b      	ldrb	r3, [r3, #0]
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	460b      	mov	r3, r1
 8002368:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800236a:	78fa      	ldrb	r2, [r7, #3]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	440b      	add	r3, r1
 8002378:	334c      	adds	r3, #76	; 0x4c
 800237a:	681b      	ldr	r3, [r3, #0]
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f003 ffb9 	bl	800630c <USB_GetCurrentFrame>
 800239a:	4603      	mov	r3, r0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f003 ff94 	bl	80062de <USB_GetHostSpeed>
 80023b6:	4603      	mov	r3, r0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	015a      	lsls	r2, r3, #5
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d119      	bne.n	8002424 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fc:	461a      	mov	r2, r3
 80023fe:	2304      	movs	r3, #4
 8002400:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	015a      	lsls	r2, r3, #5
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4413      	add	r3, r2
 800240a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	0151      	lsls	r1, r2, #5
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	440a      	add	r2, r1
 8002418:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800241c:	f043 0302 	orr.w	r3, r3, #2
 8002420:	60d3      	str	r3, [r2, #12]
 8002422:	e095      	b.n	8002550 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4413      	add	r3, r2
 800242c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 0320 	and.w	r3, r3, #32
 8002436:	2b20      	cmp	r3, #32
 8002438:	d109      	bne.n	800244e <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	015a      	lsls	r2, r3, #5
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4413      	add	r3, r2
 8002442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002446:	461a      	mov	r2, r3
 8002448:	2320      	movs	r3, #32
 800244a:	6093      	str	r3, [r2, #8]
 800244c:	e080      	b.n	8002550 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4413      	add	r3, r2
 8002456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b08      	cmp	r3, #8
 8002462:	d134      	bne.n	80024ce <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4413      	add	r3, r2
 800246c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	0151      	lsls	r1, r2, #5
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	440a      	add	r2, r1
 800247a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800247e:	f043 0302 	orr.w	r3, r3, #2
 8002482:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	440b      	add	r3, r1
 8002492:	335d      	adds	r3, #93	; 0x5d
 8002494:	2205      	movs	r2, #5
 8002496:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a4:	461a      	mov	r2, r3
 80024a6:	2310      	movs	r3, #16
 80024a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b6:	461a      	mov	r2, r3
 80024b8:	2308      	movs	r3, #8
 80024ba:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	4611      	mov	r1, r2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f004 f991 	bl	80067ee <USB_HC_Halt>
 80024cc:	e040      	b.n	8002550 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e4:	d134      	bne.n	8002550 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	0151      	lsls	r1, r2, #5
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	440a      	add	r2, r1
 80024fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002500:	f043 0302 	orr.w	r3, r3, #2
 8002504:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f004 f96c 	bl	80067ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	015a      	lsls	r2, r3, #5
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4413      	add	r3, r2
 800251e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002522:	461a      	mov	r2, r3
 8002524:	2310      	movs	r3, #16
 8002526:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	440b      	add	r3, r1
 8002536:	335d      	adds	r3, #93	; 0x5d
 8002538:	2208      	movs	r2, #8
 800253a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4413      	add	r3, r2
 8002544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002548:	461a      	mov	r2, r3
 800254a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800254e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4413      	add	r3, r2
 8002558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002566:	d122      	bne.n	80025ae <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4413      	add	r3, r2
 8002570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	0151      	lsls	r1, r2, #5
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	440a      	add	r2, r1
 800257e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002582:	f043 0302 	orr.w	r3, r3, #2
 8002586:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	4611      	mov	r1, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f004 f92b 	bl	80067ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a4:	461a      	mov	r2, r3
 80025a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025aa:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80025ac:	e29b      	b.n	8002ae6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	f040 80c1 	bne.w	8002748 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d01b      	beq.n	8002606 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	440b      	add	r3, r1
 80025dc:	3348      	adds	r3, #72	; 0x48
 80025de:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	0159      	lsls	r1, r3, #5
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	440b      	add	r3, r1
 80025e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80025f2:	1ad1      	subs	r1, r2, r3
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4613      	mov	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4403      	add	r3, r0
 8002602:	334c      	adds	r3, #76	; 0x4c
 8002604:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	440b      	add	r3, r1
 8002614:	335d      	adds	r3, #93	; 0x5d
 8002616:	2201      	movs	r2, #1
 8002618:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	440b      	add	r3, r1
 8002628:	3358      	adds	r3, #88	; 0x58
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4413      	add	r3, r2
 8002636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263a:	461a      	mov	r2, r3
 800263c:	2301      	movs	r3, #1
 800263e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	440b      	add	r3, r1
 800264e:	333f      	adds	r3, #63	; 0x3f
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	440b      	add	r3, r1
 8002664:	333f      	adds	r3, #63	; 0x3f
 8002666:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002668:	2b02      	cmp	r3, #2
 800266a:	d121      	bne.n	80026b0 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4413      	add	r3, r2
 8002674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	0151      	lsls	r1, r2, #5
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	440a      	add	r2, r1
 8002682:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002686:	f043 0302 	orr.w	r3, r3, #2
 800268a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f004 f8a9 	bl	80067ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	461a      	mov	r2, r3
 80026aa:	2310      	movs	r3, #16
 80026ac:	6093      	str	r3, [r2, #8]
 80026ae:	e034      	b.n	800271a <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	440b      	add	r3, r1
 80026be:	333f      	adds	r3, #63	; 0x3f
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d129      	bne.n	800271a <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	0151      	lsls	r1, r2, #5
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	440a      	add	r2, r1
 80026dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026e4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	335c      	adds	r3, #92	; 0x5c
 80026f6:	2201      	movs	r2, #1
 80026f8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	b2d8      	uxtb	r0, r3
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	440b      	add	r3, r1
 800270c:	335c      	adds	r3, #92	; 0x5c
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	4601      	mov	r1, r0
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f006 ff0f 	bl	8009538 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	440b      	add	r3, r1
 8002728:	3350      	adds	r3, #80	; 0x50
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	f083 0301 	eor.w	r3, r3, #1
 8002730:	b2d8      	uxtb	r0, r3
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	440b      	add	r3, r1
 8002740:	3350      	adds	r3, #80	; 0x50
 8002742:	4602      	mov	r2, r0
 8002744:	701a      	strb	r2, [r3, #0]
}
 8002746:	e1ce      	b.n	8002ae6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b02      	cmp	r3, #2
 800275c:	f040 80f1 	bne.w	8002942 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	0151      	lsls	r1, r2, #5
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	440a      	add	r2, r1
 8002776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800277a:	f023 0302 	bic.w	r3, r3, #2
 800277e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	440b      	add	r3, r1
 800278e:	335d      	adds	r3, #93	; 0x5d
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d10a      	bne.n	80027ac <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	440b      	add	r3, r1
 80027a4:	335c      	adds	r3, #92	; 0x5c
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]
 80027aa:	e0b0      	b.n	800290e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	440b      	add	r3, r1
 80027ba:	335d      	adds	r3, #93	; 0x5d
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b05      	cmp	r3, #5
 80027c0:	d10a      	bne.n	80027d8 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	440b      	add	r3, r1
 80027d0:	335c      	adds	r3, #92	; 0x5c
 80027d2:	2205      	movs	r2, #5
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	e09a      	b.n	800290e <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	440b      	add	r3, r1
 80027e6:	335d      	adds	r3, #93	; 0x5d
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b06      	cmp	r3, #6
 80027ec:	d00a      	beq.n	8002804 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	440b      	add	r3, r1
 80027fc:	335d      	adds	r3, #93	; 0x5d
 80027fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002800:	2b08      	cmp	r3, #8
 8002802:	d156      	bne.n	80028b2 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	440b      	add	r3, r1
 8002812:	3358      	adds	r3, #88	; 0x58
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	1c59      	adds	r1, r3, #1
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4403      	add	r3, r0
 8002826:	3358      	adds	r3, #88	; 0x58
 8002828:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	440b      	add	r3, r1
 8002838:	3358      	adds	r3, #88	; 0x58
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b03      	cmp	r3, #3
 800283e:	d914      	bls.n	800286a <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	440b      	add	r3, r1
 800284e:	3358      	adds	r3, #88	; 0x58
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	440b      	add	r3, r1
 8002862:	335c      	adds	r3, #92	; 0x5c
 8002864:	2204      	movs	r2, #4
 8002866:	701a      	strb	r2, [r3, #0]
 8002868:	e009      	b.n	800287e <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	440b      	add	r3, r1
 8002878:	335c      	adds	r3, #92	; 0x5c
 800287a:	2202      	movs	r2, #2
 800287c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	015a      	lsls	r2, r3, #5
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4413      	add	r3, r2
 8002886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002894:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800289c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	015a      	lsls	r2, r3, #5
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4413      	add	r3, r2
 80028a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028aa:	461a      	mov	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	e02d      	b.n	800290e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	440b      	add	r3, r1
 80028c0:	335d      	adds	r3, #93	; 0x5d
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d122      	bne.n	800290e <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	440b      	add	r3, r1
 80028d6:	335c      	adds	r3, #92	; 0x5c
 80028d8:	2202      	movs	r2, #2
 80028da:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028f2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028fa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4413      	add	r3, r2
 8002904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002908:	461a      	mov	r2, r3
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4413      	add	r3, r2
 8002916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291a:	461a      	mov	r2, r3
 800291c:	2302      	movs	r3, #2
 800291e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	b2d8      	uxtb	r0, r3
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	440b      	add	r3, r1
 8002932:	335c      	adds	r3, #92	; 0x5c
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	4601      	mov	r1, r0
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f006 fdfc 	bl	8009538 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002940:	e0d1      	b.n	8002ae6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4413      	add	r3, r2
 800294a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002954:	2b80      	cmp	r3, #128	; 0x80
 8002956:	d13e      	bne.n	80029d6 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4413      	add	r3, r2
 8002960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	0151      	lsls	r1, r2, #5
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	440a      	add	r2, r1
 800296e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002972:	f043 0302 	orr.w	r3, r3, #2
 8002976:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	440b      	add	r3, r1
 8002986:	3358      	adds	r3, #88	; 0x58
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	1c59      	adds	r1, r3, #1
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4403      	add	r3, r0
 800299a:	3358      	adds	r3, #88	; 0x58
 800299c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	440b      	add	r3, r1
 80029ac:	335d      	adds	r3, #93	; 0x5d
 80029ae:	2206      	movs	r2, #6
 80029b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f003 ff16 	bl	80067ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	015a      	lsls	r2, r3, #5
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ce:	461a      	mov	r2, r3
 80029d0:	2380      	movs	r3, #128	; 0x80
 80029d2:	6093      	str	r3, [r2, #8]
}
 80029d4:	e087      	b.n	8002ae6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	015a      	lsls	r2, r3, #5
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4413      	add	r3, r2
 80029de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b10      	cmp	r3, #16
 80029ea:	d17c      	bne.n	8002ae6 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	440b      	add	r3, r1
 80029fa:	333f      	adds	r3, #63	; 0x3f
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d122      	bne.n	8002a48 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	440b      	add	r3, r1
 8002a10:	3358      	adds	r3, #88	; 0x58
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	015a      	lsls	r2, r3, #5
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	0151      	lsls	r1, r2, #5
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	440a      	add	r2, r1
 8002a2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a30:	f043 0302 	orr.w	r3, r3, #2
 8002a34:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f003 fed4 	bl	80067ee <USB_HC_Halt>
 8002a46:	e045      	b.n	8002ad4 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	440b      	add	r3, r1
 8002a56:	333f      	adds	r3, #63	; 0x3f
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	440b      	add	r3, r1
 8002a6c:	333f      	adds	r3, #63	; 0x3f
 8002a6e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d12f      	bne.n	8002ad4 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	440b      	add	r3, r1
 8002a82:	3358      	adds	r3, #88	; 0x58
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d121      	bne.n	8002ad4 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	440b      	add	r3, r1
 8002a9e:	335d      	adds	r3, #93	; 0x5d
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	0151      	lsls	r1, r2, #5
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	440a      	add	r2, r1
 8002aba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002abe:	f043 0302 	orr.w	r3, r3, #2
 8002ac2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	4611      	mov	r1, r2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f003 fe8d 	bl	80067ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2310      	movs	r3, #16
 8002ae4:	6093      	str	r3, [r2, #8]
}
 8002ae6:	bf00      	nop
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b086      	sub	sp, #24
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	460b      	mov	r3, r1
 8002af8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d119      	bne.n	8002b52 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	2304      	movs	r3, #4
 8002b2e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	0151      	lsls	r1, r2, #5
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	440a      	add	r2, r1
 8002b46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b4a:	f043 0302 	orr.w	r3, r3, #2
 8002b4e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002b50:	e33e      	b.n	80031d0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 0320 	and.w	r3, r3, #32
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	d141      	bne.n	8002bec <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b74:	461a      	mov	r2, r3
 8002b76:	2320      	movs	r3, #32
 8002b78:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	440b      	add	r3, r1
 8002b88:	333d      	adds	r3, #61	; 0x3d
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	f040 831f 	bne.w	80031d0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	440b      	add	r3, r1
 8002ba0:	333d      	adds	r3, #61	; 0x3d
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	440b      	add	r3, r1
 8002bb4:	335c      	adds	r3, #92	; 0x5c
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	0151      	lsls	r1, r2, #5
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	440a      	add	r2, r1
 8002bd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bd4:	f043 0302 	orr.w	r3, r3, #2
 8002bd8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f003 fe02 	bl	80067ee <USB_HC_Halt>
}
 8002bea:	e2f1      	b.n	80031d0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfe:	2b40      	cmp	r3, #64	; 0x40
 8002c00:	d13f      	bne.n	8002c82 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	440b      	add	r3, r1
 8002c10:	335d      	adds	r3, #93	; 0x5d
 8002c12:	2204      	movs	r2, #4
 8002c14:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	440b      	add	r3, r1
 8002c24:	333d      	adds	r3, #61	; 0x3d
 8002c26:	2201      	movs	r2, #1
 8002c28:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	440b      	add	r3, r1
 8002c38:	3358      	adds	r3, #88	; 0x58
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	0151      	lsls	r1, r2, #5
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	440a      	add	r2, r1
 8002c54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f003 fdc0 	bl	80067ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2340      	movs	r3, #64	; 0x40
 8002c7e:	6093      	str	r3, [r2, #8]
}
 8002c80:	e2a6      	b.n	80031d0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c98:	d122      	bne.n	8002ce0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	0151      	lsls	r1, r2, #5
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	440a      	add	r2, r1
 8002cb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cb4:	f043 0302 	orr.w	r3, r3, #2
 8002cb8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f003 fd92 	bl	80067ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cdc:	6093      	str	r3, [r2, #8]
}
 8002cde:	e277      	b.n	80031d0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	015a      	lsls	r2, r3, #5
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d135      	bne.n	8002d62 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	440b      	add	r3, r1
 8002d04:	3358      	adds	r3, #88	; 0x58
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	0151      	lsls	r1, r2, #5
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	440a      	add	r2, r1
 8002d20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d24:	f043 0302 	orr.w	r3, r3, #2
 8002d28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	4611      	mov	r1, r2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f003 fd5a 	bl	80067ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d46:	461a      	mov	r2, r3
 8002d48:	2301      	movs	r3, #1
 8002d4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	440b      	add	r3, r1
 8002d5a:	335d      	adds	r3, #93	; 0x5d
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	701a      	strb	r2, [r3, #0]
}
 8002d60:	e236      	b.n	80031d0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d12b      	bne.n	8002dd0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d84:	461a      	mov	r2, r3
 8002d86:	2308      	movs	r3, #8
 8002d88:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	0151      	lsls	r1, r2, #5
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	440a      	add	r2, r1
 8002da0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002da4:	f043 0302 	orr.w	r3, r3, #2
 8002da8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	4611      	mov	r1, r2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f003 fd1a 	bl	80067ee <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	440b      	add	r3, r1
 8002dc8:	335d      	adds	r3, #93	; 0x5d
 8002dca:	2205      	movs	r2, #5
 8002dcc:	701a      	strb	r2, [r3, #0]
}
 8002dce:	e1ff      	b.n	80031d0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	2b10      	cmp	r3, #16
 8002de4:	d155      	bne.n	8002e92 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	440b      	add	r3, r1
 8002df4:	3358      	adds	r3, #88	; 0x58
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	440b      	add	r3, r1
 8002e08:	335d      	adds	r3, #93	; 0x5d
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	440b      	add	r3, r1
 8002e1c:	333d      	adds	r3, #61	; 0x3d
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d114      	bne.n	8002e4e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	440b      	add	r3, r1
 8002e32:	333c      	adds	r3, #60	; 0x3c
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d109      	bne.n	8002e4e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	440b      	add	r3, r1
 8002e48:	333d      	adds	r3, #61	; 0x3d
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	0151      	lsls	r1, r2, #5
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	440a      	add	r2, r1
 8002e64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e68:	f043 0302 	orr.w	r3, r3, #2
 8002e6c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	4611      	mov	r1, r2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f003 fcb8 	bl	80067ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	2310      	movs	r3, #16
 8002e8e:	6093      	str	r3, [r2, #8]
}
 8002e90:	e19e      	b.n	80031d0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea4:	2b80      	cmp	r3, #128	; 0x80
 8002ea6:	d12b      	bne.n	8002f00 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	0151      	lsls	r1, r2, #5
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	440a      	add	r2, r1
 8002ebe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ec2:	f043 0302 	orr.w	r3, r3, #2
 8002ec6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f003 fc8b 	bl	80067ee <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	440b      	add	r3, r1
 8002ee6:	335d      	adds	r3, #93	; 0x5d
 8002ee8:	2206      	movs	r2, #6
 8002eea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef8:	461a      	mov	r2, r3
 8002efa:	2380      	movs	r3, #128	; 0x80
 8002efc:	6093      	str	r3, [r2, #8]
}
 8002efe:	e167      	b.n	80031d0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f16:	d135      	bne.n	8002f84 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	0151      	lsls	r1, r2, #5
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	440a      	add	r2, r1
 8002f2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f32:	f043 0302 	orr.w	r3, r3, #2
 8002f36:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	4611      	mov	r1, r2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f003 fc53 	bl	80067ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f54:	461a      	mov	r2, r3
 8002f56:	2310      	movs	r3, #16
 8002f58:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f66:	461a      	mov	r2, r3
 8002f68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	440b      	add	r3, r1
 8002f7c:	335d      	adds	r3, #93	; 0x5d
 8002f7e:	2208      	movs	r2, #8
 8002f80:	701a      	strb	r2, [r3, #0]
}
 8002f82:	e125      	b.n	80031d0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	f040 811a 	bne.w	80031d0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	0151      	lsls	r1, r2, #5
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	440a      	add	r2, r1
 8002fb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fb6:	f023 0302 	bic.w	r3, r3, #2
 8002fba:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	440b      	add	r3, r1
 8002fca:	335d      	adds	r3, #93	; 0x5d
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d137      	bne.n	8003042 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	440b      	add	r3, r1
 8002fe0:	335c      	adds	r3, #92	; 0x5c
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	440b      	add	r3, r1
 8002ff4:	333f      	adds	r3, #63	; 0x3f
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d00b      	beq.n	8003014 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	440b      	add	r3, r1
 800300a:	333f      	adds	r3, #63	; 0x3f
 800300c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800300e:	2b03      	cmp	r3, #3
 8003010:	f040 80c5 	bne.w	800319e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	440b      	add	r3, r1
 8003022:	3351      	adds	r3, #81	; 0x51
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	f083 0301 	eor.w	r3, r3, #1
 800302a:	b2d8      	uxtb	r0, r3
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	440b      	add	r3, r1
 800303a:	3351      	adds	r3, #81	; 0x51
 800303c:	4602      	mov	r2, r0
 800303e:	701a      	strb	r2, [r3, #0]
 8003040:	e0ad      	b.n	800319e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	440b      	add	r3, r1
 8003050:	335d      	adds	r3, #93	; 0x5d
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b03      	cmp	r3, #3
 8003056:	d10a      	bne.n	800306e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4613      	mov	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	440b      	add	r3, r1
 8003066:	335c      	adds	r3, #92	; 0x5c
 8003068:	2202      	movs	r2, #2
 800306a:	701a      	strb	r2, [r3, #0]
 800306c:	e097      	b.n	800319e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	440b      	add	r3, r1
 800307c:	335d      	adds	r3, #93	; 0x5d
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b04      	cmp	r3, #4
 8003082:	d10a      	bne.n	800309a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4613      	mov	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	440b      	add	r3, r1
 8003092:	335c      	adds	r3, #92	; 0x5c
 8003094:	2202      	movs	r2, #2
 8003096:	701a      	strb	r2, [r3, #0]
 8003098:	e081      	b.n	800319e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	440b      	add	r3, r1
 80030a8:	335d      	adds	r3, #93	; 0x5d
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b05      	cmp	r3, #5
 80030ae:	d10a      	bne.n	80030c6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	440b      	add	r3, r1
 80030be:	335c      	adds	r3, #92	; 0x5c
 80030c0:	2205      	movs	r2, #5
 80030c2:	701a      	strb	r2, [r3, #0]
 80030c4:	e06b      	b.n	800319e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	440b      	add	r3, r1
 80030d4:	335d      	adds	r3, #93	; 0x5d
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b06      	cmp	r3, #6
 80030da:	d00a      	beq.n	80030f2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	440b      	add	r3, r1
 80030ea:	335d      	adds	r3, #93	; 0x5d
 80030ec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d155      	bne.n	800319e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	440b      	add	r3, r1
 8003100:	3358      	adds	r3, #88	; 0x58
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	1c59      	adds	r1, r3, #1
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4403      	add	r3, r0
 8003114:	3358      	adds	r3, #88	; 0x58
 8003116:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	440b      	add	r3, r1
 8003126:	3358      	adds	r3, #88	; 0x58
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b03      	cmp	r3, #3
 800312c:	d914      	bls.n	8003158 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	440b      	add	r3, r1
 800313c:	3358      	adds	r3, #88	; 0x58
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	440b      	add	r3, r1
 8003150:	335c      	adds	r3, #92	; 0x5c
 8003152:	2204      	movs	r2, #4
 8003154:	701a      	strb	r2, [r3, #0]
 8003156:	e009      	b.n	800316c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	440b      	add	r3, r1
 8003166:	335c      	adds	r3, #92	; 0x5c
 8003168:	2202      	movs	r2, #2
 800316a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4413      	add	r3, r2
 8003174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003182:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800318a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4413      	add	r3, r2
 8003194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003198:	461a      	mov	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031aa:	461a      	mov	r2, r3
 80031ac:	2302      	movs	r3, #2
 80031ae:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	b2d8      	uxtb	r0, r3
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	440b      	add	r3, r1
 80031c2:	335c      	adds	r3, #92	; 0x5c
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	4601      	mov	r1, r0
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f006 f9b4 	bl	8009538 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80031d0:	bf00      	nop
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08a      	sub	sp, #40	; 0x28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f003 030f 	and.w	r3, r3, #15
 80031f8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	0c5b      	lsrs	r3, r3, #17
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	091b      	lsrs	r3, r3, #4
 8003208:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800320c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2b02      	cmp	r3, #2
 8003212:	d003      	beq.n	800321c <HCD_RXQLVL_IRQHandler+0x44>
 8003214:	2b05      	cmp	r3, #5
 8003216:	f000 8082 	beq.w	800331e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800321a:	e083      	b.n	8003324 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d07f      	beq.n	8003322 <HCD_RXQLVL_IRQHandler+0x14a>
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	440b      	add	r3, r1
 8003230:	3344      	adds	r3, #68	; 0x44
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d074      	beq.n	8003322 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	440b      	add	r3, r1
 800324a:	3344      	adds	r3, #68	; 0x44
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	b292      	uxth	r2, r2
 8003252:	4619      	mov	r1, r3
 8003254:	f002 fe6b 	bl	8005f2e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	440b      	add	r3, r1
 8003266:	3344      	adds	r3, #68	; 0x44
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	18d1      	adds	r1, r2, r3
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4403      	add	r3, r0
 800327c:	3344      	adds	r3, #68	; 0x44
 800327e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	440b      	add	r3, r1
 800328e:	334c      	adds	r3, #76	; 0x4c
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	18d1      	adds	r1, r2, r3
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4613      	mov	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4403      	add	r3, r0
 80032a4:	334c      	adds	r3, #76	; 0x4c
 80032a6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	4b1d      	ldr	r3, [pc, #116]	; (800332c <HCD_RXQLVL_IRQHandler+0x154>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d031      	beq.n	8003322 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	015a      	lsls	r2, r3, #5
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032d4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032dc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	015a      	lsls	r2, r3, #5
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ea:	461a      	mov	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	440b      	add	r3, r1
 80032fe:	3350      	adds	r3, #80	; 0x50
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	f083 0301 	eor.w	r3, r3, #1
 8003306:	b2d8      	uxtb	r0, r3
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	440b      	add	r3, r1
 8003316:	3350      	adds	r3, #80	; 0x50
 8003318:	4602      	mov	r2, r0
 800331a:	701a      	strb	r2, [r3, #0]
      break;
 800331c:	e001      	b.n	8003322 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800331e:	bf00      	nop
 8003320:	e000      	b.n	8003324 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003322:	bf00      	nop
  }
}
 8003324:	bf00      	nop
 8003326:	3728      	adds	r7, #40	; 0x28
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	1ff80000 	.word	0x1ff80000

08003330 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800335c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b02      	cmp	r3, #2
 8003366:	d113      	bne.n	8003390 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b01      	cmp	r3, #1
 8003370:	d10a      	bne.n	8003388 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	699a      	ldr	r2, [r3, #24]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003380:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f006 f8bc 	bl	8009500 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f043 0302 	orr.w	r3, r3, #2
 800338e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b08      	cmp	r3, #8
 8003398:	d147      	bne.n	800342a <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	f043 0308 	orr.w	r3, r3, #8
 80033a0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d129      	bne.n	8003400 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d113      	bne.n	80033dc <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80033ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033be:	d106      	bne.n	80033ce <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2102      	movs	r1, #2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f002 feec 	bl	80061a4 <USB_InitFSLSPClkSel>
 80033cc:	e011      	b.n	80033f2 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2101      	movs	r1, #1
 80033d4:	4618      	mov	r0, r3
 80033d6:	f002 fee5 	bl	80061a4 <USB_InitFSLSPClkSel>
 80033da:	e00a      	b.n	80033f2 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d106      	bne.n	80033f2 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033ea:	461a      	mov	r2, r3
 80033ec:	f64e 2360 	movw	r3, #60000	; 0xea60
 80033f0:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f006 f8ae 	bl	8009554 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f006 f881 	bl	8009500 <HAL_HCD_Connect_Callback>
 80033fe:	e014      	b.n	800342a <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f006 f8b5 	bl	8009570 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003414:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003418:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699a      	ldr	r2, [r3, #24]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003428:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b20      	cmp	r3, #32
 8003432:	d103      	bne.n	800343c <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f043 0320 	orr.w	r3, r3, #32
 800343a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003442:	461a      	mov	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	6013      	str	r3, [r2, #0]
}
 8003448:	bf00      	nop
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e10f      	b.n	8003682 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f005 fd3e 	bl	8008ef8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2224      	movs	r2, #36	; 0x24
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0201 	bic.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003494:	f001 f9ac 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8003498:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	4a7b      	ldr	r2, [pc, #492]	; (800368c <HAL_I2C_Init+0x23c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d807      	bhi.n	80034b4 <HAL_I2C_Init+0x64>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4a7a      	ldr	r2, [pc, #488]	; (8003690 <HAL_I2C_Init+0x240>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	bf94      	ite	ls
 80034ac:	2301      	movls	r3, #1
 80034ae:	2300      	movhi	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	e006      	b.n	80034c2 <HAL_I2C_Init+0x72>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4a77      	ldr	r2, [pc, #476]	; (8003694 <HAL_I2C_Init+0x244>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	bf94      	ite	ls
 80034bc:	2301      	movls	r3, #1
 80034be:	2300      	movhi	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e0db      	b.n	8003682 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4a72      	ldr	r2, [pc, #456]	; (8003698 <HAL_I2C_Init+0x248>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	0c9b      	lsrs	r3, r3, #18
 80034d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	4a64      	ldr	r2, [pc, #400]	; (800368c <HAL_I2C_Init+0x23c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d802      	bhi.n	8003504 <HAL_I2C_Init+0xb4>
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	3301      	adds	r3, #1
 8003502:	e009      	b.n	8003518 <HAL_I2C_Init+0xc8>
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800350a:	fb02 f303 	mul.w	r3, r2, r3
 800350e:	4a63      	ldr	r2, [pc, #396]	; (800369c <HAL_I2C_Init+0x24c>)
 8003510:	fba2 2303 	umull	r2, r3, r2, r3
 8003514:	099b      	lsrs	r3, r3, #6
 8003516:	3301      	adds	r3, #1
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6812      	ldr	r2, [r2, #0]
 800351c:	430b      	orrs	r3, r1
 800351e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800352a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	4956      	ldr	r1, [pc, #344]	; (800368c <HAL_I2C_Init+0x23c>)
 8003534:	428b      	cmp	r3, r1
 8003536:	d80d      	bhi.n	8003554 <HAL_I2C_Init+0x104>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	1e59      	subs	r1, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	fbb1 f3f3 	udiv	r3, r1, r3
 8003546:	3301      	adds	r3, #1
 8003548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800354c:	2b04      	cmp	r3, #4
 800354e:	bf38      	it	cc
 8003550:	2304      	movcc	r3, #4
 8003552:	e04f      	b.n	80035f4 <HAL_I2C_Init+0x1a4>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d111      	bne.n	8003580 <HAL_I2C_Init+0x130>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	1e58      	subs	r0, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6859      	ldr	r1, [r3, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	440b      	add	r3, r1
 800356a:	fbb0 f3f3 	udiv	r3, r0, r3
 800356e:	3301      	adds	r3, #1
 8003570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf0c      	ite	eq
 8003578:	2301      	moveq	r3, #1
 800357a:	2300      	movne	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	e012      	b.n	80035a6 <HAL_I2C_Init+0x156>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	1e58      	subs	r0, r3, #1
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6859      	ldr	r1, [r3, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	0099      	lsls	r1, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	fbb0 f3f3 	udiv	r3, r0, r3
 8003596:	3301      	adds	r3, #1
 8003598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800359c:	2b00      	cmp	r3, #0
 800359e:	bf0c      	ite	eq
 80035a0:	2301      	moveq	r3, #1
 80035a2:	2300      	movne	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_I2C_Init+0x15e>
 80035aa:	2301      	movs	r3, #1
 80035ac:	e022      	b.n	80035f4 <HAL_I2C_Init+0x1a4>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10e      	bne.n	80035d4 <HAL_I2C_Init+0x184>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1e58      	subs	r0, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6859      	ldr	r1, [r3, #4]
 80035be:	460b      	mov	r3, r1
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	440b      	add	r3, r1
 80035c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c8:	3301      	adds	r3, #1
 80035ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035d2:	e00f      	b.n	80035f4 <HAL_I2C_Init+0x1a4>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	1e58      	subs	r0, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	0099      	lsls	r1, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ea:	3301      	adds	r3, #1
 80035ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	6809      	ldr	r1, [r1, #0]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69da      	ldr	r2, [r3, #28]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003622:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6911      	ldr	r1, [r2, #16]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	68d2      	ldr	r2, [r2, #12]
 800362e:	4311      	orrs	r1, r2
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	430b      	orrs	r3, r1
 8003636:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695a      	ldr	r2, [r3, #20]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0201 	orr.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	000186a0 	.word	0x000186a0
 8003690:	001e847f 	.word	0x001e847f
 8003694:	003d08ff 	.word	0x003d08ff
 8003698:	431bde83 	.word	0x431bde83
 800369c:	10624dd3 	.word	0x10624dd3

080036a0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e128      	b.n	8003904 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d109      	bne.n	80036d2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a90      	ldr	r2, [pc, #576]	; (800390c <HAL_I2S_Init+0x26c>)
 80036ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f005 fc5b 	bl	8008f88 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2202      	movs	r2, #2
 80036d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80036e8:	f023 030f 	bic.w	r3, r3, #15
 80036ec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2202      	movs	r2, #2
 80036f4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d060      	beq.n	80037c0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d102      	bne.n	800370c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003706:	2310      	movs	r3, #16
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	e001      	b.n	8003710 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800370c:	2320      	movs	r3, #32
 800370e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	2b20      	cmp	r3, #32
 8003716:	d802      	bhi.n	800371e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800371e:	2001      	movs	r0, #1
 8003720:	f001 f970 	bl	8004a04 <HAL_RCCEx_GetPeriphCLKFreq>
 8003724:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800372e:	d125      	bne.n	800377c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d010      	beq.n	800375a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	461a      	mov	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	fbb2 f3f3 	udiv	r3, r2, r3
 8003754:	3305      	adds	r3, #5
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	e01f      	b.n	800379a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	fbb2 f2f3 	udiv	r2, r2, r3
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	461a      	mov	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	fbb2 f3f3 	udiv	r3, r2, r3
 8003776:	3305      	adds	r3, #5
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	e00e      	b.n	800379a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	fbb2 f2f3 	udiv	r2, r2, r3
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	461a      	mov	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	fbb2 f3f3 	udiv	r3, r2, r3
 8003796:	3305      	adds	r3, #5
 8003798:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4a5c      	ldr	r2, [pc, #368]	; (8003910 <HAL_I2S_Init+0x270>)
 800379e:	fba2 2303 	umull	r2, r3, r2, r3
 80037a2:	08db      	lsrs	r3, r3, #3
 80037a4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	085b      	lsrs	r3, r3, #1
 80037b6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	021b      	lsls	r3, r3, #8
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	e003      	b.n	80037c8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80037c0:	2302      	movs	r3, #2
 80037c2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d902      	bls.n	80037d4 <HAL_I2S_Init+0x134>
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	2bff      	cmp	r3, #255	; 0xff
 80037d2:	d907      	bls.n	80037e4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d8:	f043 0210 	orr.w	r2, r3, #16
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e08f      	b.n	8003904 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	ea42 0103 	orr.w	r1, r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69fa      	ldr	r2, [r7, #28]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003802:	f023 030f 	bic.w	r3, r3, #15
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6851      	ldr	r1, [r2, #4]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6892      	ldr	r2, [r2, #8]
 800380e:	4311      	orrs	r1, r2
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	68d2      	ldr	r2, [r2, #12]
 8003814:	4311      	orrs	r1, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6992      	ldr	r2, [r2, #24]
 800381a:	430a      	orrs	r2, r1
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003826:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d161      	bne.n	80038f4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a38      	ldr	r2, [pc, #224]	; (8003914 <HAL_I2S_Init+0x274>)
 8003834:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a37      	ldr	r2, [pc, #220]	; (8003918 <HAL_I2S_Init+0x278>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d101      	bne.n	8003844 <HAL_I2S_Init+0x1a4>
 8003840:	4b36      	ldr	r3, [pc, #216]	; (800391c <HAL_I2S_Init+0x27c>)
 8003842:	e001      	b.n	8003848 <HAL_I2S_Init+0x1a8>
 8003844:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6812      	ldr	r2, [r2, #0]
 800384e:	4932      	ldr	r1, [pc, #200]	; (8003918 <HAL_I2S_Init+0x278>)
 8003850:	428a      	cmp	r2, r1
 8003852:	d101      	bne.n	8003858 <HAL_I2S_Init+0x1b8>
 8003854:	4a31      	ldr	r2, [pc, #196]	; (800391c <HAL_I2S_Init+0x27c>)
 8003856:	e001      	b.n	800385c <HAL_I2S_Init+0x1bc>
 8003858:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800385c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003860:	f023 030f 	bic.w	r3, r3, #15
 8003864:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a2b      	ldr	r2, [pc, #172]	; (8003918 <HAL_I2S_Init+0x278>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d101      	bne.n	8003874 <HAL_I2S_Init+0x1d4>
 8003870:	4b2a      	ldr	r3, [pc, #168]	; (800391c <HAL_I2S_Init+0x27c>)
 8003872:	e001      	b.n	8003878 <HAL_I2S_Init+0x1d8>
 8003874:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003878:	2202      	movs	r2, #2
 800387a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a25      	ldr	r2, [pc, #148]	; (8003918 <HAL_I2S_Init+0x278>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d101      	bne.n	800388a <HAL_I2S_Init+0x1ea>
 8003886:	4b25      	ldr	r3, [pc, #148]	; (800391c <HAL_I2S_Init+0x27c>)
 8003888:	e001      	b.n	800388e <HAL_I2S_Init+0x1ee>
 800388a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800389a:	d003      	beq.n	80038a4 <HAL_I2S_Init+0x204>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d103      	bne.n	80038ac <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80038a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	e001      	b.n	80038b0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80038ac:	2300      	movs	r3, #0
 80038ae:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	b299      	uxth	r1, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80038c6:	4303      	orrs	r3, r0
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	430b      	orrs	r3, r1
 80038cc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80038ce:	4313      	orrs	r3, r2
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	897b      	ldrh	r3, [r7, #10]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038dc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a0d      	ldr	r2, [pc, #52]	; (8003918 <HAL_I2S_Init+0x278>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d101      	bne.n	80038ec <HAL_I2S_Init+0x24c>
 80038e8:	4b0c      	ldr	r3, [pc, #48]	; (800391c <HAL_I2S_Init+0x27c>)
 80038ea:	e001      	b.n	80038f0 <HAL_I2S_Init+0x250>
 80038ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038f0:	897a      	ldrh	r2, [r7, #10]
 80038f2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3720      	adds	r7, #32
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	08003a17 	.word	0x08003a17
 8003910:	cccccccd 	.word	0xcccccccd
 8003914:	08003b2d 	.word	0x08003b2d
 8003918:	40003800 	.word	0x40003800
 800391c:	40003400 	.word	0x40003400

08003920 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	881a      	ldrh	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	1c9a      	adds	r2, r3, #2
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10e      	bne.n	80039b0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039a0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff ffb8 	bl	8003920 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80039b0:	bf00      	nop
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	b292      	uxth	r2, r2
 80039cc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	1c9a      	adds	r2, r3, #2
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10e      	bne.n	8003a0e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039fe:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff ff93 	bl	8003934 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b086      	sub	sp, #24
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d13a      	bne.n	8003aa8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d109      	bne.n	8003a50 <I2S_IRQHandler+0x3a>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a46:	2b40      	cmp	r3, #64	; 0x40
 8003a48:	d102      	bne.n	8003a50 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff ffb4 	bl	80039b8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a56:	2b40      	cmp	r3, #64	; 0x40
 8003a58:	d126      	bne.n	8003aa8 <I2S_IRQHandler+0x92>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d11f      	bne.n	8003aa8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a76:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a78:	2300      	movs	r3, #0
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	f043 0202 	orr.w	r2, r3, #2
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff ff50 	bl	8003948 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d136      	bne.n	8003b22 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d109      	bne.n	8003ad2 <I2S_IRQHandler+0xbc>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac8:	2b80      	cmp	r3, #128	; 0x80
 8003aca:	d102      	bne.n	8003ad2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff ff45 	bl	800395c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d122      	bne.n	8003b22 <I2S_IRQHandler+0x10c>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	2b20      	cmp	r3, #32
 8003ae8:	d11b      	bne.n	8003b22 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003af8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b14:	f043 0204 	orr.w	r2, r3, #4
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff ff13 	bl	8003948 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b22:	bf00      	nop
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4aa2      	ldr	r2, [pc, #648]	; (8003dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d101      	bne.n	8003b4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003b46:	4ba2      	ldr	r3, [pc, #648]	; (8003dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b48:	e001      	b.n	8003b4e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003b4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a9b      	ldr	r2, [pc, #620]	; (8003dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d101      	bne.n	8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003b64:	4b9a      	ldr	r3, [pc, #616]	; (8003dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b66:	e001      	b.n	8003b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003b68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b78:	d004      	beq.n	8003b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f040 8099 	bne.w	8003cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d107      	bne.n	8003b9e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f925 	bl	8003de8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d107      	bne.n	8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f9c8 	bl	8003f48 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b40      	cmp	r3, #64	; 0x40
 8003bc0:	d13a      	bne.n	8003c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d035      	beq.n	8003c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a7e      	ldr	r2, [pc, #504]	; (8003dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d101      	bne.n	8003bda <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003bd6:	4b7e      	ldr	r3, [pc, #504]	; (8003dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003bd8:	e001      	b.n	8003bde <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003bda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4979      	ldr	r1, [pc, #484]	; (8003dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003be6:	428b      	cmp	r3, r1
 8003be8:	d101      	bne.n	8003bee <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003bea:	4b79      	ldr	r3, [pc, #484]	; (8003dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003bec:	e001      	b.n	8003bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003bee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bf2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bf6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c06:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2a:	f043 0202 	orr.w	r2, r3, #2
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff fe88 	bl	8003948 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b08      	cmp	r3, #8
 8003c40:	f040 80be 	bne.w	8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 80b8 	beq.w	8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c5e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a59      	ldr	r2, [pc, #356]	; (8003dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d101      	bne.n	8003c6e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003c6a:	4b59      	ldr	r3, [pc, #356]	; (8003dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c6c:	e001      	b.n	8003c72 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003c6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4954      	ldr	r1, [pc, #336]	; (8003dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c7a:	428b      	cmp	r3, r1
 8003c7c:	d101      	bne.n	8003c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003c7e:	4b54      	ldr	r3, [pc, #336]	; (8003dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c80:	e001      	b.n	8003c86 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003c82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c8a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60bb      	str	r3, [r7, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	60bb      	str	r3, [r7, #8]
 8003c98:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	f043 0204 	orr.w	r2, r3, #4
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff fe4a 	bl	8003948 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cb4:	e084      	b.n	8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d107      	bne.n	8003cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f8be 	bl	8003e4c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d107      	bne.n	8003cea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f8fd 	bl	8003ee4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf0:	2b40      	cmp	r3, #64	; 0x40
 8003cf2:	d12f      	bne.n	8003d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d02a      	beq.n	8003d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d0c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a2e      	ldr	r2, [pc, #184]	; (8003dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d101      	bne.n	8003d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003d18:	4b2d      	ldr	r3, [pc, #180]	; (8003dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d1a:	e001      	b.n	8003d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003d1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4929      	ldr	r1, [pc, #164]	; (8003dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d28:	428b      	cmp	r3, r1
 8003d2a:	d101      	bne.n	8003d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003d2c:	4b28      	ldr	r3, [pc, #160]	; (8003dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d2e:	e001      	b.n	8003d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003d30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d38:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	f043 0202 	orr.w	r2, r3, #2
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7ff fdfa 	bl	8003948 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d131      	bne.n	8003dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f003 0320 	and.w	r3, r3, #32
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d02c      	beq.n	8003dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a17      	ldr	r2, [pc, #92]	; (8003dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d101      	bne.n	8003d76 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003d72:	4b17      	ldr	r3, [pc, #92]	; (8003dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d74:	e001      	b.n	8003d7a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003d76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4912      	ldr	r1, [pc, #72]	; (8003dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d82:	428b      	cmp	r3, r1
 8003d84:	d101      	bne.n	8003d8a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003d86:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d88:	e001      	b.n	8003d8e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003d8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d8e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d92:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003da2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db0:	f043 0204 	orr.w	r2, r3, #4
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff fdc5 	bl	8003948 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dbe:	e000      	b.n	8003dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003dc0:	bf00      	nop
}
 8003dc2:	bf00      	nop
 8003dc4:	3720      	adds	r7, #32
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40003800 	.word	0x40003800
 8003dd0:	40003400 	.word	0x40003400

08003dd4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	1c99      	adds	r1, r3, #2
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6251      	str	r1, [r2, #36]	; 0x24
 8003dfa:	881a      	ldrh	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d113      	bne.n	8003e42 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e28:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d106      	bne.n	8003e42 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ffc9 	bl	8003dd4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	1c99      	adds	r1, r3, #2
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6251      	str	r1, [r2, #36]	; 0x24
 8003e5e:	8819      	ldrh	r1, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1d      	ldr	r2, [pc, #116]	; (8003edc <I2SEx_TxISR_I2SExt+0x90>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d101      	bne.n	8003e6e <I2SEx_TxISR_I2SExt+0x22>
 8003e6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <I2SEx_TxISR_I2SExt+0x94>)
 8003e6c:	e001      	b.n	8003e72 <I2SEx_TxISR_I2SExt+0x26>
 8003e6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e72:	460a      	mov	r2, r1
 8003e74:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d121      	bne.n	8003ed2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a12      	ldr	r2, [pc, #72]	; (8003edc <I2SEx_TxISR_I2SExt+0x90>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d101      	bne.n	8003e9c <I2SEx_TxISR_I2SExt+0x50>
 8003e98:	4b11      	ldr	r3, [pc, #68]	; (8003ee0 <I2SEx_TxISR_I2SExt+0x94>)
 8003e9a:	e001      	b.n	8003ea0 <I2SEx_TxISR_I2SExt+0x54>
 8003e9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	490d      	ldr	r1, [pc, #52]	; (8003edc <I2SEx_TxISR_I2SExt+0x90>)
 8003ea8:	428b      	cmp	r3, r1
 8003eaa:	d101      	bne.n	8003eb0 <I2SEx_TxISR_I2SExt+0x64>
 8003eac:	4b0c      	ldr	r3, [pc, #48]	; (8003ee0 <I2SEx_TxISR_I2SExt+0x94>)
 8003eae:	e001      	b.n	8003eb4 <I2SEx_TxISR_I2SExt+0x68>
 8003eb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eb4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003eb8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d106      	bne.n	8003ed2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff ff81 	bl	8003dd4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ed2:	bf00      	nop
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40003800 	.word	0x40003800
 8003ee0:	40003400 	.word	0x40003400

08003ee4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68d8      	ldr	r0, [r3, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef6:	1c99      	adds	r1, r3, #2
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003efc:	b282      	uxth	r2, r0
 8003efe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d113      	bne.n	8003f40 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f26:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff ff4a 	bl	8003dd4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a20      	ldr	r2, [pc, #128]	; (8003fd8 <I2SEx_RxISR_I2SExt+0x90>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d101      	bne.n	8003f5e <I2SEx_RxISR_I2SExt+0x16>
 8003f5a:	4b20      	ldr	r3, [pc, #128]	; (8003fdc <I2SEx_RxISR_I2SExt+0x94>)
 8003f5c:	e001      	b.n	8003f62 <I2SEx_RxISR_I2SExt+0x1a>
 8003f5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f62:	68d8      	ldr	r0, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	1c99      	adds	r1, r3, #2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f6e:	b282      	uxth	r2, r0
 8003f70:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d121      	bne.n	8003fce <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a12      	ldr	r2, [pc, #72]	; (8003fd8 <I2SEx_RxISR_I2SExt+0x90>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d101      	bne.n	8003f98 <I2SEx_RxISR_I2SExt+0x50>
 8003f94:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <I2SEx_RxISR_I2SExt+0x94>)
 8003f96:	e001      	b.n	8003f9c <I2SEx_RxISR_I2SExt+0x54>
 8003f98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	490d      	ldr	r1, [pc, #52]	; (8003fd8 <I2SEx_RxISR_I2SExt+0x90>)
 8003fa4:	428b      	cmp	r3, r1
 8003fa6:	d101      	bne.n	8003fac <I2SEx_RxISR_I2SExt+0x64>
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <I2SEx_RxISR_I2SExt+0x94>)
 8003faa:	e001      	b.n	8003fb0 <I2SEx_RxISR_I2SExt+0x68>
 8003fac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fb0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fb4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d106      	bne.n	8003fce <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff ff03 	bl	8003dd4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40003800 	.word	0x40003800
 8003fdc:	40003400 	.word	0x40003400

08003fe0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e22d      	b.n	800444e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d075      	beq.n	80040ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ffe:	4ba3      	ldr	r3, [pc, #652]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 030c 	and.w	r3, r3, #12
 8004006:	2b04      	cmp	r3, #4
 8004008:	d00c      	beq.n	8004024 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800400a:	4ba0      	ldr	r3, [pc, #640]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004012:	2b08      	cmp	r3, #8
 8004014:	d112      	bne.n	800403c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004016:	4b9d      	ldr	r3, [pc, #628]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800401e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004022:	d10b      	bne.n	800403c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004024:	4b99      	ldr	r3, [pc, #612]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d05b      	beq.n	80040e8 <HAL_RCC_OscConfig+0x108>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d157      	bne.n	80040e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e208      	b.n	800444e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004044:	d106      	bne.n	8004054 <HAL_RCC_OscConfig+0x74>
 8004046:	4b91      	ldr	r3, [pc, #580]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a90      	ldr	r2, [pc, #576]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 800404c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	e01d      	b.n	8004090 <HAL_RCC_OscConfig+0xb0>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800405c:	d10c      	bne.n	8004078 <HAL_RCC_OscConfig+0x98>
 800405e:	4b8b      	ldr	r3, [pc, #556]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a8a      	ldr	r2, [pc, #552]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 8004064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	4b88      	ldr	r3, [pc, #544]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a87      	ldr	r2, [pc, #540]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 8004070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	e00b      	b.n	8004090 <HAL_RCC_OscConfig+0xb0>
 8004078:	4b84      	ldr	r3, [pc, #528]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a83      	ldr	r2, [pc, #524]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 800407e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	4b81      	ldr	r3, [pc, #516]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a80      	ldr	r2, [pc, #512]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 800408a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800408e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d013      	beq.n	80040c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004098:	f7fc fec6 	bl	8000e28 <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040a0:	f7fc fec2 	bl	8000e28 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b64      	cmp	r3, #100	; 0x64
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e1cd      	b.n	800444e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b2:	4b76      	ldr	r3, [pc, #472]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0f0      	beq.n	80040a0 <HAL_RCC_OscConfig+0xc0>
 80040be:	e014      	b.n	80040ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c0:	f7fc feb2 	bl	8000e28 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040c8:	f7fc feae 	bl	8000e28 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b64      	cmp	r3, #100	; 0x64
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e1b9      	b.n	800444e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040da:	4b6c      	ldr	r3, [pc, #432]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0xe8>
 80040e6:	e000      	b.n	80040ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d063      	beq.n	80041be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040f6:	4b65      	ldr	r3, [pc, #404]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 030c 	and.w	r3, r3, #12
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00b      	beq.n	800411a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004102:	4b62      	ldr	r3, [pc, #392]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800410a:	2b08      	cmp	r3, #8
 800410c:	d11c      	bne.n	8004148 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800410e:	4b5f      	ldr	r3, [pc, #380]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d116      	bne.n	8004148 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800411a:	4b5c      	ldr	r3, [pc, #368]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <HAL_RCC_OscConfig+0x152>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d001      	beq.n	8004132 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e18d      	b.n	800444e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004132:	4b56      	ldr	r3, [pc, #344]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	4952      	ldr	r1, [pc, #328]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 8004142:	4313      	orrs	r3, r2
 8004144:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004146:	e03a      	b.n	80041be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d020      	beq.n	8004192 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004150:	4b4f      	ldr	r3, [pc, #316]	; (8004290 <HAL_RCC_OscConfig+0x2b0>)
 8004152:	2201      	movs	r2, #1
 8004154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004156:	f7fc fe67 	bl	8000e28 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800415e:	f7fc fe63 	bl	8000e28 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e16e      	b.n	800444e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004170:	4b46      	ldr	r3, [pc, #280]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0f0      	beq.n	800415e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800417c:	4b43      	ldr	r3, [pc, #268]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	4940      	ldr	r1, [pc, #256]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 800418c:	4313      	orrs	r3, r2
 800418e:	600b      	str	r3, [r1, #0]
 8004190:	e015      	b.n	80041be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004192:	4b3f      	ldr	r3, [pc, #252]	; (8004290 <HAL_RCC_OscConfig+0x2b0>)
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004198:	f7fc fe46 	bl	8000e28 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041a0:	f7fc fe42 	bl	8000e28 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e14d      	b.n	800444e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041b2:	4b36      	ldr	r3, [pc, #216]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1f0      	bne.n	80041a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d030      	beq.n	800422c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d016      	beq.n	8004200 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041d2:	4b30      	ldr	r3, [pc, #192]	; (8004294 <HAL_RCC_OscConfig+0x2b4>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d8:	f7fc fe26 	bl	8000e28 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041e0:	f7fc fe22 	bl	8000e28 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e12d      	b.n	800444e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041f2:	4b26      	ldr	r3, [pc, #152]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0f0      	beq.n	80041e0 <HAL_RCC_OscConfig+0x200>
 80041fe:	e015      	b.n	800422c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004200:	4b24      	ldr	r3, [pc, #144]	; (8004294 <HAL_RCC_OscConfig+0x2b4>)
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004206:	f7fc fe0f 	bl	8000e28 <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800420e:	f7fc fe0b 	bl	8000e28 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e116      	b.n	800444e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004220:	4b1a      	ldr	r3, [pc, #104]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 8004222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1f0      	bne.n	800420e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 80a0 	beq.w	800437a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800423a:	2300      	movs	r3, #0
 800423c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800423e:	4b13      	ldr	r3, [pc, #76]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10f      	bne.n	800426a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	4b0f      	ldr	r3, [pc, #60]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	4a0e      	ldr	r2, [pc, #56]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 8004254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004258:	6413      	str	r3, [r2, #64]	; 0x40
 800425a:	4b0c      	ldr	r3, [pc, #48]	; (800428c <HAL_RCC_OscConfig+0x2ac>)
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004266:	2301      	movs	r3, #1
 8004268:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426a:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <HAL_RCC_OscConfig+0x2b8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004272:	2b00      	cmp	r3, #0
 8004274:	d121      	bne.n	80042ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004276:	4b08      	ldr	r3, [pc, #32]	; (8004298 <HAL_RCC_OscConfig+0x2b8>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a07      	ldr	r2, [pc, #28]	; (8004298 <HAL_RCC_OscConfig+0x2b8>)
 800427c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004282:	f7fc fdd1 	bl	8000e28 <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004288:	e011      	b.n	80042ae <HAL_RCC_OscConfig+0x2ce>
 800428a:	bf00      	nop
 800428c:	40023800 	.word	0x40023800
 8004290:	42470000 	.word	0x42470000
 8004294:	42470e80 	.word	0x42470e80
 8004298:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800429c:	f7fc fdc4 	bl	8000e28 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e0cf      	b.n	800444e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ae:	4b6a      	ldr	r3, [pc, #424]	; (8004458 <HAL_RCC_OscConfig+0x478>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0f0      	beq.n	800429c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d106      	bne.n	80042d0 <HAL_RCC_OscConfig+0x2f0>
 80042c2:	4b66      	ldr	r3, [pc, #408]	; (800445c <HAL_RCC_OscConfig+0x47c>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c6:	4a65      	ldr	r2, [pc, #404]	; (800445c <HAL_RCC_OscConfig+0x47c>)
 80042c8:	f043 0301 	orr.w	r3, r3, #1
 80042cc:	6713      	str	r3, [r2, #112]	; 0x70
 80042ce:	e01c      	b.n	800430a <HAL_RCC_OscConfig+0x32a>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2b05      	cmp	r3, #5
 80042d6:	d10c      	bne.n	80042f2 <HAL_RCC_OscConfig+0x312>
 80042d8:	4b60      	ldr	r3, [pc, #384]	; (800445c <HAL_RCC_OscConfig+0x47c>)
 80042da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042dc:	4a5f      	ldr	r2, [pc, #380]	; (800445c <HAL_RCC_OscConfig+0x47c>)
 80042de:	f043 0304 	orr.w	r3, r3, #4
 80042e2:	6713      	str	r3, [r2, #112]	; 0x70
 80042e4:	4b5d      	ldr	r3, [pc, #372]	; (800445c <HAL_RCC_OscConfig+0x47c>)
 80042e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e8:	4a5c      	ldr	r2, [pc, #368]	; (800445c <HAL_RCC_OscConfig+0x47c>)
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	6713      	str	r3, [r2, #112]	; 0x70
 80042f0:	e00b      	b.n	800430a <HAL_RCC_OscConfig+0x32a>
 80042f2:	4b5a      	ldr	r3, [pc, #360]	; (800445c <HAL_RCC_OscConfig+0x47c>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	4a59      	ldr	r2, [pc, #356]	; (800445c <HAL_RCC_OscConfig+0x47c>)
 80042f8:	f023 0301 	bic.w	r3, r3, #1
 80042fc:	6713      	str	r3, [r2, #112]	; 0x70
 80042fe:	4b57      	ldr	r3, [pc, #348]	; (800445c <HAL_RCC_OscConfig+0x47c>)
 8004300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004302:	4a56      	ldr	r2, [pc, #344]	; (800445c <HAL_RCC_OscConfig+0x47c>)
 8004304:	f023 0304 	bic.w	r3, r3, #4
 8004308:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d015      	beq.n	800433e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004312:	f7fc fd89 	bl	8000e28 <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004318:	e00a      	b.n	8004330 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800431a:	f7fc fd85 	bl	8000e28 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	f241 3288 	movw	r2, #5000	; 0x1388
 8004328:	4293      	cmp	r3, r2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e08e      	b.n	800444e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004330:	4b4a      	ldr	r3, [pc, #296]	; (800445c <HAL_RCC_OscConfig+0x47c>)
 8004332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0ee      	beq.n	800431a <HAL_RCC_OscConfig+0x33a>
 800433c:	e014      	b.n	8004368 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800433e:	f7fc fd73 	bl	8000e28 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004344:	e00a      	b.n	800435c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004346:	f7fc fd6f 	bl	8000e28 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	f241 3288 	movw	r2, #5000	; 0x1388
 8004354:	4293      	cmp	r3, r2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e078      	b.n	800444e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800435c:	4b3f      	ldr	r3, [pc, #252]	; (800445c <HAL_RCC_OscConfig+0x47c>)
 800435e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1ee      	bne.n	8004346 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004368:	7dfb      	ldrb	r3, [r7, #23]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d105      	bne.n	800437a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800436e:	4b3b      	ldr	r3, [pc, #236]	; (800445c <HAL_RCC_OscConfig+0x47c>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	4a3a      	ldr	r2, [pc, #232]	; (800445c <HAL_RCC_OscConfig+0x47c>)
 8004374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004378:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d064      	beq.n	800444c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004382:	4b36      	ldr	r3, [pc, #216]	; (800445c <HAL_RCC_OscConfig+0x47c>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 030c 	and.w	r3, r3, #12
 800438a:	2b08      	cmp	r3, #8
 800438c:	d05c      	beq.n	8004448 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	2b02      	cmp	r3, #2
 8004394:	d141      	bne.n	800441a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004396:	4b32      	ldr	r3, [pc, #200]	; (8004460 <HAL_RCC_OscConfig+0x480>)
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439c:	f7fc fd44 	bl	8000e28 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a4:	f7fc fd40 	bl	8000e28 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e04b      	b.n	800444e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b6:	4b29      	ldr	r3, [pc, #164]	; (800445c <HAL_RCC_OscConfig+0x47c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69da      	ldr	r2, [r3, #28]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	019b      	lsls	r3, r3, #6
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	085b      	lsrs	r3, r3, #1
 80043da:	3b01      	subs	r3, #1
 80043dc:	041b      	lsls	r3, r3, #16
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	061b      	lsls	r3, r3, #24
 80043e6:	491d      	ldr	r1, [pc, #116]	; (800445c <HAL_RCC_OscConfig+0x47c>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043ec:	4b1c      	ldr	r3, [pc, #112]	; (8004460 <HAL_RCC_OscConfig+0x480>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f2:	f7fc fd19 	bl	8000e28 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043fa:	f7fc fd15 	bl	8000e28 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e020      	b.n	800444e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800440c:	4b13      	ldr	r3, [pc, #76]	; (800445c <HAL_RCC_OscConfig+0x47c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0f0      	beq.n	80043fa <HAL_RCC_OscConfig+0x41a>
 8004418:	e018      	b.n	800444c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800441a:	4b11      	ldr	r3, [pc, #68]	; (8004460 <HAL_RCC_OscConfig+0x480>)
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004420:	f7fc fd02 	bl	8000e28 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004428:	f7fc fcfe 	bl	8000e28 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e009      	b.n	800444e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443a:	4b08      	ldr	r3, [pc, #32]	; (800445c <HAL_RCC_OscConfig+0x47c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x448>
 8004446:	e001      	b.n	800444c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40007000 	.word	0x40007000
 800445c:	40023800 	.word	0x40023800
 8004460:	42470060 	.word	0x42470060

08004464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e0ca      	b.n	800460e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004478:	4b67      	ldr	r3, [pc, #412]	; (8004618 <HAL_RCC_ClockConfig+0x1b4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 030f 	and.w	r3, r3, #15
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d90c      	bls.n	80044a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004486:	4b64      	ldr	r3, [pc, #400]	; (8004618 <HAL_RCC_ClockConfig+0x1b4>)
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800448e:	4b62      	ldr	r3, [pc, #392]	; (8004618 <HAL_RCC_ClockConfig+0x1b4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	429a      	cmp	r2, r3
 800449a:	d001      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e0b6      	b.n	800460e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d020      	beq.n	80044ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044b8:	4b58      	ldr	r3, [pc, #352]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	4a57      	ldr	r2, [pc, #348]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 80044be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d005      	beq.n	80044dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044d0:	4b52      	ldr	r3, [pc, #328]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	4a51      	ldr	r2, [pc, #324]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 80044d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044dc:	4b4f      	ldr	r3, [pc, #316]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	494c      	ldr	r1, [pc, #304]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d044      	beq.n	8004584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d107      	bne.n	8004512 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004502:	4b46      	ldr	r3, [pc, #280]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d119      	bne.n	8004542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e07d      	b.n	800460e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2b02      	cmp	r3, #2
 8004518:	d003      	beq.n	8004522 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800451e:	2b03      	cmp	r3, #3
 8004520:	d107      	bne.n	8004532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004522:	4b3e      	ldr	r3, [pc, #248]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d109      	bne.n	8004542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e06d      	b.n	800460e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004532:	4b3a      	ldr	r3, [pc, #232]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e065      	b.n	800460e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004542:	4b36      	ldr	r3, [pc, #216]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f023 0203 	bic.w	r2, r3, #3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	4933      	ldr	r1, [pc, #204]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 8004550:	4313      	orrs	r3, r2
 8004552:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004554:	f7fc fc68 	bl	8000e28 <HAL_GetTick>
 8004558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455a:	e00a      	b.n	8004572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800455c:	f7fc fc64 	bl	8000e28 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	f241 3288 	movw	r2, #5000	; 0x1388
 800456a:	4293      	cmp	r3, r2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e04d      	b.n	800460e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004572:	4b2a      	ldr	r3, [pc, #168]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 020c 	and.w	r2, r3, #12
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	429a      	cmp	r2, r3
 8004582:	d1eb      	bne.n	800455c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004584:	4b24      	ldr	r3, [pc, #144]	; (8004618 <HAL_RCC_ClockConfig+0x1b4>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 030f 	and.w	r3, r3, #15
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d20c      	bcs.n	80045ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004592:	4b21      	ldr	r3, [pc, #132]	; (8004618 <HAL_RCC_ClockConfig+0x1b4>)
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800459a:	4b1f      	ldr	r3, [pc, #124]	; (8004618 <HAL_RCC_ClockConfig+0x1b4>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e030      	b.n	800460e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d008      	beq.n	80045ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b8:	4b18      	ldr	r3, [pc, #96]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	4915      	ldr	r1, [pc, #84]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d009      	beq.n	80045ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045d6:	4b11      	ldr	r3, [pc, #68]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	490d      	ldr	r1, [pc, #52]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045ea:	f000 f81d 	bl	8004628 <HAL_RCC_GetSysClockFreq>
 80045ee:	4601      	mov	r1, r0
 80045f0:	4b0a      	ldr	r3, [pc, #40]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	091b      	lsrs	r3, r3, #4
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	4a09      	ldr	r2, [pc, #36]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 80045fc:	5cd3      	ldrb	r3, [r2, r3]
 80045fe:	fa21 f303 	lsr.w	r3, r1, r3
 8004602:	4a08      	ldr	r2, [pc, #32]	; (8004624 <HAL_RCC_ClockConfig+0x1c0>)
 8004604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8004606:	2000      	movs	r0, #0
 8004608:	f7fc fbca 	bl	8000da0 <HAL_InitTick>

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40023c00 	.word	0x40023c00
 800461c:	40023800 	.word	0x40023800
 8004620:	0800a27c 	.word	0x0800a27c
 8004624:	20000028 	.word	0x20000028

08004628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800462e:	2300      	movs	r3, #0
 8004630:	607b      	str	r3, [r7, #4]
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	2300      	movs	r3, #0
 8004638:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800463e:	4b63      	ldr	r3, [pc, #396]	; (80047cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 030c 	and.w	r3, r3, #12
 8004646:	2b04      	cmp	r3, #4
 8004648:	d007      	beq.n	800465a <HAL_RCC_GetSysClockFreq+0x32>
 800464a:	2b08      	cmp	r3, #8
 800464c:	d008      	beq.n	8004660 <HAL_RCC_GetSysClockFreq+0x38>
 800464e:	2b00      	cmp	r3, #0
 8004650:	f040 80b4 	bne.w	80047bc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004654:	4b5e      	ldr	r3, [pc, #376]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004656:	60bb      	str	r3, [r7, #8]
       break;
 8004658:	e0b3      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800465a:	4b5e      	ldr	r3, [pc, #376]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800465c:	60bb      	str	r3, [r7, #8]
      break;
 800465e:	e0b0      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004660:	4b5a      	ldr	r3, [pc, #360]	; (80047cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004668:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800466a:	4b58      	ldr	r3, [pc, #352]	; (80047cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d04a      	beq.n	800470c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004676:	4b55      	ldr	r3, [pc, #340]	; (80047cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	099b      	lsrs	r3, r3, #6
 800467c:	f04f 0400 	mov.w	r4, #0
 8004680:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	ea03 0501 	and.w	r5, r3, r1
 800468c:	ea04 0602 	and.w	r6, r4, r2
 8004690:	4629      	mov	r1, r5
 8004692:	4632      	mov	r2, r6
 8004694:	f04f 0300 	mov.w	r3, #0
 8004698:	f04f 0400 	mov.w	r4, #0
 800469c:	0154      	lsls	r4, r2, #5
 800469e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80046a2:	014b      	lsls	r3, r1, #5
 80046a4:	4619      	mov	r1, r3
 80046a6:	4622      	mov	r2, r4
 80046a8:	1b49      	subs	r1, r1, r5
 80046aa:	eb62 0206 	sbc.w	r2, r2, r6
 80046ae:	f04f 0300 	mov.w	r3, #0
 80046b2:	f04f 0400 	mov.w	r4, #0
 80046b6:	0194      	lsls	r4, r2, #6
 80046b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80046bc:	018b      	lsls	r3, r1, #6
 80046be:	1a5b      	subs	r3, r3, r1
 80046c0:	eb64 0402 	sbc.w	r4, r4, r2
 80046c4:	f04f 0100 	mov.w	r1, #0
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	00e2      	lsls	r2, r4, #3
 80046ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046d2:	00d9      	lsls	r1, r3, #3
 80046d4:	460b      	mov	r3, r1
 80046d6:	4614      	mov	r4, r2
 80046d8:	195b      	adds	r3, r3, r5
 80046da:	eb44 0406 	adc.w	r4, r4, r6
 80046de:	f04f 0100 	mov.w	r1, #0
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	0262      	lsls	r2, r4, #9
 80046e8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80046ec:	0259      	lsls	r1, r3, #9
 80046ee:	460b      	mov	r3, r1
 80046f0:	4614      	mov	r4, r2
 80046f2:	4618      	mov	r0, r3
 80046f4:	4621      	mov	r1, r4
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f04f 0400 	mov.w	r4, #0
 80046fc:	461a      	mov	r2, r3
 80046fe:	4623      	mov	r3, r4
 8004700:	f7fc f9ac 	bl	8000a5c <__aeabi_uldivmod>
 8004704:	4603      	mov	r3, r0
 8004706:	460c      	mov	r4, r1
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	e049      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800470c:	4b2f      	ldr	r3, [pc, #188]	; (80047cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	099b      	lsrs	r3, r3, #6
 8004712:	f04f 0400 	mov.w	r4, #0
 8004716:	f240 11ff 	movw	r1, #511	; 0x1ff
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	ea03 0501 	and.w	r5, r3, r1
 8004722:	ea04 0602 	and.w	r6, r4, r2
 8004726:	4629      	mov	r1, r5
 8004728:	4632      	mov	r2, r6
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	f04f 0400 	mov.w	r4, #0
 8004732:	0154      	lsls	r4, r2, #5
 8004734:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004738:	014b      	lsls	r3, r1, #5
 800473a:	4619      	mov	r1, r3
 800473c:	4622      	mov	r2, r4
 800473e:	1b49      	subs	r1, r1, r5
 8004740:	eb62 0206 	sbc.w	r2, r2, r6
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	f04f 0400 	mov.w	r4, #0
 800474c:	0194      	lsls	r4, r2, #6
 800474e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004752:	018b      	lsls	r3, r1, #6
 8004754:	1a5b      	subs	r3, r3, r1
 8004756:	eb64 0402 	sbc.w	r4, r4, r2
 800475a:	f04f 0100 	mov.w	r1, #0
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	00e2      	lsls	r2, r4, #3
 8004764:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004768:	00d9      	lsls	r1, r3, #3
 800476a:	460b      	mov	r3, r1
 800476c:	4614      	mov	r4, r2
 800476e:	195b      	adds	r3, r3, r5
 8004770:	eb44 0406 	adc.w	r4, r4, r6
 8004774:	f04f 0100 	mov.w	r1, #0
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	02a2      	lsls	r2, r4, #10
 800477e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004782:	0299      	lsls	r1, r3, #10
 8004784:	460b      	mov	r3, r1
 8004786:	4614      	mov	r4, r2
 8004788:	4618      	mov	r0, r3
 800478a:	4621      	mov	r1, r4
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f04f 0400 	mov.w	r4, #0
 8004792:	461a      	mov	r2, r3
 8004794:	4623      	mov	r3, r4
 8004796:	f7fc f961 	bl	8000a5c <__aeabi_uldivmod>
 800479a:	4603      	mov	r3, r0
 800479c:	460c      	mov	r4, r1
 800479e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047a0:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	0c1b      	lsrs	r3, r3, #16
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	3301      	adds	r3, #1
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b8:	60bb      	str	r3, [r7, #8]
      break;
 80047ba:	e002      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047bc:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80047be:	60bb      	str	r3, [r7, #8]
      break;
 80047c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047c2:	68bb      	ldr	r3, [r7, #8]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047cc:	40023800 	.word	0x40023800
 80047d0:	00f42400 	.word	0x00f42400
 80047d4:	007a1200 	.word	0x007a1200

080047d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047dc:	4b03      	ldr	r3, [pc, #12]	; (80047ec <HAL_RCC_GetHCLKFreq+0x14>)
 80047de:	681b      	ldr	r3, [r3, #0]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	20000028 	.word	0x20000028

080047f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047f4:	f7ff fff0 	bl	80047d8 <HAL_RCC_GetHCLKFreq>
 80047f8:	4601      	mov	r1, r0
 80047fa:	4b05      	ldr	r3, [pc, #20]	; (8004810 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	0a9b      	lsrs	r3, r3, #10
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	4a03      	ldr	r2, [pc, #12]	; (8004814 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004806:	5cd3      	ldrb	r3, [r2, r3]
 8004808:	fa21 f303 	lsr.w	r3, r1, r3
}
 800480c:	4618      	mov	r0, r3
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40023800 	.word	0x40023800
 8004814:	0800a28c 	.word	0x0800a28c

08004818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800481c:	f7ff ffdc 	bl	80047d8 <HAL_RCC_GetHCLKFreq>
 8004820:	4601      	mov	r1, r0
 8004822:	4b05      	ldr	r3, [pc, #20]	; (8004838 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	0b5b      	lsrs	r3, r3, #13
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	4a03      	ldr	r2, [pc, #12]	; (800483c <HAL_RCC_GetPCLK2Freq+0x24>)
 800482e:	5cd3      	ldrb	r3, [r2, r3]
 8004830:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004834:	4618      	mov	r0, r3
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40023800 	.word	0x40023800
 800483c:	0800a28c 	.word	0x0800a28c

08004840 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d105      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004864:	2b00      	cmp	r3, #0
 8004866:	d035      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004868:	4b62      	ldr	r3, [pc, #392]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800486e:	f7fc fadb 	bl	8000e28 <HAL_GetTick>
 8004872:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004874:	e008      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004876:	f7fc fad7 	bl	8000e28 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e0b0      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004888:	4b5b      	ldr	r3, [pc, #364]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f0      	bne.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	019a      	lsls	r2, r3, #6
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	071b      	lsls	r3, r3, #28
 80048a0:	4955      	ldr	r1, [pc, #340]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048a8:	4b52      	ldr	r3, [pc, #328]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80048aa:	2201      	movs	r2, #1
 80048ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048ae:	f7fc fabb 	bl	8000e28 <HAL_GetTick>
 80048b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048b4:	e008      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048b6:	f7fc fab7 	bl	8000e28 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e090      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048c8:	4b4b      	ldr	r3, [pc, #300]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0f0      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 8083 	beq.w	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	4b44      	ldr	r3, [pc, #272]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	4a43      	ldr	r2, [pc, #268]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f0:	6413      	str	r3, [r2, #64]	; 0x40
 80048f2:	4b41      	ldr	r3, [pc, #260]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80048fe:	4b3f      	ldr	r3, [pc, #252]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a3e      	ldr	r2, [pc, #248]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004908:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800490a:	f7fc fa8d 	bl	8000e28 <HAL_GetTick>
 800490e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004910:	e008      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004912:	f7fc fa89 	bl	8000e28 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d901      	bls.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e062      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004924:	4b35      	ldr	r3, [pc, #212]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0f0      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004930:	4b31      	ldr	r3, [pc, #196]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004938:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d02f      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	429a      	cmp	r2, r3
 800494c:	d028      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800494e:	4b2a      	ldr	r3, [pc, #168]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004956:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004958:	4b29      	ldr	r3, [pc, #164]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800495a:	2201      	movs	r2, #1
 800495c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800495e:	4b28      	ldr	r3, [pc, #160]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004964:	4a24      	ldr	r2, [pc, #144]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800496a:	4b23      	ldr	r3, [pc, #140]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b01      	cmp	r3, #1
 8004974:	d114      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004976:	f7fc fa57 	bl	8000e28 <HAL_GetTick>
 800497a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800497c:	e00a      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800497e:	f7fc fa53 	bl	8000e28 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	f241 3288 	movw	r2, #5000	; 0x1388
 800498c:	4293      	cmp	r3, r2
 800498e:	d901      	bls.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e02a      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004994:	4b18      	ldr	r3, [pc, #96]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0ee      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049ac:	d10d      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80049ae:	4b12      	ldr	r3, [pc, #72]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80049be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c2:	490d      	ldr	r1, [pc, #52]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	608b      	str	r3, [r1, #8]
 80049c8:	e005      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80049ca:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	4a0a      	ldr	r2, [pc, #40]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049d0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80049d4:	6093      	str	r3, [r2, #8]
 80049d6:	4b08      	ldr	r3, [pc, #32]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e2:	4905      	ldr	r1, [pc, #20]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	42470068 	.word	0x42470068
 80049f8:	40023800 	.word	0x40023800
 80049fc:	40007000 	.word	0x40007000
 8004a00:	42470e40 	.word	0x42470e40

08004a04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d13d      	bne.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004a22:	4b22      	ldr	r3, [pc, #136]	; (8004aac <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a2a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d004      	beq.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d12f      	bne.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a36:	4b1e      	ldr	r3, [pc, #120]	; (8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a38:	617b      	str	r3, [r7, #20]
          break;
 8004a3a:	e02f      	b.n	8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004a3c:	4b1b      	ldr	r3, [pc, #108]	; (8004aac <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a48:	d108      	bne.n	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a4a:	4b18      	ldr	r3, [pc, #96]	; (8004aac <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a52:	4a18      	ldr	r2, [pc, #96]	; (8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	e007      	b.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a5c:	4b13      	ldr	r3, [pc, #76]	; (8004aac <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a64:	4a14      	ldr	r2, [pc, #80]	; (8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004a6c:	4b0f      	ldr	r3, [pc, #60]	; (8004aac <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a72:	099b      	lsrs	r3, r3, #6
 8004a74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	fb02 f303 	mul.w	r3, r2, r3
 8004a7e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004a80:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a86:	0f1b      	lsrs	r3, r3, #28
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a92:	617b      	str	r3, [r7, #20]
          break;
 8004a94:	e002      	b.n	8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
          break;
 8004a9a:	bf00      	nop
        }
      }
      break;
 8004a9c:	bf00      	nop
    }
  }
  return frequency;
 8004a9e:	697b      	ldr	r3, [r7, #20]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	40023800 	.word	0x40023800
 8004ab0:	00bb8000 	.word	0x00bb8000
 8004ab4:	007a1200 	.word	0x007a1200
 8004ab8:	00f42400 	.word	0x00f42400

08004abc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e056      	b.n	8004b7c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d106      	bne.n	8004aee <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f004 fab5 	bl	8009058 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2202      	movs	r2, #2
 8004af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b04:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	431a      	orrs	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	ea42 0103 	orr.w	r1, r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	0c1b      	lsrs	r3, r3, #16
 8004b4c:	f003 0104 	and.w	r1, r3, #4
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	69da      	ldr	r2, [r3, #28]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b6a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e01d      	b.n	8004bd2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f004 fa9c 	bl	80090e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	f000 f9fa 	bl	8004fbc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b082      	sub	sp, #8
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e01d      	b.n	8004c28 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d106      	bne.n	8004c06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f815 	bl	8004c30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2202      	movs	r2, #2
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3304      	adds	r3, #4
 8004c16:	4619      	mov	r1, r3
 8004c18:	4610      	mov	r0, r2
 8004c1a:	f000 f9cf 	bl	8004fbc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2201      	movs	r2, #1
 8004c54:	6839      	ldr	r1, [r7, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fc9a 	bl	8005590 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a15      	ldr	r2, [pc, #84]	; (8004cb8 <HAL_TIM_PWM_Start+0x74>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d004      	beq.n	8004c70 <HAL_TIM_PWM_Start+0x2c>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a14      	ldr	r2, [pc, #80]	; (8004cbc <HAL_TIM_PWM_Start+0x78>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d101      	bne.n	8004c74 <HAL_TIM_PWM_Start+0x30>
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <HAL_TIM_PWM_Start+0x32>
 8004c74:	2300      	movs	r3, #0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d007      	beq.n	8004c8a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b06      	cmp	r3, #6
 8004c9a:	d007      	beq.n	8004cac <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40010000 	.word	0x40010000
 8004cbc:	40010400 	.word	0x40010400

08004cc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d101      	bne.n	8004cda <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	e0b4      	b.n	8004e44 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b0c      	cmp	r3, #12
 8004cee:	f200 809f 	bhi.w	8004e30 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004cf2:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf8:	08004d2d 	.word	0x08004d2d
 8004cfc:	08004e31 	.word	0x08004e31
 8004d00:	08004e31 	.word	0x08004e31
 8004d04:	08004e31 	.word	0x08004e31
 8004d08:	08004d6d 	.word	0x08004d6d
 8004d0c:	08004e31 	.word	0x08004e31
 8004d10:	08004e31 	.word	0x08004e31
 8004d14:	08004e31 	.word	0x08004e31
 8004d18:	08004daf 	.word	0x08004daf
 8004d1c:	08004e31 	.word	0x08004e31
 8004d20:	08004e31 	.word	0x08004e31
 8004d24:	08004e31 	.word	0x08004e31
 8004d28:	08004def 	.word	0x08004def
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 f9e2 	bl	80050fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0208 	orr.w	r2, r2, #8
 8004d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0204 	bic.w	r2, r2, #4
 8004d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6999      	ldr	r1, [r3, #24]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	691a      	ldr	r2, [r3, #16]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	619a      	str	r2, [r3, #24]
      break;
 8004d6a:	e062      	b.n	8004e32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 fa32 	bl	80051dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699a      	ldr	r2, [r3, #24]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699a      	ldr	r2, [r3, #24]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6999      	ldr	r1, [r3, #24]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	021a      	lsls	r2, r3, #8
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	619a      	str	r2, [r3, #24]
      break;
 8004dac:	e041      	b.n	8004e32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fa87 	bl	80052c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	69da      	ldr	r2, [r3, #28]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0208 	orr.w	r2, r2, #8
 8004dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0204 	bic.w	r2, r2, #4
 8004dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69d9      	ldr	r1, [r3, #28]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	691a      	ldr	r2, [r3, #16]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	61da      	str	r2, [r3, #28]
      break;
 8004dec:	e021      	b.n	8004e32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 fadb 	bl	80053b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69da      	ldr	r2, [r3, #28]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69da      	ldr	r2, [r3, #28]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69d9      	ldr	r1, [r3, #28]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	021a      	lsls	r2, r3, #8
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	61da      	str	r2, [r3, #28]
      break;
 8004e2e:	e000      	b.n	8004e32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004e30:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d101      	bne.n	8004e64 <HAL_TIM_ConfigClockSource+0x18>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e0a6      	b.n	8004fb2 <HAL_TIM_ConfigClockSource+0x166>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b40      	cmp	r3, #64	; 0x40
 8004e9a:	d067      	beq.n	8004f6c <HAL_TIM_ConfigClockSource+0x120>
 8004e9c:	2b40      	cmp	r3, #64	; 0x40
 8004e9e:	d80b      	bhi.n	8004eb8 <HAL_TIM_ConfigClockSource+0x6c>
 8004ea0:	2b10      	cmp	r3, #16
 8004ea2:	d073      	beq.n	8004f8c <HAL_TIM_ConfigClockSource+0x140>
 8004ea4:	2b10      	cmp	r3, #16
 8004ea6:	d802      	bhi.n	8004eae <HAL_TIM_ConfigClockSource+0x62>
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d06f      	beq.n	8004f8c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004eac:	e078      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	d06c      	beq.n	8004f8c <HAL_TIM_ConfigClockSource+0x140>
 8004eb2:	2b30      	cmp	r3, #48	; 0x30
 8004eb4:	d06a      	beq.n	8004f8c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004eb6:	e073      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004eb8:	2b70      	cmp	r3, #112	; 0x70
 8004eba:	d00d      	beq.n	8004ed8 <HAL_TIM_ConfigClockSource+0x8c>
 8004ebc:	2b70      	cmp	r3, #112	; 0x70
 8004ebe:	d804      	bhi.n	8004eca <HAL_TIM_ConfigClockSource+0x7e>
 8004ec0:	2b50      	cmp	r3, #80	; 0x50
 8004ec2:	d033      	beq.n	8004f2c <HAL_TIM_ConfigClockSource+0xe0>
 8004ec4:	2b60      	cmp	r3, #96	; 0x60
 8004ec6:	d041      	beq.n	8004f4c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004ec8:	e06a      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ece:	d066      	beq.n	8004f9e <HAL_TIM_ConfigClockSource+0x152>
 8004ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed4:	d017      	beq.n	8004f06 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004ed6:	e063      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6818      	ldr	r0, [r3, #0]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	6899      	ldr	r1, [r3, #8]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f000 fb32 	bl	8005550 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004efa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	609a      	str	r2, [r3, #8]
      break;
 8004f04:	e04c      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6818      	ldr	r0, [r3, #0]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	6899      	ldr	r1, [r3, #8]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f000 fb1b 	bl	8005550 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f28:	609a      	str	r2, [r3, #8]
      break;
 8004f2a:	e039      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6818      	ldr	r0, [r3, #0]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	6859      	ldr	r1, [r3, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	f000 fa8f 	bl	800545c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2150      	movs	r1, #80	; 0x50
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fae8 	bl	800551a <TIM_ITRx_SetConfig>
      break;
 8004f4a:	e029      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6818      	ldr	r0, [r3, #0]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	6859      	ldr	r1, [r3, #4]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	f000 faae 	bl	80054ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2160      	movs	r1, #96	; 0x60
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fad8 	bl	800551a <TIM_ITRx_SetConfig>
      break;
 8004f6a:	e019      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6818      	ldr	r0, [r3, #0]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	6859      	ldr	r1, [r3, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	f000 fa6f 	bl	800545c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2140      	movs	r1, #64	; 0x40
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 fac8 	bl	800551a <TIM_ITRx_SetConfig>
      break;
 8004f8a:	e009      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4619      	mov	r1, r3
 8004f96:	4610      	mov	r0, r2
 8004f98:	f000 fabf 	bl	800551a <TIM_ITRx_SetConfig>
      break;
 8004f9c:	e000      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004f9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a40      	ldr	r2, [pc, #256]	; (80050d0 <TIM_Base_SetConfig+0x114>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d013      	beq.n	8004ffc <TIM_Base_SetConfig+0x40>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fda:	d00f      	beq.n	8004ffc <TIM_Base_SetConfig+0x40>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a3d      	ldr	r2, [pc, #244]	; (80050d4 <TIM_Base_SetConfig+0x118>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00b      	beq.n	8004ffc <TIM_Base_SetConfig+0x40>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a3c      	ldr	r2, [pc, #240]	; (80050d8 <TIM_Base_SetConfig+0x11c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d007      	beq.n	8004ffc <TIM_Base_SetConfig+0x40>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a3b      	ldr	r2, [pc, #236]	; (80050dc <TIM_Base_SetConfig+0x120>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d003      	beq.n	8004ffc <TIM_Base_SetConfig+0x40>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a3a      	ldr	r2, [pc, #232]	; (80050e0 <TIM_Base_SetConfig+0x124>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d108      	bne.n	800500e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a2f      	ldr	r2, [pc, #188]	; (80050d0 <TIM_Base_SetConfig+0x114>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d02b      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501c:	d027      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2c      	ldr	r2, [pc, #176]	; (80050d4 <TIM_Base_SetConfig+0x118>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d023      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a2b      	ldr	r2, [pc, #172]	; (80050d8 <TIM_Base_SetConfig+0x11c>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d01f      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a2a      	ldr	r2, [pc, #168]	; (80050dc <TIM_Base_SetConfig+0x120>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d01b      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a29      	ldr	r2, [pc, #164]	; (80050e0 <TIM_Base_SetConfig+0x124>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d017      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a28      	ldr	r2, [pc, #160]	; (80050e4 <TIM_Base_SetConfig+0x128>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d013      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a27      	ldr	r2, [pc, #156]	; (80050e8 <TIM_Base_SetConfig+0x12c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00f      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a26      	ldr	r2, [pc, #152]	; (80050ec <TIM_Base_SetConfig+0x130>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00b      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a25      	ldr	r2, [pc, #148]	; (80050f0 <TIM_Base_SetConfig+0x134>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d007      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a24      	ldr	r2, [pc, #144]	; (80050f4 <TIM_Base_SetConfig+0x138>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d003      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a23      	ldr	r2, [pc, #140]	; (80050f8 <TIM_Base_SetConfig+0x13c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d108      	bne.n	8005080 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a0a      	ldr	r2, [pc, #40]	; (80050d0 <TIM_Base_SetConfig+0x114>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d003      	beq.n	80050b4 <TIM_Base_SetConfig+0xf8>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a0c      	ldr	r2, [pc, #48]	; (80050e0 <TIM_Base_SetConfig+0x124>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d103      	bne.n	80050bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	615a      	str	r2, [r3, #20]
}
 80050c2:	bf00      	nop
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40010000 	.word	0x40010000
 80050d4:	40000400 	.word	0x40000400
 80050d8:	40000800 	.word	0x40000800
 80050dc:	40000c00 	.word	0x40000c00
 80050e0:	40010400 	.word	0x40010400
 80050e4:	40014000 	.word	0x40014000
 80050e8:	40014400 	.word	0x40014400
 80050ec:	40014800 	.word	0x40014800
 80050f0:	40001800 	.word	0x40001800
 80050f4:	40001c00 	.word	0x40001c00
 80050f8:	40002000 	.word	0x40002000

080050fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	f023 0201 	bic.w	r2, r3, #1
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0303 	bic.w	r3, r3, #3
 8005132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f023 0302 	bic.w	r3, r3, #2
 8005144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a20      	ldr	r2, [pc, #128]	; (80051d4 <TIM_OC1_SetConfig+0xd8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d003      	beq.n	8005160 <TIM_OC1_SetConfig+0x64>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a1f      	ldr	r2, [pc, #124]	; (80051d8 <TIM_OC1_SetConfig+0xdc>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d10c      	bne.n	800517a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f023 0308 	bic.w	r3, r3, #8
 8005166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	4313      	orrs	r3, r2
 8005170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f023 0304 	bic.w	r3, r3, #4
 8005178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a15      	ldr	r2, [pc, #84]	; (80051d4 <TIM_OC1_SetConfig+0xd8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d003      	beq.n	800518a <TIM_OC1_SetConfig+0x8e>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a14      	ldr	r2, [pc, #80]	; (80051d8 <TIM_OC1_SetConfig+0xdc>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d111      	bne.n	80051ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005190:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005198:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	621a      	str	r2, [r3, #32]
}
 80051c8:	bf00      	nop
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	40010000 	.word	0x40010000
 80051d8:	40010400 	.word	0x40010400

080051dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	f023 0210 	bic.w	r2, r3, #16
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f023 0320 	bic.w	r3, r3, #32
 8005226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a22      	ldr	r2, [pc, #136]	; (80052c0 <TIM_OC2_SetConfig+0xe4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d003      	beq.n	8005244 <TIM_OC2_SetConfig+0x68>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a21      	ldr	r2, [pc, #132]	; (80052c4 <TIM_OC2_SetConfig+0xe8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d10d      	bne.n	8005260 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800524a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	011b      	lsls	r3, r3, #4
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	4313      	orrs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800525e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a17      	ldr	r2, [pc, #92]	; (80052c0 <TIM_OC2_SetConfig+0xe4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d003      	beq.n	8005270 <TIM_OC2_SetConfig+0x94>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a16      	ldr	r2, [pc, #88]	; (80052c4 <TIM_OC2_SetConfig+0xe8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d113      	bne.n	8005298 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005276:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800527e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	621a      	str	r2, [r3, #32]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40010000 	.word	0x40010000
 80052c4:	40010400 	.word	0x40010400

080052c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0303 	bic.w	r3, r3, #3
 80052fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	021b      	lsls	r3, r3, #8
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	4313      	orrs	r3, r2
 800531c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a21      	ldr	r2, [pc, #132]	; (80053a8 <TIM_OC3_SetConfig+0xe0>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d003      	beq.n	800532e <TIM_OC3_SetConfig+0x66>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a20      	ldr	r2, [pc, #128]	; (80053ac <TIM_OC3_SetConfig+0xe4>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d10d      	bne.n	800534a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005334:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a16      	ldr	r2, [pc, #88]	; (80053a8 <TIM_OC3_SetConfig+0xe0>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d003      	beq.n	800535a <TIM_OC3_SetConfig+0x92>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a15      	ldr	r2, [pc, #84]	; (80053ac <TIM_OC3_SetConfig+0xe4>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d113      	bne.n	8005382 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4313      	orrs	r3, r2
 8005374:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	621a      	str	r2, [r3, #32]
}
 800539c:	bf00      	nop
 800539e:	371c      	adds	r7, #28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	40010000 	.word	0x40010000
 80053ac:	40010400 	.word	0x40010400

080053b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	021b      	lsls	r3, r3, #8
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	031b      	lsls	r3, r3, #12
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a12      	ldr	r2, [pc, #72]	; (8005454 <TIM_OC4_SetConfig+0xa4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d003      	beq.n	8005418 <TIM_OC4_SetConfig+0x68>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a11      	ldr	r2, [pc, #68]	; (8005458 <TIM_OC4_SetConfig+0xa8>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d109      	bne.n	800542c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800541e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	019b      	lsls	r3, r3, #6
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	4313      	orrs	r3, r2
 800542a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	621a      	str	r2, [r3, #32]
}
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40010000 	.word	0x40010000
 8005458:	40010400 	.word	0x40010400

0800545c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	f023 0201 	bic.w	r2, r3, #1
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	011b      	lsls	r3, r3, #4
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	4313      	orrs	r3, r2
 8005490:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f023 030a 	bic.w	r3, r3, #10
 8005498:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4313      	orrs	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	621a      	str	r2, [r3, #32]
}
 80054ae:	bf00      	nop
 80054b0:	371c      	adds	r7, #28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b087      	sub	sp, #28
 80054be:	af00      	add	r7, sp, #0
 80054c0:	60f8      	str	r0, [r7, #12]
 80054c2:	60b9      	str	r1, [r7, #8]
 80054c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	f023 0210 	bic.w	r2, r3, #16
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	031b      	lsls	r3, r3, #12
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4313      	orrs	r3, r2
 8005500:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	621a      	str	r2, [r3, #32]
}
 800550e:	bf00      	nop
 8005510:	371c      	adds	r7, #28
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800551a:	b480      	push	{r7}
 800551c:	b085      	sub	sp, #20
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005530:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4313      	orrs	r3, r2
 8005538:	f043 0307 	orr.w	r3, r3, #7
 800553c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	609a      	str	r2, [r3, #8]
}
 8005544:	bf00      	nop
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800556a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	021a      	lsls	r2, r3, #8
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	431a      	orrs	r2, r3
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4313      	orrs	r3, r2
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	4313      	orrs	r3, r2
 800557c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	609a      	str	r2, [r3, #8]
}
 8005584:	bf00      	nop
 8005586:	371c      	adds	r7, #28
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f003 031f 	and.w	r3, r3, #31
 80055a2:	2201      	movs	r2, #1
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a1a      	ldr	r2, [r3, #32]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	43db      	mvns	r3, r3
 80055b2:	401a      	ands	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6a1a      	ldr	r2, [r3, #32]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f003 031f 	and.w	r3, r3, #31
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	fa01 f303 	lsl.w	r3, r1, r3
 80055c8:	431a      	orrs	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	621a      	str	r2, [r3, #32]
}
 80055ce:	bf00      	nop
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055da:	b480      	push	{r7}
 80055dc:	b085      	sub	sp, #20
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d101      	bne.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055ee:	2302      	movs	r3, #2
 80055f0:	e032      	b.n	8005658 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2202      	movs	r2, #2
 80055fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005618:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4313      	orrs	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800562a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	4313      	orrs	r3, r2
 8005634:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e03f      	b.n	80056f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f003 fd88 	bl	80091a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2224      	movs	r2, #36	; 0x24
 8005694:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f90b 	bl	80058c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	691a      	ldr	r2, [r3, #16]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	695a      	ldr	r2, [r3, #20]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68da      	ldr	r2, [r3, #12]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b088      	sub	sp, #32
 8005702:	af02      	add	r7, sp, #8
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	603b      	str	r3, [r7, #0]
 800570a:	4613      	mov	r3, r2
 800570c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b20      	cmp	r3, #32
 800571c:	f040 8083 	bne.w	8005826 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <HAL_UART_Transmit+0x2e>
 8005726:	88fb      	ldrh	r3, [r7, #6]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e07b      	b.n	8005828 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005736:	2b01      	cmp	r3, #1
 8005738:	d101      	bne.n	800573e <HAL_UART_Transmit+0x40>
 800573a:	2302      	movs	r3, #2
 800573c:	e074      	b.n	8005828 <HAL_UART_Transmit+0x12a>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2221      	movs	r2, #33	; 0x21
 8005750:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005754:	f7fb fb68 	bl	8000e28 <HAL_GetTick>
 8005758:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	88fa      	ldrh	r2, [r7, #6]
 800575e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	88fa      	ldrh	r2, [r7, #6]
 8005764:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005766:	e042      	b.n	80057ee <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800576c:	b29b      	uxth	r3, r3
 800576e:	3b01      	subs	r3, #1
 8005770:	b29a      	uxth	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800577e:	d122      	bne.n	80057c6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	2200      	movs	r2, #0
 8005788:	2180      	movs	r1, #128	; 0x80
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f000 f850 	bl	8005830 <UART_WaitOnFlagUntilTimeout>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e046      	b.n	8005828 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057ac:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d103      	bne.n	80057be <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	3302      	adds	r3, #2
 80057ba:	60bb      	str	r3, [r7, #8]
 80057bc:	e017      	b.n	80057ee <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	3301      	adds	r3, #1
 80057c2:	60bb      	str	r3, [r7, #8]
 80057c4:	e013      	b.n	80057ee <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2200      	movs	r2, #0
 80057ce:	2180      	movs	r1, #128	; 0x80
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 f82d 	bl	8005830 <UART_WaitOnFlagUntilTimeout>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d001      	beq.n	80057e0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e023      	b.n	8005828 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	60ba      	str	r2, [r7, #8]
 80057e6:	781a      	ldrb	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1b7      	bne.n	8005768 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	2200      	movs	r2, #0
 8005800:	2140      	movs	r1, #64	; 0x40
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 f814 	bl	8005830 <UART_WaitOnFlagUntilTimeout>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e00a      	b.n	8005828 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2220      	movs	r2, #32
 8005816:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	e000      	b.n	8005828 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005826:	2302      	movs	r3, #2
  }
}
 8005828:	4618      	mov	r0, r3
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	4613      	mov	r3, r2
 800583e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005840:	e02c      	b.n	800589c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005848:	d028      	beq.n	800589c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d007      	beq.n	8005860 <UART_WaitOnFlagUntilTimeout+0x30>
 8005850:	f7fb faea 	bl	8000e28 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	429a      	cmp	r2, r3
 800585e:	d21d      	bcs.n	800589c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800586e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695a      	ldr	r2, [r3, #20]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0201 	bic.w	r2, r2, #1
 800587e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2220      	movs	r2, #32
 8005884:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e00f      	b.n	80058bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	4013      	ands	r3, r2
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	bf0c      	ite	eq
 80058ac:	2301      	moveq	r3, #1
 80058ae:	2300      	movne	r3, #0
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	461a      	mov	r2, r3
 80058b4:	79fb      	ldrb	r3, [r7, #7]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d0c3      	beq.n	8005842 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058c4:	b5b0      	push	{r4, r5, r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	431a      	orrs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005904:	f023 030c 	bic.w	r3, r3, #12
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6812      	ldr	r2, [r2, #0]
 800590c:	68f9      	ldr	r1, [r7, #12]
 800590e:	430b      	orrs	r3, r1
 8005910:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	699a      	ldr	r2, [r3, #24]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	430a      	orrs	r2, r1
 8005926:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005930:	f040 80e4 	bne.w	8005afc <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4aab      	ldr	r2, [pc, #684]	; (8005be8 <UART_SetConfig+0x324>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d004      	beq.n	8005948 <UART_SetConfig+0x84>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4aaa      	ldr	r2, [pc, #680]	; (8005bec <UART_SetConfig+0x328>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d16c      	bne.n	8005a22 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005948:	f7fe ff66 	bl	8004818 <HAL_RCC_GetPCLK2Freq>
 800594c:	4602      	mov	r2, r0
 800594e:	4613      	mov	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	009a      	lsls	r2, r3, #2
 8005956:	441a      	add	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005962:	4aa3      	ldr	r2, [pc, #652]	; (8005bf0 <UART_SetConfig+0x32c>)
 8005964:	fba2 2303 	umull	r2, r3, r2, r3
 8005968:	095b      	lsrs	r3, r3, #5
 800596a:	011c      	lsls	r4, r3, #4
 800596c:	f7fe ff54 	bl	8004818 <HAL_RCC_GetPCLK2Freq>
 8005970:	4602      	mov	r2, r0
 8005972:	4613      	mov	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4413      	add	r3, r2
 8005978:	009a      	lsls	r2, r3, #2
 800597a:	441a      	add	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	fbb2 f5f3 	udiv	r5, r2, r3
 8005986:	f7fe ff47 	bl	8004818 <HAL_RCC_GetPCLK2Freq>
 800598a:	4602      	mov	r2, r0
 800598c:	4613      	mov	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	009a      	lsls	r2, r3, #2
 8005994:	441a      	add	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a0:	4a93      	ldr	r2, [pc, #588]	; (8005bf0 <UART_SetConfig+0x32c>)
 80059a2:	fba2 2303 	umull	r2, r3, r2, r3
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	2264      	movs	r2, #100	; 0x64
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	1aeb      	subs	r3, r5, r3
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	3332      	adds	r3, #50	; 0x32
 80059b4:	4a8e      	ldr	r2, [pc, #568]	; (8005bf0 <UART_SetConfig+0x32c>)
 80059b6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ba:	095b      	lsrs	r3, r3, #5
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059c2:	441c      	add	r4, r3
 80059c4:	f7fe ff28 	bl	8004818 <HAL_RCC_GetPCLK2Freq>
 80059c8:	4602      	mov	r2, r0
 80059ca:	4613      	mov	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	009a      	lsls	r2, r3, #2
 80059d2:	441a      	add	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	fbb2 f5f3 	udiv	r5, r2, r3
 80059de:	f7fe ff1b 	bl	8004818 <HAL_RCC_GetPCLK2Freq>
 80059e2:	4602      	mov	r2, r0
 80059e4:	4613      	mov	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	009a      	lsls	r2, r3, #2
 80059ec:	441a      	add	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f8:	4a7d      	ldr	r2, [pc, #500]	; (8005bf0 <UART_SetConfig+0x32c>)
 80059fa:	fba2 2303 	umull	r2, r3, r2, r3
 80059fe:	095b      	lsrs	r3, r3, #5
 8005a00:	2264      	movs	r2, #100	; 0x64
 8005a02:	fb02 f303 	mul.w	r3, r2, r3
 8005a06:	1aeb      	subs	r3, r5, r3
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	3332      	adds	r3, #50	; 0x32
 8005a0c:	4a78      	ldr	r2, [pc, #480]	; (8005bf0 <UART_SetConfig+0x32c>)
 8005a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a12:	095b      	lsrs	r3, r3, #5
 8005a14:	f003 0207 	and.w	r2, r3, #7
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4422      	add	r2, r4
 8005a1e:	609a      	str	r2, [r3, #8]
 8005a20:	e154      	b.n	8005ccc <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005a22:	f7fe fee5 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8005a26:	4602      	mov	r2, r0
 8005a28:	4613      	mov	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	009a      	lsls	r2, r3, #2
 8005a30:	441a      	add	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3c:	4a6c      	ldr	r2, [pc, #432]	; (8005bf0 <UART_SetConfig+0x32c>)
 8005a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a42:	095b      	lsrs	r3, r3, #5
 8005a44:	011c      	lsls	r4, r3, #4
 8005a46:	f7fe fed3 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	009a      	lsls	r2, r3, #2
 8005a54:	441a      	add	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005a60:	f7fe fec6 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8005a64:	4602      	mov	r2, r0
 8005a66:	4613      	mov	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	009a      	lsls	r2, r3, #2
 8005a6e:	441a      	add	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7a:	4a5d      	ldr	r2, [pc, #372]	; (8005bf0 <UART_SetConfig+0x32c>)
 8005a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a80:	095b      	lsrs	r3, r3, #5
 8005a82:	2264      	movs	r2, #100	; 0x64
 8005a84:	fb02 f303 	mul.w	r3, r2, r3
 8005a88:	1aeb      	subs	r3, r5, r3
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	3332      	adds	r3, #50	; 0x32
 8005a8e:	4a58      	ldr	r2, [pc, #352]	; (8005bf0 <UART_SetConfig+0x32c>)
 8005a90:	fba2 2303 	umull	r2, r3, r2, r3
 8005a94:	095b      	lsrs	r3, r3, #5
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a9c:	441c      	add	r4, r3
 8005a9e:	f7fe fea7 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	009a      	lsls	r2, r3, #2
 8005aac:	441a      	add	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	fbb2 f5f3 	udiv	r5, r2, r3
 8005ab8:	f7fe fe9a 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8005abc:	4602      	mov	r2, r0
 8005abe:	4613      	mov	r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4413      	add	r3, r2
 8005ac4:	009a      	lsls	r2, r3, #2
 8005ac6:	441a      	add	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	005b      	lsls	r3, r3, #1
 8005ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad2:	4a47      	ldr	r2, [pc, #284]	; (8005bf0 <UART_SetConfig+0x32c>)
 8005ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad8:	095b      	lsrs	r3, r3, #5
 8005ada:	2264      	movs	r2, #100	; 0x64
 8005adc:	fb02 f303 	mul.w	r3, r2, r3
 8005ae0:	1aeb      	subs	r3, r5, r3
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	3332      	adds	r3, #50	; 0x32
 8005ae6:	4a42      	ldr	r2, [pc, #264]	; (8005bf0 <UART_SetConfig+0x32c>)
 8005ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	f003 0207 	and.w	r2, r3, #7
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4422      	add	r2, r4
 8005af8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8005afa:	e0e7      	b.n	8005ccc <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a39      	ldr	r2, [pc, #228]	; (8005be8 <UART_SetConfig+0x324>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d004      	beq.n	8005b10 <UART_SetConfig+0x24c>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a38      	ldr	r2, [pc, #224]	; (8005bec <UART_SetConfig+0x328>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d171      	bne.n	8005bf4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005b10:	f7fe fe82 	bl	8004818 <HAL_RCC_GetPCLK2Freq>
 8005b14:	4602      	mov	r2, r0
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009a      	lsls	r2, r3, #2
 8005b1e:	441a      	add	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2a:	4a31      	ldr	r2, [pc, #196]	; (8005bf0 <UART_SetConfig+0x32c>)
 8005b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b30:	095b      	lsrs	r3, r3, #5
 8005b32:	011c      	lsls	r4, r3, #4
 8005b34:	f7fe fe70 	bl	8004818 <HAL_RCC_GetPCLK2Freq>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	009a      	lsls	r2, r3, #2
 8005b42:	441a      	add	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	fbb2 f5f3 	udiv	r5, r2, r3
 8005b4e:	f7fe fe63 	bl	8004818 <HAL_RCC_GetPCLK2Freq>
 8005b52:	4602      	mov	r2, r0
 8005b54:	4613      	mov	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	009a      	lsls	r2, r3, #2
 8005b5c:	441a      	add	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b68:	4a21      	ldr	r2, [pc, #132]	; (8005bf0 <UART_SetConfig+0x32c>)
 8005b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6e:	095b      	lsrs	r3, r3, #5
 8005b70:	2264      	movs	r2, #100	; 0x64
 8005b72:	fb02 f303 	mul.w	r3, r2, r3
 8005b76:	1aeb      	subs	r3, r5, r3
 8005b78:	011b      	lsls	r3, r3, #4
 8005b7a:	3332      	adds	r3, #50	; 0x32
 8005b7c:	4a1c      	ldr	r2, [pc, #112]	; (8005bf0 <UART_SetConfig+0x32c>)
 8005b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b82:	095b      	lsrs	r3, r3, #5
 8005b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b88:	441c      	add	r4, r3
 8005b8a:	f7fe fe45 	bl	8004818 <HAL_RCC_GetPCLK2Freq>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	4613      	mov	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	009a      	lsls	r2, r3, #2
 8005b98:	441a      	add	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	fbb2 f5f3 	udiv	r5, r2, r3
 8005ba4:	f7fe fe38 	bl	8004818 <HAL_RCC_GetPCLK2Freq>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	4613      	mov	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	009a      	lsls	r2, r3, #2
 8005bb2:	441a      	add	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bbe:	4a0c      	ldr	r2, [pc, #48]	; (8005bf0 <UART_SetConfig+0x32c>)
 8005bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc4:	095b      	lsrs	r3, r3, #5
 8005bc6:	2264      	movs	r2, #100	; 0x64
 8005bc8:	fb02 f303 	mul.w	r3, r2, r3
 8005bcc:	1aeb      	subs	r3, r5, r3
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	3332      	adds	r3, #50	; 0x32
 8005bd2:	4a07      	ldr	r2, [pc, #28]	; (8005bf0 <UART_SetConfig+0x32c>)
 8005bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd8:	095b      	lsrs	r3, r3, #5
 8005bda:	f003 020f 	and.w	r2, r3, #15
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4422      	add	r2, r4
 8005be4:	609a      	str	r2, [r3, #8]
 8005be6:	e071      	b.n	8005ccc <UART_SetConfig+0x408>
 8005be8:	40011000 	.word	0x40011000
 8005bec:	40011400 	.word	0x40011400
 8005bf0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005bf4:	f7fe fdfc 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	009a      	lsls	r2, r3, #2
 8005c02:	441a      	add	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c0e:	4a31      	ldr	r2, [pc, #196]	; (8005cd4 <UART_SetConfig+0x410>)
 8005c10:	fba2 2303 	umull	r2, r3, r2, r3
 8005c14:	095b      	lsrs	r3, r3, #5
 8005c16:	011c      	lsls	r4, r3, #4
 8005c18:	f7fe fdea 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	4613      	mov	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	009a      	lsls	r2, r3, #2
 8005c26:	441a      	add	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	fbb2 f5f3 	udiv	r5, r2, r3
 8005c32:	f7fe fddd 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8005c36:	4602      	mov	r2, r0
 8005c38:	4613      	mov	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	009a      	lsls	r2, r3, #2
 8005c40:	441a      	add	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4c:	4a21      	ldr	r2, [pc, #132]	; (8005cd4 <UART_SetConfig+0x410>)
 8005c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c52:	095b      	lsrs	r3, r3, #5
 8005c54:	2264      	movs	r2, #100	; 0x64
 8005c56:	fb02 f303 	mul.w	r3, r2, r3
 8005c5a:	1aeb      	subs	r3, r5, r3
 8005c5c:	011b      	lsls	r3, r3, #4
 8005c5e:	3332      	adds	r3, #50	; 0x32
 8005c60:	4a1c      	ldr	r2, [pc, #112]	; (8005cd4 <UART_SetConfig+0x410>)
 8005c62:	fba2 2303 	umull	r2, r3, r2, r3
 8005c66:	095b      	lsrs	r3, r3, #5
 8005c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c6c:	441c      	add	r4, r3
 8005c6e:	f7fe fdbf 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8005c72:	4602      	mov	r2, r0
 8005c74:	4613      	mov	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	009a      	lsls	r2, r3, #2
 8005c7c:	441a      	add	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	fbb2 f5f3 	udiv	r5, r2, r3
 8005c88:	f7fe fdb2 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	4613      	mov	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	009a      	lsls	r2, r3, #2
 8005c96:	441a      	add	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca2:	4a0c      	ldr	r2, [pc, #48]	; (8005cd4 <UART_SetConfig+0x410>)
 8005ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca8:	095b      	lsrs	r3, r3, #5
 8005caa:	2264      	movs	r2, #100	; 0x64
 8005cac:	fb02 f303 	mul.w	r3, r2, r3
 8005cb0:	1aeb      	subs	r3, r5, r3
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	3332      	adds	r3, #50	; 0x32
 8005cb6:	4a07      	ldr	r2, [pc, #28]	; (8005cd4 <UART_SetConfig+0x410>)
 8005cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cbc:	095b      	lsrs	r3, r3, #5
 8005cbe:	f003 020f 	and.w	r2, r3, #15
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4422      	add	r2, r4
 8005cc8:	609a      	str	r2, [r3, #8]
}
 8005cca:	e7ff      	b.n	8005ccc <UART_SetConfig+0x408>
 8005ccc:	bf00      	nop
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8005cd4:	51eb851f 	.word	0x51eb851f

08005cd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cd8:	b084      	sub	sp, #16
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	f107 001c 	add.w	r0, r7, #28
 8005ce6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d122      	bne.n	8005d36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d105      	bne.n	8005d2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f94a 	bl	8005fc4 <USB_CoreReset>
 8005d30:	4603      	mov	r3, r0
 8005d32:	73fb      	strb	r3, [r7, #15]
 8005d34:	e01a      	b.n	8005d6c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f93e 	bl	8005fc4 <USB_CoreReset>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d106      	bne.n	8005d60 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	639a      	str	r2, [r3, #56]	; 0x38
 8005d5e:	e005      	b.n	8005d6c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d10b      	bne.n	8005d8a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f043 0206 	orr.w	r2, r3, #6
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f043 0220 	orr.w	r2, r3, #32
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d96:	b004      	add	sp, #16
 8005d98:	4770      	bx	lr

08005d9a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f043 0201 	orr.w	r2, r3, #1
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f023 0201 	bic.w	r2, r3, #1
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b082      	sub	sp, #8
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	460b      	mov	r3, r1
 8005de8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005df6:	78fb      	ldrb	r3, [r7, #3]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d106      	bne.n	8005e0a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	60da      	str	r2, [r3, #12]
 8005e08:	e00b      	b.n	8005e22 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d106      	bne.n	8005e1e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	60da      	str	r2, [r3, #12]
 8005e1c:	e001      	b.n	8005e22 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e003      	b.n	8005e2a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005e22:	2032      	movs	r0, #50	; 0x32
 8005e24:	f7fb f80c 	bl	8000e40 <HAL_Delay>

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	019b      	lsls	r3, r3, #6
 8005e46:	f043 0220 	orr.w	r2, r3, #32
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	3301      	adds	r3, #1
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4a09      	ldr	r2, [pc, #36]	; (8005e7c <USB_FlushTxFifo+0x48>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d901      	bls.n	8005e60 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e006      	b.n	8005e6e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	f003 0320 	and.w	r3, r3, #32
 8005e68:	2b20      	cmp	r3, #32
 8005e6a:	d0f0      	beq.n	8005e4e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	00030d40 	.word	0x00030d40

08005e80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2210      	movs	r2, #16
 8005e90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	3301      	adds	r3, #1
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4a09      	ldr	r2, [pc, #36]	; (8005ec0 <USB_FlushRxFifo+0x40>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d901      	bls.n	8005ea4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e006      	b.n	8005eb2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	f003 0310 	and.w	r3, r3, #16
 8005eac:	2b10      	cmp	r3, #16
 8005eae:	d0f0      	beq.n	8005e92 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	00030d40 	.word	0x00030d40

08005ec4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b089      	sub	sp, #36	; 0x24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	4611      	mov	r1, r2
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	71fb      	strb	r3, [r7, #7]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005ee2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d11a      	bne.n	8005f20 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005eea:	88bb      	ldrh	r3, [r7, #4]
 8005eec:	3303      	adds	r3, #3
 8005eee:	089b      	lsrs	r3, r3, #2
 8005ef0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	61bb      	str	r3, [r7, #24]
 8005ef6:	e00f      	b.n	8005f18 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ef8:	79fb      	ldrb	r3, [r7, #7]
 8005efa:	031a      	lsls	r2, r3, #12
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f04:	461a      	mov	r2, r3
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	3304      	adds	r3, #4
 8005f10:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	3301      	adds	r3, #1
 8005f16:	61bb      	str	r3, [r7, #24]
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d3eb      	bcc.n	8005ef8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3724      	adds	r7, #36	; 0x24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b089      	sub	sp, #36	; 0x24
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005f44:	88fb      	ldrh	r3, [r7, #6]
 8005f46:	3303      	adds	r3, #3
 8005f48:	089b      	lsrs	r3, r3, #2
 8005f4a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	61bb      	str	r3, [r7, #24]
 8005f50:	e00b      	b.n	8005f6a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	3304      	adds	r3, #4
 8005f62:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	3301      	adds	r3, #1
 8005f68:	61bb      	str	r3, [r7, #24]
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d3ef      	bcc.n	8005f52 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005f72:	69fb      	ldr	r3, [r7, #28]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3724      	adds	r7, #36	; 0x24
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4013      	ands	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f98:	68fb      	ldr	r3, [r7, #12]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
	...

08005fc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	60fb      	str	r3, [r7, #12]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4a13      	ldr	r2, [pc, #76]	; (8006028 <USB_CoreReset+0x64>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d901      	bls.n	8005fe2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e01b      	b.n	800601a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	daf2      	bge.n	8005fd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	f043 0201 	orr.w	r2, r3, #1
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4a09      	ldr	r2, [pc, #36]	; (8006028 <USB_CoreReset+0x64>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d901      	bls.n	800600c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e006      	b.n	800601a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b01      	cmp	r3, #1
 8006016:	d0f0      	beq.n	8005ffa <USB_CoreReset+0x36>

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	00030d40 	.word	0x00030d40

0800602c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800602c:	b084      	sub	sp, #16
 800602e:	b580      	push	{r7, lr}
 8006030:	b084      	sub	sp, #16
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	f107 001c 	add.w	r0, r7, #28
 800603a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006048:	461a      	mov	r2, r3
 800604a:	2300      	movs	r3, #0
 800604c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006052:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800607a:	2b00      	cmp	r3, #0
 800607c:	d018      	beq.n	80060b0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	2b03      	cmp	r3, #3
 8006082:	d10a      	bne.n	800609a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006092:	f043 0304 	orr.w	r3, r3, #4
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	e014      	b.n	80060c4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060a8:	f023 0304 	bic.w	r3, r3, #4
 80060ac:	6013      	str	r3, [r2, #0]
 80060ae:	e009      	b.n	80060c4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060be:	f023 0304 	bic.w	r3, r3, #4
 80060c2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80060c4:	2110      	movs	r1, #16
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7ff feb4 	bl	8005e34 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7ff fed7 	bl	8005e80 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80060d2:	2300      	movs	r3, #0
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	e015      	b.n	8006104 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e4:	461a      	mov	r2, r3
 80060e6:	f04f 33ff 	mov.w	r3, #4294967295
 80060ea:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f8:	461a      	mov	r2, r3
 80060fa:	2300      	movs	r3, #0
 80060fc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	3301      	adds	r3, #1
 8006102:	60fb      	str	r3, [r7, #12]
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	429a      	cmp	r2, r3
 800610a:	d3e5      	bcc.n	80060d8 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800610c:	2101      	movs	r1, #1
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f8ac 	bl	800626c <USB_DriveVbus>

  HAL_Delay(200U);
 8006114:	20c8      	movs	r0, #200	; 0xc8
 8006116:	f7fa fe93 	bl	8000e40 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f04f 32ff 	mov.w	r2, #4294967295
 8006126:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00b      	beq.n	800614c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f44f 7200 	mov.w	r2, #512	; 0x200
 800613a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a14      	ldr	r2, [pc, #80]	; (8006190 <USB_HostInit+0x164>)
 8006140:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a13      	ldr	r2, [pc, #76]	; (8006194 <USB_HostInit+0x168>)
 8006146:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800614a:	e009      	b.n	8006160 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2280      	movs	r2, #128	; 0x80
 8006150:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a10      	ldr	r2, [pc, #64]	; (8006198 <USB_HostInit+0x16c>)
 8006156:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a10      	ldr	r2, [pc, #64]	; (800619c <USB_HostInit+0x170>)
 800615c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006162:	2b00      	cmp	r3, #0
 8006164:	d105      	bne.n	8006172 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	f043 0210 	orr.w	r2, r3, #16
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	699a      	ldr	r2, [r3, #24]
 8006176:	4b0a      	ldr	r3, [pc, #40]	; (80061a0 <USB_HostInit+0x174>)
 8006178:	4313      	orrs	r3, r2
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800618a:	b004      	add	sp, #16
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	01000200 	.word	0x01000200
 8006194:	00e00300 	.word	0x00e00300
 8006198:	00600080 	.word	0x00600080
 800619c:	004000e0 	.word	0x004000e0
 80061a0:	a3200008 	.word	0xa3200008

080061a4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	460b      	mov	r3, r1
 80061ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061c2:	f023 0303 	bic.w	r3, r3, #3
 80061c6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	78fb      	ldrb	r3, [r7, #3]
 80061d2:	f003 0303 	and.w	r3, r3, #3
 80061d6:	68f9      	ldr	r1, [r7, #12]
 80061d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80061dc:	4313      	orrs	r3, r2
 80061de:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80061e0:	78fb      	ldrb	r3, [r7, #3]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d107      	bne.n	80061f6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061ec:	461a      	mov	r2, r3
 80061ee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80061f2:	6053      	str	r3, [r2, #4]
 80061f4:	e009      	b.n	800620a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d106      	bne.n	800620a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006202:	461a      	mov	r2, r3
 8006204:	f241 7370 	movw	r3, #6000	; 0x1770
 8006208:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006238:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006246:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006248:	2064      	movs	r0, #100	; 0x64
 800624a:	f7fa fdf9 	bl	8000e40 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006256:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800625a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800625c:	200a      	movs	r0, #10
 800625e:	f7fa fdef 	bl	8000e40 <HAL_Delay>

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006290:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d109      	bne.n	80062b0 <USB_DriveVbus+0x44>
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d106      	bne.n	80062b0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80062aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062ae:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ba:	d109      	bne.n	80062d0 <USB_DriveVbus+0x64>
 80062bc:	78fb      	ldrb	r3, [r7, #3]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d106      	bne.n	80062d0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80062ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062ce:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80062de:	b480      	push	{r7}
 80062e0:	b085      	sub	sp, #20
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	0c5b      	lsrs	r3, r3, #17
 80062fc:	f003 0303 	and.w	r3, r3, #3
}
 8006300:	4618      	mov	r0, r3
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	b29b      	uxth	r3, r3
}
 8006322:	4618      	mov	r0, r3
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
	...

08006330 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	4608      	mov	r0, r1
 800633a:	4611      	mov	r1, r2
 800633c:	461a      	mov	r2, r3
 800633e:	4603      	mov	r3, r0
 8006340:	70fb      	strb	r3, [r7, #3]
 8006342:	460b      	mov	r3, r1
 8006344:	70bb      	strb	r3, [r7, #2]
 8006346:	4613      	mov	r3, r2
 8006348:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006352:	78fb      	ldrb	r3, [r7, #3]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	4413      	add	r3, r2
 800635a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800635e:	461a      	mov	r2, r3
 8006360:	f04f 33ff 	mov.w	r3, #4294967295
 8006364:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006366:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800636a:	2b03      	cmp	r3, #3
 800636c:	d87e      	bhi.n	800646c <USB_HC_Init+0x13c>
 800636e:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <USB_HC_Init+0x44>)
 8006370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006374:	08006385 	.word	0x08006385
 8006378:	0800642f 	.word	0x0800642f
 800637c:	08006385 	.word	0x08006385
 8006380:	080063f1 	.word	0x080063f1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	4413      	add	r3, r2
 800638c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006390:	461a      	mov	r2, r3
 8006392:	f240 439d 	movw	r3, #1181	; 0x49d
 8006396:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006398:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800639c:	2b00      	cmp	r3, #0
 800639e:	da10      	bge.n	80063c2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	78fa      	ldrb	r2, [r7, #3]
 80063b0:	0151      	lsls	r1, r2, #5
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	440a      	add	r2, r1
 80063b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063be:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80063c0:	e057      	b.n	8006472 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d051      	beq.n	8006472 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80063ce:	78fb      	ldrb	r3, [r7, #3]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	78fa      	ldrb	r2, [r7, #3]
 80063de:	0151      	lsls	r1, r2, #5
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	440a      	add	r2, r1
 80063e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80063ec:	60d3      	str	r3, [r2, #12]
      break;
 80063ee:	e040      	b.n	8006472 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80063f0:	78fb      	ldrb	r3, [r7, #3]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fc:	461a      	mov	r2, r3
 80063fe:	f240 639d 	movw	r3, #1693	; 0x69d
 8006402:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006404:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006408:	2b00      	cmp	r3, #0
 800640a:	da34      	bge.n	8006476 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800640c:	78fb      	ldrb	r3, [r7, #3]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	4413      	add	r3, r2
 8006414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	78fa      	ldrb	r2, [r7, #3]
 800641c:	0151      	lsls	r1, r2, #5
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	440a      	add	r2, r1
 8006422:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800642a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800642c:	e023      	b.n	8006476 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800642e:	78fb      	ldrb	r3, [r7, #3]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	4413      	add	r3, r2
 8006436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800643a:	461a      	mov	r2, r3
 800643c:	f240 2325 	movw	r3, #549	; 0x225
 8006440:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006442:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006446:	2b00      	cmp	r3, #0
 8006448:	da17      	bge.n	800647a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800644a:	78fb      	ldrb	r3, [r7, #3]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	4413      	add	r3, r2
 8006452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	78fa      	ldrb	r2, [r7, #3]
 800645a:	0151      	lsls	r1, r2, #5
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	440a      	add	r2, r1
 8006460:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006464:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006468:	60d3      	str	r3, [r2, #12]
      }
      break;
 800646a:	e006      	b.n	800647a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	75fb      	strb	r3, [r7, #23]
      break;
 8006470:	e004      	b.n	800647c <USB_HC_Init+0x14c>
      break;
 8006472:	bf00      	nop
 8006474:	e002      	b.n	800647c <USB_HC_Init+0x14c>
      break;
 8006476:	bf00      	nop
 8006478:	e000      	b.n	800647c <USB_HC_Init+0x14c>
      break;
 800647a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006482:	699a      	ldr	r2, [r3, #24]
 8006484:	78fb      	ldrb	r3, [r7, #3]
 8006486:	f003 030f 	and.w	r3, r3, #15
 800648a:	2101      	movs	r1, #1
 800648c:	fa01 f303 	lsl.w	r3, r1, r3
 8006490:	68b9      	ldr	r1, [r7, #8]
 8006492:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006496:	4313      	orrs	r3, r2
 8006498:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80064a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	da03      	bge.n	80064b6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80064ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064b2:	613b      	str	r3, [r7, #16]
 80064b4:	e001      	b.n	80064ba <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80064ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d103      	bne.n	80064ca <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80064c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	e001      	b.n	80064ce <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064ce:	787b      	ldrb	r3, [r7, #1]
 80064d0:	059b      	lsls	r3, r3, #22
 80064d2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80064d6:	78bb      	ldrb	r3, [r7, #2]
 80064d8:	02db      	lsls	r3, r3, #11
 80064da:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064de:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80064e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80064e4:	049b      	lsls	r3, r3, #18
 80064e6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80064ea:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80064ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80064f2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	0159      	lsls	r1, r3, #5
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	440b      	add	r3, r1
 8006500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006504:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800650a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800650c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006510:	2b03      	cmp	r3, #3
 8006512:	d10f      	bne.n	8006534 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006514:	78fb      	ldrb	r3, [r7, #3]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	4413      	add	r3, r2
 800651c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	78fa      	ldrb	r2, [r7, #3]
 8006524:	0151      	lsls	r1, r2, #5
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	440a      	add	r2, r1
 800652a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800652e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006532:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006534:	7dfb      	ldrb	r3, [r7, #23]
}
 8006536:	4618      	mov	r0, r3
 8006538:	371c      	adds	r7, #28
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop

08006544 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b08c      	sub	sp, #48	; 0x30
 8006548:	af02      	add	r7, sp, #8
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	4613      	mov	r3, r2
 8006550:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	785b      	ldrb	r3, [r3, #1]
 800655a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800655c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006560:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800656a:	2b00      	cmp	r3, #0
 800656c:	d028      	beq.n	80065c0 <USB_HC_StartXfer+0x7c>
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	791b      	ldrb	r3, [r3, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d124      	bne.n	80065c0 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006576:	79fb      	ldrb	r3, [r7, #7]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10b      	bne.n	8006594 <USB_HC_StartXfer+0x50>
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	795b      	ldrb	r3, [r3, #5]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d107      	bne.n	8006594 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	785b      	ldrb	r3, [r3, #1]
 8006588:	4619      	mov	r1, r3
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 fa2e 	bl	80069ec <USB_DoPing>
      return HAL_OK;
 8006590:	2300      	movs	r3, #0
 8006592:	e112      	b.n	80067ba <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8006594:	79fb      	ldrb	r3, [r7, #7]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d112      	bne.n	80065c0 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	69fa      	ldr	r2, [r7, #28]
 80065aa:	0151      	lsls	r1, r2, #5
 80065ac:	6a3a      	ldr	r2, [r7, #32]
 80065ae:	440a      	add	r2, r1
 80065b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065b4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80065b8:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2200      	movs	r2, #0
 80065be:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d018      	beq.n	80065fa <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	8912      	ldrh	r2, [r2, #8]
 80065d0:	4413      	add	r3, r2
 80065d2:	3b01      	subs	r3, #1
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	8912      	ldrh	r2, [r2, #8]
 80065d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80065dc:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80065de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80065e0:	8b7b      	ldrh	r3, [r7, #26]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d90b      	bls.n	80065fe <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80065e6:	8b7b      	ldrh	r3, [r7, #26]
 80065e8:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80065ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	8912      	ldrh	r2, [r2, #8]
 80065f0:	fb02 f203 	mul.w	r2, r2, r3
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	611a      	str	r2, [r3, #16]
 80065f8:	e001      	b.n	80065fe <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80065fa:	2301      	movs	r3, #1
 80065fc:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	78db      	ldrb	r3, [r3, #3]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d006      	beq.n	8006614 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006606:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	8912      	ldrh	r2, [r2, #8]
 800660c:	fb02 f203 	mul.w	r2, r2, r3
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800661c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800661e:	04d9      	lsls	r1, r3, #19
 8006620:	4b68      	ldr	r3, [pc, #416]	; (80067c4 <USB_HC_StartXfer+0x280>)
 8006622:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006624:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	7a9b      	ldrb	r3, [r3, #10]
 800662a:	075b      	lsls	r3, r3, #29
 800662c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006630:	69f9      	ldr	r1, [r7, #28]
 8006632:	0148      	lsls	r0, r1, #5
 8006634:	6a39      	ldr	r1, [r7, #32]
 8006636:	4401      	add	r1, r0
 8006638:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800663c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800663e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006640:	79fb      	ldrb	r3, [r7, #7]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d009      	beq.n	800665a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	68d9      	ldr	r1, [r3, #12]
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	4413      	add	r3, r2
 8006652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006656:	460a      	mov	r2, r1
 8006658:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 0301 	and.w	r3, r3, #1
 8006666:	2b00      	cmp	r3, #0
 8006668:	bf0c      	ite	eq
 800666a:	2301      	moveq	r3, #1
 800666c:	2300      	movne	r3, #0
 800666e:	b2db      	uxtb	r3, r3
 8006670:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	4413      	add	r3, r2
 800667a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	69fa      	ldr	r2, [r7, #28]
 8006682:	0151      	lsls	r1, r2, #5
 8006684:	6a3a      	ldr	r2, [r7, #32]
 8006686:	440a      	add	r2, r1
 8006688:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800668c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006690:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	4413      	add	r3, r2
 800669a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	7e7b      	ldrb	r3, [r7, #25]
 80066a2:	075b      	lsls	r3, r3, #29
 80066a4:	69f9      	ldr	r1, [r7, #28]
 80066a6:	0148      	lsls	r0, r1, #5
 80066a8:	6a39      	ldr	r1, [r7, #32]
 80066aa:	4401      	add	r1, r0
 80066ac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80066b0:	4313      	orrs	r3, r2
 80066b2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	6a3b      	ldr	r3, [r7, #32]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a41      	ldr	r2, [pc, #260]	; (80067c8 <USB_HC_StartXfer+0x284>)
 80066c4:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066c6:	4b40      	ldr	r3, [pc, #256]	; (80067c8 <USB_HC_StartXfer+0x284>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066ce:	4a3e      	ldr	r2, [pc, #248]	; (80067c8 <USB_HC_StartXfer+0x284>)
 80066d0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	78db      	ldrb	r3, [r3, #3]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d006      	beq.n	80066e8 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80066da:	4b3b      	ldr	r3, [pc, #236]	; (80067c8 <USB_HC_StartXfer+0x284>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e2:	4a39      	ldr	r2, [pc, #228]	; (80067c8 <USB_HC_StartXfer+0x284>)
 80066e4:	6013      	str	r3, [r2, #0]
 80066e6:	e005      	b.n	80066f4 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80066e8:	4b37      	ldr	r3, [pc, #220]	; (80067c8 <USB_HC_StartXfer+0x284>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066f0:	4a35      	ldr	r2, [pc, #212]	; (80067c8 <USB_HC_StartXfer+0x284>)
 80066f2:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066f4:	4b34      	ldr	r3, [pc, #208]	; (80067c8 <USB_HC_StartXfer+0x284>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066fc:	4a32      	ldr	r2, [pc, #200]	; (80067c8 <USB_HC_StartXfer+0x284>)
 80066fe:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	4413      	add	r3, r2
 8006708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670c:	461a      	mov	r2, r3
 800670e:	4b2e      	ldr	r3, [pc, #184]	; (80067c8 <USB_HC_StartXfer+0x284>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8006714:	79fb      	ldrb	r3, [r7, #7]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d14e      	bne.n	80067b8 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	78db      	ldrb	r3, [r3, #3]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d14a      	bne.n	80067b8 <USB_HC_StartXfer+0x274>
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d046      	beq.n	80067b8 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	79db      	ldrb	r3, [r3, #7]
 800672e:	2b03      	cmp	r3, #3
 8006730:	d830      	bhi.n	8006794 <USB_HC_StartXfer+0x250>
 8006732:	a201      	add	r2, pc, #4	; (adr r2, 8006738 <USB_HC_StartXfer+0x1f4>)
 8006734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006738:	08006749 	.word	0x08006749
 800673c:	0800676d 	.word	0x0800676d
 8006740:	08006749 	.word	0x08006749
 8006744:	0800676d 	.word	0x0800676d
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	3303      	adds	r3, #3
 800674e:	089b      	lsrs	r3, r3, #2
 8006750:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006752:	8afa      	ldrh	r2, [r7, #22]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006758:	b29b      	uxth	r3, r3
 800675a:	429a      	cmp	r2, r3
 800675c:	d91c      	bls.n	8006798 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	f043 0220 	orr.w	r2, r3, #32
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	619a      	str	r2, [r3, #24]
          }
          break;
 800676a:	e015      	b.n	8006798 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	3303      	adds	r3, #3
 8006772:	089b      	lsrs	r3, r3, #2
 8006774:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006776:	8afa      	ldrh	r2, [r7, #22]
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	b29b      	uxth	r3, r3
 8006782:	429a      	cmp	r2, r3
 8006784:	d90a      	bls.n	800679c <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	619a      	str	r2, [r3, #24]
          }
          break;
 8006792:	e003      	b.n	800679c <USB_HC_StartXfer+0x258>

        default:
          break;
 8006794:	bf00      	nop
 8006796:	e002      	b.n	800679e <USB_HC_StartXfer+0x25a>
          break;
 8006798:	bf00      	nop
 800679a:	e000      	b.n	800679e <USB_HC_StartXfer+0x25a>
          break;
 800679c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	68d9      	ldr	r1, [r3, #12]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	785a      	ldrb	r2, [r3, #1]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	b298      	uxth	r0, r3
 80067ac:	2300      	movs	r3, #0
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	4603      	mov	r3, r0
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f7ff fb86 	bl	8005ec4 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3728      	adds	r7, #40	; 0x28
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	1ff80000 	.word	0x1ff80000
 80067c8:	200000ac 	.word	0x200000ac

080067cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	b29b      	uxth	r3, r3
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b087      	sub	sp, #28
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	460b      	mov	r3, r1
 80067f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80067fe:	78fb      	ldrb	r3, [r7, #3]
 8006800:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	4413      	add	r3, r2
 800680e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	0c9b      	lsrs	r3, r3, #18
 8006816:	f003 0303 	and.w	r3, r3, #3
 800681a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d002      	beq.n	8006828 <USB_HC_Halt+0x3a>
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2b02      	cmp	r3, #2
 8006826:	d16c      	bne.n	8006902 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	4413      	add	r3, r2
 8006830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	0151      	lsls	r1, r2, #5
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	440a      	add	r2, r1
 800683e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006842:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006846:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d143      	bne.n	80068dc <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	4413      	add	r3, r2
 800685c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	0151      	lsls	r1, r2, #5
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	440a      	add	r2, r1
 800686a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800686e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006872:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	4413      	add	r3, r2
 800687c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	0151      	lsls	r1, r2, #5
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	440a      	add	r2, r1
 800688a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800688e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006892:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	4413      	add	r3, r2
 800689c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	0151      	lsls	r1, r2, #5
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	440a      	add	r2, r1
 80068aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068b2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	3301      	adds	r3, #1
 80068b8:	617b      	str	r3, [r7, #20]
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068c0:	d81d      	bhi.n	80068fe <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068d8:	d0ec      	beq.n	80068b4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068da:	e080      	b.n	80069de <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	0151      	lsls	r1, r2, #5
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	440a      	add	r2, r1
 80068f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068fa:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068fc:	e06f      	b.n	80069de <USB_HC_Halt+0x1f0>
          break;
 80068fe:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006900:	e06d      	b.n	80069de <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	4413      	add	r3, r2
 800690a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	0151      	lsls	r1, r2, #5
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	440a      	add	r2, r1
 8006918:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800691c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006920:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d143      	bne.n	80069ba <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	4413      	add	r3, r2
 800693a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	0151      	lsls	r1, r2, #5
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	440a      	add	r2, r1
 8006948:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800694c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006950:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	4413      	add	r3, r2
 800695a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	0151      	lsls	r1, r2, #5
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	440a      	add	r2, r1
 8006968:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800696c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006970:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	015a      	lsls	r2, r3, #5
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	4413      	add	r3, r2
 800697a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	0151      	lsls	r1, r2, #5
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	440a      	add	r2, r1
 8006988:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800698c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006990:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	3301      	adds	r3, #1
 8006996:	617b      	str	r3, [r7, #20]
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800699e:	d81d      	bhi.n	80069dc <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069b6:	d0ec      	beq.n	8006992 <USB_HC_Halt+0x1a4>
 80069b8:	e011      	b.n	80069de <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	0151      	lsls	r1, r2, #5
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	440a      	add	r2, r1
 80069d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069d8:	6013      	str	r3, [r2, #0]
 80069da:	e000      	b.n	80069de <USB_HC_Halt+0x1f0>
          break;
 80069dc:	bf00      	nop
    }
  }

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	371c      	adds	r7, #28
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b087      	sub	sp, #28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	460b      	mov	r3, r1
 80069f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80069fc:	78fb      	ldrb	r3, [r7, #3]
 80069fe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006a00:	2301      	movs	r3, #1
 8006a02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	04da      	lsls	r2, r3, #19
 8006a08:	4b15      	ldr	r3, [pc, #84]	; (8006a60 <USB_DoPing+0x74>)
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	0151      	lsls	r1, r2, #5
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	440a      	add	r2, r1
 8006a14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a1c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a34:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a3c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	371c      	adds	r7, #28
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	1ff80000 	.word	0x1ff80000

08006a64 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7ff f9a1 	bl	8005dbc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006a7a:	2110      	movs	r1, #16
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7ff f9d9 	bl	8005e34 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7ff f9fc 	bl	8005e80 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006a88:	2300      	movs	r3, #0
 8006a8a:	613b      	str	r3, [r7, #16]
 8006a8c:	e01f      	b.n	8006ace <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aa4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006aac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ab4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	3301      	adds	r3, #1
 8006acc:	613b      	str	r3, [r7, #16]
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	2b0f      	cmp	r3, #15
 8006ad2:	d9dc      	bls.n	8006a8e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	613b      	str	r3, [r7, #16]
 8006ad8:	e034      	b.n	8006b44 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006af0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006af8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b00:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0e:	461a      	mov	r2, r3
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	3301      	adds	r3, #1
 8006b18:	617b      	str	r3, [r7, #20]
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b20:	d80c      	bhi.n	8006b3c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b38:	d0ec      	beq.n	8006b14 <USB_StopHost+0xb0>
 8006b3a:	e000      	b.n	8006b3e <USB_StopHost+0xda>
        break;
 8006b3c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	3301      	adds	r3, #1
 8006b42:	613b      	str	r3, [r7, #16]
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	2b0f      	cmp	r3, #15
 8006b48:	d9c7      	bls.n	8006ada <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b50:	461a      	mov	r2, r3
 8006b52:	f04f 33ff 	mov.w	r3, #4294967295
 8006b56:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b5e:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7ff f91a 	bl	8005d9a <USB_EnableGlobalInt>

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3718      	adds	r7, #24
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8006b70:	b590      	push	{r4, r7, lr}
 8006b72:	b089      	sub	sp, #36	; 0x24
 8006b74:	af04      	add	r7, sp, #16
 8006b76:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8006b78:	2302      	movs	r3, #2
 8006b7a:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	2202      	movs	r2, #2
 8006b80:	2102      	movs	r1, #2
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fc3a 	bl	80073fc <USBH_FindInterface>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8006b8c:	7bbb      	ldrb	r3, [r7, #14]
 8006b8e:	2bff      	cmp	r3, #255	; 0xff
 8006b90:	f000 812a 	beq.w	8006de8 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8006b94:	7bbb      	ldrb	r3, [r7, #14]
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fc13 	bl	80073c4 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8006ba4:	2050      	movs	r0, #80	; 0x50
 8006ba6:	f002 ff39 	bl	8009a1c <malloc>
 8006baa:	4603      	mov	r3, r0
 8006bac:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006bb8:	7bbb      	ldrb	r3, [r7, #14]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	211a      	movs	r1, #26
 8006bbe:	fb01 f303 	mul.w	r3, r1, r3
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	b25b      	sxtb	r3, r3
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	da15      	bge.n	8006bfc <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006bd0:	7bbb      	ldrb	r3, [r7, #14]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	211a      	movs	r1, #26
 8006bd6:	fb01 f303 	mul.w	r3, r1, r3
 8006bda:	4413      	add	r3, r2
 8006bdc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006be0:	781a      	ldrb	r2, [r3, #0]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006be6:	7bbb      	ldrb	r3, [r7, #14]
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	211a      	movs	r1, #26
 8006bec:	fb01 f303 	mul.w	r3, r1, r3
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006bf6:	881a      	ldrh	r2, [r3, #0]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	785b      	ldrb	r3, [r3, #1]
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f001 fd21 	bl	800864a <USBH_AllocPipe>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	7819      	ldrb	r1, [r3, #0]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	7858      	ldrb	r0, [r3, #1]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	8952      	ldrh	r2, [r2, #10]
 8006c28:	9202      	str	r2, [sp, #8]
 8006c2a:	2203      	movs	r2, #3
 8006c2c:	9201      	str	r2, [sp, #4]
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	4623      	mov	r3, r4
 8006c32:	4602      	mov	r2, r0
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f001 fcd9 	bl	80085ec <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	4619      	mov	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f002 fe10 	bl	8009868 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8006c48:	2300      	movs	r3, #0
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	210a      	movs	r1, #10
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 fbd4 	bl	80073fc <USBH_FindInterface>
 8006c54:	4603      	mov	r3, r0
 8006c56:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8006c58:	7bbb      	ldrb	r3, [r7, #14]
 8006c5a:	2bff      	cmp	r3, #255	; 0xff
 8006c5c:	f000 80c4 	beq.w	8006de8 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006c60:	7bbb      	ldrb	r3, [r7, #14]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	211a      	movs	r1, #26
 8006c66:	fb01 f303 	mul.w	r3, r1, r3
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	b25b      	sxtb	r3, r3
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	da16      	bge.n	8006ca6 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c78:	7bbb      	ldrb	r3, [r7, #14]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	211a      	movs	r1, #26
 8006c7e:	fb01 f303 	mul.w	r3, r1, r3
 8006c82:	4413      	add	r3, r2
 8006c84:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006c88:	781a      	ldrb	r2, [r3, #0]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c8e:	7bbb      	ldrb	r3, [r7, #14]
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	211a      	movs	r1, #26
 8006c94:	fb01 f303 	mul.w	r3, r1, r3
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006c9e:	881a      	ldrh	r2, [r3, #0]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	835a      	strh	r2, [r3, #26]
 8006ca4:	e015      	b.n	8006cd2 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ca6:	7bbb      	ldrb	r3, [r7, #14]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	211a      	movs	r1, #26
 8006cac:	fb01 f303 	mul.w	r3, r1, r3
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006cb6:	781a      	ldrb	r2, [r3, #0]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006cbc:	7bbb      	ldrb	r3, [r7, #14]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	211a      	movs	r1, #26
 8006cc2:	fb01 f303 	mul.w	r3, r1, r3
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006ccc:	881a      	ldrh	r2, [r3, #0]
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006cd2:	7bbb      	ldrb	r3, [r7, #14]
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	211a      	movs	r1, #26
 8006cd8:	fb01 f303 	mul.w	r3, r1, r3
 8006cdc:	4413      	add	r3, r2
 8006cde:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	b25b      	sxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	da16      	bge.n	8006d18 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006cea:	7bbb      	ldrb	r3, [r7, #14]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	211a      	movs	r1, #26
 8006cf0:	fb01 f303 	mul.w	r3, r1, r3
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006cfa:	781a      	ldrb	r2, [r3, #0]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d00:	7bbb      	ldrb	r3, [r7, #14]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	211a      	movs	r1, #26
 8006d06:	fb01 f303 	mul.w	r3, r1, r3
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006d10:	881a      	ldrh	r2, [r3, #0]
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	835a      	strh	r2, [r3, #26]
 8006d16:	e015      	b.n	8006d44 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006d18:	7bbb      	ldrb	r3, [r7, #14]
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	211a      	movs	r1, #26
 8006d1e:	fb01 f303 	mul.w	r3, r1, r3
 8006d22:	4413      	add	r3, r2
 8006d24:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006d28:	781a      	ldrb	r2, [r3, #0]
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d2e:	7bbb      	ldrb	r3, [r7, #14]
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	211a      	movs	r1, #26
 8006d34:	fb01 f303 	mul.w	r3, r1, r3
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006d3e:	881a      	ldrh	r2, [r3, #0]
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	7b9b      	ldrb	r3, [r3, #14]
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f001 fc7d 	bl	800864a <USBH_AllocPipe>
 8006d50:	4603      	mov	r3, r0
 8006d52:	461a      	mov	r2, r3
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	7bdb      	ldrb	r3, [r3, #15]
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f001 fc73 	bl	800864a <USBH_AllocPipe>
 8006d64:	4603      	mov	r3, r0
 8006d66:	461a      	mov	r2, r3
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	7b59      	ldrb	r1, [r3, #13]
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	7b98      	ldrb	r0, [r3, #14]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	8b12      	ldrh	r2, [r2, #24]
 8006d84:	9202      	str	r2, [sp, #8]
 8006d86:	2202      	movs	r2, #2
 8006d88:	9201      	str	r2, [sp, #4]
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	4623      	mov	r3, r4
 8006d8e:	4602      	mov	r2, r0
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 fc2b 	bl	80085ec <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	7b19      	ldrb	r1, [r3, #12]
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	7bd8      	ldrb	r0, [r3, #15]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	8b52      	ldrh	r2, [r2, #26]
 8006dae:	9202      	str	r2, [sp, #8]
 8006db0:	2202      	movs	r2, #2
 8006db2:	9201      	str	r2, [sp, #4]
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	4623      	mov	r3, r4
 8006db8:	4602      	mov	r2, r0
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f001 fc16 	bl	80085ec <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	7b5b      	ldrb	r3, [r3, #13]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f002 fd49 	bl	8009868 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	7b1b      	ldrb	r3, [r3, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f002 fd42 	bl	8009868 <USBH_LL_SetToggle>
      status = USBH_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd90      	pop	{r4, r7, pc}

08006df2 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b084      	sub	sp, #16
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00e      	beq.n	8006e2a <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	4619      	mov	r1, r3
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f001 fc09 	bl	800862a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f001 fc31 	bl	8008686 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	7b1b      	ldrb	r3, [r3, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00e      	beq.n	8006e50 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	7b1b      	ldrb	r3, [r3, #12]
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 fbf6 	bl	800862a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	7b1b      	ldrb	r3, [r3, #12]
 8006e42:	4619      	mov	r1, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 fc1e 	bl	8008686 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	7b5b      	ldrb	r3, [r3, #13]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00e      	beq.n	8006e76 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	7b5b      	ldrb	r3, [r3, #13]
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f001 fbe3 	bl	800862a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	7b5b      	ldrb	r3, [r3, #13]
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 fc0b 	bl	8008686 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00b      	beq.n	8006e9a <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f002 fdce 	bl	8009a2c <free>
    phost->pActiveClass->pData = 0U;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e96:	2200      	movs	r2, #0
 8006e98:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8006eac:	2302      	movs	r3, #2
 8006eae:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	3340      	adds	r3, #64	; 0x40
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f8b2 	bl	800702a <GetLineCoding>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d105      	bne.n	8006edc <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ed6:	2102      	movs	r1, #2
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	4798      	blx	r3
  }
  return status;
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006efe:	69db      	ldr	r3, [r3, #28]
 8006f00:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	d877      	bhi.n	8006ffc <USBH_CDC_Process+0x114>
 8006f0c:	a201      	add	r2, pc, #4	; (adr r2, 8006f14 <USBH_CDC_Process+0x2c>)
 8006f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f12:	bf00      	nop
 8006f14:	08006f29 	.word	0x08006f29
 8006f18:	08006f2f 	.word	0x08006f2f
 8006f1c:	08006f5f 	.word	0x08006f5f
 8006f20:	08006fd3 	.word	0x08006fd3
 8006f24:	08006fe1 	.word	0x08006fe1
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f2c:	e06d      	b.n	800700a <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f897 	bl	8007068 <SetLineCoding>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006f3e:	7bbb      	ldrb	r3, [r7, #14]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d104      	bne.n	8006f4e <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2202      	movs	r2, #2
 8006f48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006f4c:	e058      	b.n	8007000 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d055      	beq.n	8007000 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2204      	movs	r2, #4
 8006f58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006f5c:	e050      	b.n	8007000 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	3340      	adds	r3, #64	; 0x40
 8006f62:	4619      	mov	r1, r3
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f860 	bl	800702a <GetLineCoding>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006f6e:	7bbb      	ldrb	r3, [r7, #14]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d126      	bne.n	8006fc2 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f86:	791b      	ldrb	r3, [r3, #4]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d13b      	bne.n	8007004 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f96:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d133      	bne.n	8007004 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fa6:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d12b      	bne.n	8007004 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fb4:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d124      	bne.n	8007004 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f95a 	bl	8007274 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006fc0:	e020      	b.n	8007004 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8006fc2:	7bbb      	ldrb	r3, [r7, #14]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d01d      	beq.n	8007004 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2204      	movs	r2, #4
 8006fcc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006fd0:	e018      	b.n	8007004 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f867 	bl	80070a6 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f8dc 	bl	8007196 <CDC_ProcessReception>
    break;
 8006fde:	e014      	b.n	800700a <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fece 	bl	8007d84 <USBH_ClrFeature>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8006fec:	7bbb      	ldrb	r3, [r7, #14]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10a      	bne.n	8007008 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8006ffa:	e005      	b.n	8007008 <USBH_CDC_Process+0x120>

  default:
    break;
 8006ffc:	bf00      	nop
 8006ffe:	e004      	b.n	800700a <USBH_CDC_Process+0x122>
    break;
 8007000:	bf00      	nop
 8007002:	e002      	b.n	800700a <USBH_CDC_Process+0x122>
    break;
 8007004:	bf00      	nop
 8007006:	e000      	b.n	800700a <USBH_CDC_Process+0x122>
    break;
 8007008:	bf00      	nop

  }

  return status;
 800700a:	7bfb      	ldrb	r3, [r7, #15]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b082      	sub	sp, #8
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	22a1      	movs	r2, #161	; 0xa1
 8007038:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2221      	movs	r2, #33	; 0x21
 800703e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2207      	movs	r2, #7
 8007050:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2207      	movs	r2, #7
 8007056:	4619      	mov	r1, r3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f001 f873 	bl	8008144 <USBH_CtlReq>
 800705e:	4603      	mov	r3, r0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2221      	movs	r2, #33	; 0x21
 8007076:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2220      	movs	r2, #32
 800707c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2207      	movs	r2, #7
 800708e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	2207      	movs	r2, #7
 8007094:	4619      	mov	r1, r3
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f001 f854 	bl	8008144 <USBH_CtlReq>
 800709c:	4603      	mov	r3, r0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b086      	sub	sp, #24
 80070aa:	af02      	add	r7, sp, #8
 80070ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80070b8:	2300      	movs	r3, #0
 80070ba:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d002      	beq.n	80070cc <CDC_ProcessTransmission+0x26>
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d025      	beq.n	8007116 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 80070ca:	e060      	b.n	800718e <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	8b12      	ldrh	r2, [r2, #24]
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d90c      	bls.n	80070f2 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	69d9      	ldr	r1, [r3, #28]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8b1a      	ldrh	r2, [r3, #24]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	7b58      	ldrb	r0, [r3, #13]
 80070e4:	2301      	movs	r3, #1
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	4603      	mov	r3, r0
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f001 fa3b 	bl	8008566 <USBH_BulkSendData>
 80070f0:	e00c      	b.n	800710c <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	7b58      	ldrb	r0, [r3, #13]
 8007100:	2301      	movs	r3, #1
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	4603      	mov	r3, r0
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f001 fa2d 	bl	8008566 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8007114:	e03b      	b.n	800718e <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	7b5b      	ldrb	r3, [r3, #13]
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f002 fb79 	bl	8009814 <USBH_LL_GetURBState>
 8007122:	4603      	mov	r3, r0
 8007124:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8007126:	7afb      	ldrb	r3, [r7, #11]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d128      	bne.n	800717e <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	8b12      	ldrh	r2, [r2, #24]
 8007134:	4293      	cmp	r3, r2
 8007136:	d90e      	bls.n	8007156 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	8b12      	ldrh	r2, [r2, #24]
 8007140:	1a9a      	subs	r2, r3, r2
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	8b12      	ldrh	r2, [r2, #24]
 800714e:	441a      	add	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	61da      	str	r2, [r3, #28]
 8007154:	e002      	b.n	800715c <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007160:	2b00      	cmp	r3, #0
 8007162:	d004      	beq.n	800716e <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800716c:	e00e      	b.n	800718c <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f868 	bl	800724c <USBH_CDC_TransmitCallback>
    break;
 800717c:	e006      	b.n	800718c <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 800717e:	7afb      	ldrb	r3, [r7, #11]
 8007180:	2b02      	cmp	r3, #2
 8007182:	d103      	bne.n	800718c <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800718c:	bf00      	nop
  }
}
 800718e:	bf00      	nop
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b086      	sub	sp, #24
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80071a4:	69db      	ldr	r3, [r3, #28]
 80071a6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80071a8:	2300      	movs	r3, #0
 80071aa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80071b2:	2b03      	cmp	r3, #3
 80071b4:	d002      	beq.n	80071bc <CDC_ProcessReception+0x26>
 80071b6:	2b04      	cmp	r3, #4
 80071b8:	d00e      	beq.n	80071d8 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 80071ba:	e043      	b.n	8007244 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	6a19      	ldr	r1, [r3, #32]
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	8b5a      	ldrh	r2, [r3, #26]
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	7b1b      	ldrb	r3, [r3, #12]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f001 f9f1 	bl	80085b0 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	2204      	movs	r2, #4
 80071d2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80071d6:	e035      	b.n	8007244 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	7b1b      	ldrb	r3, [r3, #12]
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f002 fb18 	bl	8009814 <USBH_LL_GetURBState>
 80071e4:	4603      	mov	r3, r0
 80071e6:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 80071e8:	7cfb      	ldrb	r3, [r7, #19]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d129      	bne.n	8007242 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	7b1b      	ldrb	r3, [r3, #12]
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f002 fa7b 	bl	80096f0 <USBH_LL_GetLastXferSize>
 80071fa:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	429a      	cmp	r2, r3
 8007204:	d016      	beq.n	8007234 <CDC_ProcessReception+0x9e>
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	8b5b      	ldrh	r3, [r3, #26]
 800720a:	461a      	mov	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4293      	cmp	r3, r2
 8007210:	d910      	bls.n	8007234 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	1ad2      	subs	r2, r2, r3
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	6a1a      	ldr	r2, [r3, #32]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	441a      	add	r2, r3
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	2203      	movs	r2, #3
 800722e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8007232:	e006      	b.n	8007242 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f80f 	bl	8007260 <USBH_CDC_ReceiveCallback>
    break;
 8007242:	bf00      	nop
  }
}
 8007244:	bf00      	nop
 8007246:	3718      	adds	r7, #24
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]

}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]

}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]

}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	4613      	mov	r3, r2
 8007294:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d101      	bne.n	80072a0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800729c:	2302      	movs	r3, #2
 800729e:	e019      	b.n	80072d4 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	79fa      	ldrb	r2, [r7, #7]
 80072a4:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 f80f 	bl	80072dc <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d003      	beq.n	80072cc <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f002 f95d 	bl	800958c <USBH_LL_Init>

  return USBH_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80072e4:	2300      	movs	r3, #0
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80072e8:	e008      	b.n	80072fc <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	32e0      	adds	r2, #224	; 0xe0
 80072f0:	2100      	movs	r1, #0
 80072f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	3301      	adds	r3, #1
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b0e      	cmp	r3, #14
 8007300:	d9f3      	bls.n	80072ea <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8007302:	2300      	movs	r3, #0
 8007304:	60fb      	str	r3, [r7, #12]
 8007306:	e009      	b.n	800731c <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	4413      	add	r3, r2
 800730e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007312:	2200      	movs	r2, #0
 8007314:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3301      	adds	r3, #1
 800731a:	60fb      	str	r3, [r7, #12]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007322:	d3f1      	bcc.n	8007308 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2240      	movs	r2, #64	; 0x40
 8007348:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800736e:	b480      	push	{r7}
 8007370:	b085      	sub	sp, #20
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8007378:	2300      	movs	r3, #0
 800737a:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d017      	beq.n	80073b2 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10f      	bne.n	80073ac <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007392:	1c59      	adds	r1, r3, #1
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	33dc      	adds	r3, #220	; 0xdc
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80073a6:	2300      	movs	r3, #0
 80073a8:	73fb      	strb	r3, [r7, #15]
 80073aa:	e004      	b.n	80073b6 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80073ac:	2302      	movs	r3, #2
 80073ae:	73fb      	strb	r3, [r7, #15]
 80073b0:	e001      	b.n	80073b6 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80073b2:	2302      	movs	r3, #2
 80073b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	460b      	mov	r3, r1
 80073ce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 80073d0:	2300      	movs	r3, #0
 80073d2:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 80073da:	78fa      	ldrb	r2, [r7, #3]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d204      	bcs.n	80073ea <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	78fa      	ldrb	r2, [r7, #3]
 80073e4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 80073e8:	e001      	b.n	80073ee <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 80073ea:	2302      	movs	r3, #2
 80073ec:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b087      	sub	sp, #28
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	4608      	mov	r0, r1
 8007406:	4611      	mov	r1, r2
 8007408:	461a      	mov	r2, r3
 800740a:	4603      	mov	r3, r0
 800740c:	70fb      	strb	r3, [r7, #3]
 800740e:	460b      	mov	r3, r1
 8007410:	70bb      	strb	r3, [r7, #2]
 8007412:	4613      	mov	r3, r2
 8007414:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8007416:	2300      	movs	r3, #0
 8007418:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800741a:	2300      	movs	r3, #0
 800741c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007424:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007426:	e025      	b.n	8007474 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007428:	7dfb      	ldrb	r3, [r7, #23]
 800742a:	221a      	movs	r2, #26
 800742c:	fb02 f303 	mul.w	r3, r2, r3
 8007430:	3308      	adds	r3, #8
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	4413      	add	r3, r2
 8007436:	3302      	adds	r3, #2
 8007438:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	795b      	ldrb	r3, [r3, #5]
 800743e:	78fa      	ldrb	r2, [r7, #3]
 8007440:	429a      	cmp	r2, r3
 8007442:	d002      	beq.n	800744a <USBH_FindInterface+0x4e>
 8007444:	78fb      	ldrb	r3, [r7, #3]
 8007446:	2bff      	cmp	r3, #255	; 0xff
 8007448:	d111      	bne.n	800746e <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800744e:	78ba      	ldrb	r2, [r7, #2]
 8007450:	429a      	cmp	r2, r3
 8007452:	d002      	beq.n	800745a <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8007454:	78bb      	ldrb	r3, [r7, #2]
 8007456:	2bff      	cmp	r3, #255	; 0xff
 8007458:	d109      	bne.n	800746e <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800745e:	787a      	ldrb	r2, [r7, #1]
 8007460:	429a      	cmp	r2, r3
 8007462:	d002      	beq.n	800746a <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007464:	787b      	ldrb	r3, [r7, #1]
 8007466:	2bff      	cmp	r3, #255	; 0xff
 8007468:	d101      	bne.n	800746e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800746a:	7dfb      	ldrb	r3, [r7, #23]
 800746c:	e006      	b.n	800747c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800746e:	7dfb      	ldrb	r3, [r7, #23]
 8007470:	3301      	adds	r3, #1
 8007472:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007474:	7dfb      	ldrb	r3, [r7, #23]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d9d6      	bls.n	8007428 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800747a:	23ff      	movs	r3, #255	; 0xff
}
 800747c:	4618      	mov	r0, r3
 800747e:	371c      	adds	r7, #28
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f002 f8b7 	bl	8009604 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8007496:	2101      	movs	r1, #1
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f002 f9ce 	bl	800983a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b088      	sub	sp, #32
 80074ac:	af04      	add	r7, sp, #16
 80074ae:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80074b0:	2302      	movs	r3, #2
 80074b2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 faec 	bl	8007a96 <USBH_IsPortEnabled>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10c      	bne.n	80074de <USBH_Process+0x36>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d007      	beq.n	80074de <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b03      	cmp	r3, #3
 80074d6:	d002      	beq.n	80074de <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2203      	movs	r2, #3
 80074dc:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b0b      	cmp	r3, #11
 80074e6:	f200 814c 	bhi.w	8007782 <USBH_Process+0x2da>
 80074ea:	a201      	add	r2, pc, #4	; (adr r2, 80074f0 <USBH_Process+0x48>)
 80074ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f0:	08007521 	.word	0x08007521
 80074f4:	08007543 	.word	0x08007543
 80074f8:	08007557 	.word	0x08007557
 80074fc:	0800775d 	.word	0x0800775d
 8007500:	08007783 	.word	0x08007783
 8007504:	080075e5 	.word	0x080075e5
 8007508:	08007713 	.word	0x08007713
 800750c:	08007615 	.word	0x08007615
 8007510:	08007635 	.word	0x08007635
 8007514:	08007655 	.word	0x08007655
 8007518:	08007683 	.word	0x08007683
 800751c:	08007745 	.word	0x08007745
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 812c 	beq.w	8007786 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8007534:	20c8      	movs	r0, #200	; 0xc8
 8007536:	f002 f9ca 	bl	80098ce <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f002 f8bd 	bl	80096ba <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007540:	e121      	b.n	8007786 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007548:	2b01      	cmp	r3, #1
 800754a:	f040 811e 	bne.w	800778a <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2202      	movs	r2, #2
 8007552:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007554:	e119      	b.n	800778a <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8007556:	2064      	movs	r0, #100	; 0x64
 8007558:	f002 f9b9 	bl	80098ce <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f002 f887 	bl	8009670 <USBH_LL_GetSpeed>
 8007562:	4603      	mov	r3, r0
 8007564:	461a      	mov	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2205      	movs	r2, #5
 8007570:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8007572:	2100      	movs	r1, #0
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f001 f868 	bl	800864a <USBH_AllocPipe>
 800757a:	4603      	mov	r3, r0
 800757c:	461a      	mov	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8007582:	2180      	movs	r1, #128	; 0x80
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f001 f860 	bl	800864a <USBH_AllocPipe>
 800758a:	4603      	mov	r3, r0
 800758c:	461a      	mov	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	7919      	ldrb	r1, [r3, #4]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80075a6:	b292      	uxth	r2, r2
 80075a8:	9202      	str	r2, [sp, #8]
 80075aa:	2200      	movs	r2, #0
 80075ac:	9201      	str	r2, [sp, #4]
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	4603      	mov	r3, r0
 80075b2:	2280      	movs	r2, #128	; 0x80
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f001 f819 	bl	80085ec <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	7959      	ldrb	r1, [r3, #5]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80075ce:	b292      	uxth	r2, r2
 80075d0:	9202      	str	r2, [sp, #8]
 80075d2:	2200      	movs	r2, #0
 80075d4:	9201      	str	r2, [sp, #4]
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	4603      	mov	r3, r0
 80075da:	2200      	movs	r2, #0
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f001 f805 	bl	80085ec <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80075e2:	e0e3      	b.n	80077ac <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f8e7 	bl	80077b8 <USBH_HandleEnum>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f040 80ce 	bne.w	800778e <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8007600:	2b01      	cmp	r3, #1
 8007602:	d103      	bne.n	800760c <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2208      	movs	r2, #8
 8007608:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800760a:	e0c0      	b.n	800778e <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2207      	movs	r2, #7
 8007610:	701a      	strb	r2, [r3, #0]
    break;
 8007612:	e0bc      	b.n	800778e <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 80b9 	beq.w	8007792 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007626:	2101      	movs	r1, #1
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2208      	movs	r2, #8
 8007630:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007632:	e0ae      	b.n	8007792 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800763a:	b29b      	uxth	r3, r3
 800763c:	4619      	mov	r1, r3
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fb59 	bl	8007cf6 <USBH_SetCfg>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	f040 80a5 	bne.w	8007796 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2209      	movs	r2, #9
 8007650:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007652:	e0a0      	b.n	8007796 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800765a:	f003 0320 	and.w	r3, r3, #32
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00b      	beq.n	800767a <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007662:	2101      	movs	r1, #1
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fb69 	bl	8007d3c <USBH_SetFeature>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	f040 8094 	bne.w	800779a <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	220a      	movs	r2, #10
 8007676:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007678:	e08f      	b.n	800779a <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	220a      	movs	r2, #10
 800767e:	701a      	strb	r2, [r3, #0]
    break;
 8007680:	e08b      	b.n	800779a <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 8088 	beq.w	800779e <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007696:	2300      	movs	r3, #0
 8007698:	73fb      	strb	r3, [r7, #15]
 800769a:	e017      	b.n	80076cc <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800769c:	7bfb      	ldrb	r3, [r7, #15]
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	33dc      	adds	r3, #220	; 0xdc
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	791a      	ldrb	r2, [r3, #4]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d108      	bne.n	80076c6 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	33dc      	adds	r3, #220	; 0xdc
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
 80076c8:	3301      	adds	r3, #1
 80076ca:	73fb      	strb	r3, [r7, #15]
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d0e4      	beq.n	800769c <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d016      	beq.n	800770a <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	4798      	blx	r3
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d109      	bne.n	8007702 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2206      	movs	r2, #6
 80076f2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80076fa:	2103      	movs	r1, #3
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007700:	e04d      	b.n	800779e <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	220d      	movs	r2, #13
 8007706:	701a      	strb	r2, [r3, #0]
    break;
 8007708:	e049      	b.n	800779e <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	220d      	movs	r2, #13
 800770e:	701a      	strb	r2, [r3, #0]
    break;
 8007710:	e045      	b.n	800779e <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00f      	beq.n	800773c <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	4798      	blx	r3
 8007728:	4603      	mov	r3, r0
 800772a:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800772c:	7bbb      	ldrb	r3, [r7, #14]
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b00      	cmp	r3, #0
 8007732:	d136      	bne.n	80077a2 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	220b      	movs	r2, #11
 8007738:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800773a:	e032      	b.n	80077a2 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	220d      	movs	r2, #13
 8007740:	701a      	strb	r2, [r3, #0]
    break;
 8007742:	e02e      	b.n	80077a2 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800774a:	2b00      	cmp	r3, #0
 800774c:	d02b      	beq.n	80077a6 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	4798      	blx	r3
    }
    break;
 800775a:	e024      	b.n	80077a6 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f7ff fdbd 	bl	80072dc <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007768:	2b00      	cmp	r3, #0
 800776a:	d01e      	beq.n	80077aa <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8007780:	e013      	b.n	80077aa <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8007782:	bf00      	nop
 8007784:	e012      	b.n	80077ac <USBH_Process+0x304>
    break;
 8007786:	bf00      	nop
 8007788:	e010      	b.n	80077ac <USBH_Process+0x304>
    break;
 800778a:	bf00      	nop
 800778c:	e00e      	b.n	80077ac <USBH_Process+0x304>
    break;
 800778e:	bf00      	nop
 8007790:	e00c      	b.n	80077ac <USBH_Process+0x304>
    break;
 8007792:	bf00      	nop
 8007794:	e00a      	b.n	80077ac <USBH_Process+0x304>
    break;
 8007796:	bf00      	nop
 8007798:	e008      	b.n	80077ac <USBH_Process+0x304>
    break;
 800779a:	bf00      	nop
 800779c:	e006      	b.n	80077ac <USBH_Process+0x304>
    break;
 800779e:	bf00      	nop
 80077a0:	e004      	b.n	80077ac <USBH_Process+0x304>
    break;
 80077a2:	bf00      	nop
 80077a4:	e002      	b.n	80077ac <USBH_Process+0x304>
    break;
 80077a6:	bf00      	nop
 80077a8:	e000      	b.n	80077ac <USBH_Process+0x304>
    break;
 80077aa:	bf00      	nop
  }
 return USBH_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop

080077b8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b088      	sub	sp, #32
 80077bc:	af04      	add	r7, sp, #16
 80077be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80077c0:	2301      	movs	r3, #1
 80077c2:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	785b      	ldrb	r3, [r3, #1]
 80077c8:	2b07      	cmp	r3, #7
 80077ca:	f200 80f8 	bhi.w	80079be <USBH_HandleEnum+0x206>
 80077ce:	a201      	add	r2, pc, #4	; (adr r2, 80077d4 <USBH_HandleEnum+0x1c>)
 80077d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d4:	080077f5 	.word	0x080077f5
 80077d8:	08007867 	.word	0x08007867
 80077dc:	0800787f 	.word	0x0800787f
 80077e0:	080078f5 	.word	0x080078f5
 80077e4:	0800790b 	.word	0x0800790b
 80077e8:	08007927 	.word	0x08007927
 80077ec:	0800795b 	.word	0x0800795b
 80077f0:	0800798f 	.word	0x0800798f
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80077f4:	2108      	movs	r1, #8
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f9ad 	bl	8007b56 <USBH_Get_DevDesc>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f040 80df 	bne.w	80079c2 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	7919      	ldrb	r1, [r3, #4]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007828:	b292      	uxth	r2, r2
 800782a:	9202      	str	r2, [sp, #8]
 800782c:	2200      	movs	r2, #0
 800782e:	9201      	str	r2, [sp, #4]
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	4603      	mov	r3, r0
 8007834:	2280      	movs	r2, #128	; 0x80
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fed8 	bl	80085ec <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	7959      	ldrb	r1, [r3, #5]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007850:	b292      	uxth	r2, r2
 8007852:	9202      	str	r2, [sp, #8]
 8007854:	2200      	movs	r2, #0
 8007856:	9201      	str	r2, [sp, #4]
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	4603      	mov	r3, r0
 800785c:	2200      	movs	r2, #0
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fec4 	bl	80085ec <USBH_OpenPipe>

    }
    break;
 8007864:	e0ad      	b.n	80079c2 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8007866:	2112      	movs	r1, #18
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f974 	bl	8007b56 <USBH_Get_DevDesc>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	f040 80a8 	bne.w	80079c6 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2202      	movs	r2, #2
 800787a:	705a      	strb	r2, [r3, #1]

    }
    break;
 800787c:	e0a3      	b.n	80079c6 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800787e:	2101      	movs	r1, #1
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fa14 	bl	8007cae <USBH_SetAddress>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	f040 809e 	bne.w	80079ca <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 800788e:	2002      	movs	r0, #2
 8007890:	f002 f81d 	bl	80098ce <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2203      	movs	r2, #3
 80078a0:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	7919      	ldrb	r1, [r3, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80078b6:	b292      	uxth	r2, r2
 80078b8:	9202      	str	r2, [sp, #8]
 80078ba:	2200      	movs	r2, #0
 80078bc:	9201      	str	r2, [sp, #4]
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	4603      	mov	r3, r0
 80078c2:	2280      	movs	r2, #128	; 0x80
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fe91 	bl	80085ec <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	7959      	ldrb	r1, [r3, #5]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80078de:	b292      	uxth	r2, r2
 80078e0:	9202      	str	r2, [sp, #8]
 80078e2:	2200      	movs	r2, #0
 80078e4:	9201      	str	r2, [sp, #4]
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	4603      	mov	r3, r0
 80078ea:	2200      	movs	r2, #0
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fe7d 	bl	80085ec <USBH_OpenPipe>
    }
    break;
 80078f2:	e06a      	b.n	80079ca <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80078f4:	2109      	movs	r1, #9
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f955 	bl	8007ba6 <USBH_Get_CfgDesc>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d165      	bne.n	80079ce <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2204      	movs	r2, #4
 8007906:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007908:	e061      	b.n	80079ce <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8007910:	4619      	mov	r1, r3
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f947 	bl	8007ba6 <USBH_Get_CfgDesc>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d159      	bne.n	80079d2 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2205      	movs	r2, #5
 8007922:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007924:	e055      	b.n	80079d2 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800792c:	2b00      	cmp	r3, #0
 800792e:	d010      	beq.n	8007952 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800793c:	23ff      	movs	r3, #255	; 0xff
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f955 	bl	8007bee <USBH_Get_StringDesc>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d145      	bne.n	80079d6 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2206      	movs	r2, #6
 800794e:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007950:	e041      	b.n	80079d6 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2206      	movs	r2, #6
 8007956:	705a      	strb	r2, [r3, #1]
    break;
 8007958:	e03d      	b.n	80079d6 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8007960:	2b00      	cmp	r3, #0
 8007962:	d010      	beq.n	8007986 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007970:	23ff      	movs	r3, #255	; 0xff
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f93b 	bl	8007bee <USBH_Get_StringDesc>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d12d      	bne.n	80079da <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2207      	movs	r2, #7
 8007982:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007984:	e029      	b.n	80079da <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2207      	movs	r2, #7
 800798a:	705a      	strb	r2, [r3, #1]
    break;
 800798c:	e025      	b.n	80079da <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00f      	beq.n	80079b8 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80079a4:	23ff      	movs	r3, #255	; 0xff
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f921 	bl	8007bee <USBH_Get_StringDesc>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d115      	bne.n	80079de <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80079b6:	e012      	b.n	80079de <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	73fb      	strb	r3, [r7, #15]
    break;
 80079bc:	e00f      	b.n	80079de <USBH_HandleEnum+0x226>

  default:
    break;
 80079be:	bf00      	nop
 80079c0:	e00e      	b.n	80079e0 <USBH_HandleEnum+0x228>
    break;
 80079c2:	bf00      	nop
 80079c4:	e00c      	b.n	80079e0 <USBH_HandleEnum+0x228>
    break;
 80079c6:	bf00      	nop
 80079c8:	e00a      	b.n	80079e0 <USBH_HandleEnum+0x228>
    break;
 80079ca:	bf00      	nop
 80079cc:	e008      	b.n	80079e0 <USBH_HandleEnum+0x228>
    break;
 80079ce:	bf00      	nop
 80079d0:	e006      	b.n	80079e0 <USBH_HandleEnum+0x228>
    break;
 80079d2:	bf00      	nop
 80079d4:	e004      	b.n	80079e0 <USBH_HandleEnum+0x228>
    break;
 80079d6:	bf00      	nop
 80079d8:	e002      	b.n	80079e0 <USBH_HandleEnum+0x228>
    break;
 80079da:	bf00      	nop
 80079dc:	e000      	b.n	80079e0 <USBH_HandleEnum+0x228>
    break;
 80079de:	bf00      	nop
  }
  return Status;
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop

080079ec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 80079fe:	bf00      	nop
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b082      	sub	sp, #8
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007a18:	1c5a      	adds	r2, r3, #1
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f804 	bl	8007a2e <USBH_HandleSof>
}
 8007a26:	bf00      	nop
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b082      	sub	sp, #8
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b0b      	cmp	r3, #11
 8007a3e:	d10a      	bne.n	8007a56 <USBH_HandleSof+0x28>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d005      	beq.n	8007a56 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	4798      	blx	r3
  }
}
 8007a56:	bf00      	nop
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007a6e:	bf00      	nop
}
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b083      	sub	sp, #12
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007a8a:	bf00      	nop
}
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b083      	sub	sp, #12
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10f      	bne.n	8007ae2 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00e      	beq.n	8007af2 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007ada:	2104      	movs	r1, #4
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	4798      	blx	r3
 8007ae0:	e007      	b.n	8007af2 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d102      	bne.n	8007af2 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2202      	movs	r2, #2
 8007af0:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f001 fd98 	bl	800963a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	791b      	ldrb	r3, [r3, #4]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fdb8 	bl	8008686 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	795b      	ldrb	r3, [r3, #5]
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fdb2 	bl	8008686 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d005      	beq.n	8007b40 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b3a:	2105      	movs	r1, #5
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f001 fd5f 	bl	8009604 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2203      	movs	r2, #3
 8007b4a:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b086      	sub	sp, #24
 8007b5a:	af02      	add	r7, sp, #8
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	460b      	mov	r3, r1
 8007b60:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007b68:	78fb      	ldrb	r3, [r7, #3]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b74:	2100      	movs	r1, #0
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f864 	bl	8007c44 <USBH_GetDescriptor>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	73fb      	strb	r3, [r7, #15]
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d10a      	bne.n	8007b9c <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f203 3022 	addw	r0, r3, #802	; 0x322
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b92:	78fa      	ldrb	r2, [r7, #3]
 8007b94:	b292      	uxth	r2, r2
 8007b96:	4619      	mov	r1, r3
 8007b98:	f000 f918 	bl	8007dcc <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8007b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b086      	sub	sp, #24
 8007baa:	af02      	add	r7, sp, #8
 8007bac:	6078      	str	r0, [r7, #4]
 8007bae:	460b      	mov	r3, r1
 8007bb0:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	331c      	adds	r3, #28
 8007bb6:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8007bb8:	887b      	ldrh	r3, [r7, #2]
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f83d 	bl	8007c44 <USBH_GetDescriptor>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	72fb      	strb	r3, [r7, #11]
 8007bce:	7afb      	ldrb	r3, [r7, #11]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d107      	bne.n	8007be4 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007bda:	887a      	ldrh	r2, [r7, #2]
 8007bdc:	68f9      	ldr	r1, [r7, #12]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 f964 	bl	8007eac <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8007be4:	7afb      	ldrb	r3, [r7, #11]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b088      	sub	sp, #32
 8007bf2:	af02      	add	r7, sp, #8
 8007bf4:	60f8      	str	r0, [r7, #12]
 8007bf6:	607a      	str	r2, [r7, #4]
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	72fb      	strb	r3, [r7, #11]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8007c02:	7afb      	ldrb	r3, [r7, #11]
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007c0a:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007c12:	893b      	ldrh	r3, [r7, #8]
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	460b      	mov	r3, r1
 8007c18:	2100      	movs	r1, #0
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f000 f812 	bl	8007c44 <USBH_GetDescriptor>
 8007c20:	4603      	mov	r3, r0
 8007c22:	75fb      	strb	r3, [r7, #23]
 8007c24:	7dfb      	ldrb	r3, [r7, #23]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d107      	bne.n	8007c3a <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c30:	893a      	ldrh	r2, [r7, #8]
 8007c32:	6879      	ldr	r1, [r7, #4]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f000 fa37 	bl	80080a8 <USBH_ParseStringDesc>
  }
  return status;
 8007c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3718      	adds	r7, #24
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	607b      	str	r3, [r7, #4]
 8007c4e:	460b      	mov	r3, r1
 8007c50:	72fb      	strb	r3, [r7, #11]
 8007c52:	4613      	mov	r3, r2
 8007c54:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	789b      	ldrb	r3, [r3, #2]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d11c      	bne.n	8007c98 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007c5e:	7afb      	ldrb	r3, [r7, #11]
 8007c60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2206      	movs	r2, #6
 8007c6e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	893a      	ldrh	r2, [r7, #8]
 8007c74:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007c76:	893b      	ldrh	r3, [r7, #8]
 8007c78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007c7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c80:	d104      	bne.n	8007c8c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f240 4209 	movw	r2, #1033	; 0x409
 8007c88:	829a      	strh	r2, [r3, #20]
 8007c8a:	e002      	b.n	8007c92 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	8b3a      	ldrh	r2, [r7, #24]
 8007c96:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8007c98:	8b3b      	ldrh	r3, [r7, #24]
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	6879      	ldr	r1, [r7, #4]
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 fa50 	bl	8008144 <USBH_CtlReq>
 8007ca4:	4603      	mov	r3, r0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b082      	sub	sp, #8
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	789b      	ldrb	r3, [r3, #2]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d10f      	bne.n	8007ce2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2205      	movs	r2, #5
 8007ccc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007cce:	78fb      	ldrb	r3, [r7, #3]
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fa2c 	bl	8008144 <USBH_CtlReq>
 8007cec:	4603      	mov	r3, r0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b082      	sub	sp, #8
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	460b      	mov	r3, r1
 8007d00:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	789b      	ldrb	r3, [r3, #2]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d10e      	bne.n	8007d28 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2209      	movs	r2, #9
 8007d14:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	887a      	ldrh	r2, [r7, #2]
 8007d1a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8007d28:	2200      	movs	r2, #0
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fa09 	bl	8008144 <USBH_CtlReq>
 8007d32:	4603      	mov	r3, r0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	460b      	mov	r3, r1
 8007d46:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	789b      	ldrb	r3, [r3, #2]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d10f      	bne.n	8007d70 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2203      	movs	r2, #3
 8007d5a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007d5c:	78fb      	ldrb	r3, [r7, #3]
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007d70:	2200      	movs	r2, #0
 8007d72:	2100      	movs	r1, #0
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f9e5 	bl	8008144 <USBH_CtlReq>
 8007d7a:	4603      	mov	r3, r0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	789b      	ldrb	r3, [r3, #2]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d10f      	bne.n	8007db8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007daa:	78fb      	ldrb	r3, [r7, #3]
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8007db8:	2200      	movs	r2, #0
 8007dba:	2100      	movs	r1, #0
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f9c1 	bl	8008144 <USBH_CtlReq>
 8007dc2:	4603      	mov	r3, r0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	781a      	ldrb	r2, [r3, #0]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	785a      	ldrb	r2, [r3, #1]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	3302      	adds	r3, #2
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	3303      	adds	r3, #3
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	021b      	lsls	r3, r3, #8
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	791a      	ldrb	r2, [r3, #4]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	795a      	ldrb	r2, [r3, #5]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	799a      	ldrb	r2, [r3, #6]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	79da      	ldrb	r2, [r3, #7]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007e26:	88fb      	ldrh	r3, [r7, #6]
 8007e28:	2b08      	cmp	r3, #8
 8007e2a:	d939      	bls.n	8007ea0 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	3308      	adds	r3, #8
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	3309      	adds	r3, #9
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	021b      	lsls	r3, r3, #8
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	4313      	orrs	r3, r2
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	330a      	adds	r3, #10
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	330b      	adds	r3, #11
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	021b      	lsls	r3, r3, #8
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	330c      	adds	r3, #12
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	330d      	adds	r3, #13
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	021b      	lsls	r3, r3, #8
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	7b9a      	ldrb	r2, [r3, #14]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	7bda      	ldrb	r2, [r3, #15]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	7c1a      	ldrb	r2, [r3, #16]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	7c5a      	ldrb	r2, [r3, #17]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	745a      	strb	r2, [r3, #17]
  }
}
 8007ea0:	bf00      	nop
 8007ea2:	3714      	adds	r7, #20
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b08a      	sub	sp, #40	; 0x28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	781a      	ldrb	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	785a      	ldrb	r2, [r3, #1]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	3302      	adds	r3, #2
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	3303      	adds	r3, #3
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	021b      	lsls	r3, r3, #8
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	791a      	ldrb	r2, [r3, #4]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	795a      	ldrb	r2, [r3, #5]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	799a      	ldrb	r2, [r3, #6]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	79da      	ldrb	r2, [r3, #7]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	7a1a      	ldrb	r2, [r3, #8]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007f22:	88fb      	ldrh	r3, [r7, #6]
 8007f24:	2b09      	cmp	r3, #9
 8007f26:	d95f      	bls.n	8007fe8 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007f28:	2309      	movs	r3, #9
 8007f2a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f30:	e051      	b.n	8007fd6 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f32:	f107 0316 	add.w	r3, r7, #22
 8007f36:	4619      	mov	r1, r3
 8007f38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f3a:	f000 f8e8 	bl	800810e <USBH_GetNextDesc>
 8007f3e:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	785b      	ldrb	r3, [r3, #1]
 8007f44:	2b04      	cmp	r3, #4
 8007f46:	d146      	bne.n	8007fd6 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007f48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f4c:	221a      	movs	r2, #26
 8007f4e:	fb02 f303 	mul.w	r3, r2, r3
 8007f52:	3308      	adds	r3, #8
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	4413      	add	r3, r2
 8007f58:	3302      	adds	r3, #2
 8007f5a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8007f5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f5e:	69f8      	ldr	r0, [r7, #28]
 8007f60:	f000 f846 	bl	8007ff0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007f64:	2300      	movs	r3, #0
 8007f66:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f6e:	e022      	b.n	8007fb6 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8007f70:	f107 0316 	add.w	r3, r7, #22
 8007f74:	4619      	mov	r1, r3
 8007f76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f78:	f000 f8c9 	bl	800810e <USBH_GetNextDesc>
 8007f7c:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f80:	785b      	ldrb	r3, [r3, #1]
 8007f82:	2b05      	cmp	r3, #5
 8007f84:	d117      	bne.n	8007fb6 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007f86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f8a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007f8e:	3201      	adds	r2, #1
 8007f90:	00d2      	lsls	r2, r2, #3
 8007f92:	211a      	movs	r1, #26
 8007f94:	fb01 f303 	mul.w	r3, r1, r3
 8007f98:	4413      	add	r3, r2
 8007f9a:	3308      	adds	r3, #8
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8007fa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fa6:	69b8      	ldr	r0, [r7, #24]
 8007fa8:	f000 f851 	bl	800804e <USBH_ParseEPDesc>
            ep_ix++;
 8007fac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	791b      	ldrb	r3, [r3, #4]
 8007fba:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d204      	bcs.n	8007fcc <USBH_ParseCfgDesc+0x120>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	885a      	ldrh	r2, [r3, #2]
 8007fc6:	8afb      	ldrh	r3, [r7, #22]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d8d1      	bhi.n	8007f70 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007fcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007fd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d804      	bhi.n	8007fe8 <USBH_ParseCfgDesc+0x13c>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	885a      	ldrh	r2, [r3, #2]
 8007fe2:	8afb      	ldrh	r3, [r7, #22]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d8a4      	bhi.n	8007f32 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007fe8:	bf00      	nop
 8007fea:	3728      	adds	r7, #40	; 0x28
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	781a      	ldrb	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	785a      	ldrb	r2, [r3, #1]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	789a      	ldrb	r2, [r3, #2]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	78da      	ldrb	r2, [r3, #3]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	791a      	ldrb	r2, [r3, #4]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	795a      	ldrb	r2, [r3, #5]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	799a      	ldrb	r2, [r3, #6]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	79da      	ldrb	r2, [r3, #7]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	7a1a      	ldrb	r2, [r3, #8]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	721a      	strb	r2, [r3, #8]
}
 8008042:	bf00      	nop
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800804e:	b480      	push	{r7}
 8008050:	b083      	sub	sp, #12
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	781a      	ldrb	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	785a      	ldrb	r2, [r3, #1]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	789a      	ldrb	r2, [r3, #2]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	78da      	ldrb	r2, [r3, #3]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	3304      	adds	r3, #4
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	b29a      	uxth	r2, r3
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	3305      	adds	r3, #5
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	b29b      	uxth	r3, r3
 8008088:	021b      	lsls	r3, r3, #8
 800808a:	b29b      	uxth	r3, r3
 800808c:	4313      	orrs	r3, r2
 800808e:	b29a      	uxth	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	799a      	ldrb	r2, [r3, #6]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	719a      	strb	r2, [r3, #6]
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b087      	sub	sp, #28
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	4613      	mov	r3, r2
 80080b4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	3301      	adds	r3, #1
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b03      	cmp	r3, #3
 80080be:	d120      	bne.n	8008102 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	1e9a      	subs	r2, r3, #2
 80080c6:	88fb      	ldrh	r3, [r7, #6]
 80080c8:	4293      	cmp	r3, r2
 80080ca:	bf28      	it	cs
 80080cc:	4613      	movcs	r3, r2
 80080ce:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	3302      	adds	r3, #2
 80080d4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80080d6:	2300      	movs	r3, #0
 80080d8:	82fb      	strh	r3, [r7, #22]
 80080da:	e00b      	b.n	80080f4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80080dc:	8afb      	ldrh	r3, [r7, #22]
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	4413      	add	r3, r2
 80080e2:	781a      	ldrb	r2, [r3, #0]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	3301      	adds	r3, #1
 80080ec:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80080ee:	8afb      	ldrh	r3, [r7, #22]
 80080f0:	3302      	adds	r3, #2
 80080f2:	82fb      	strh	r3, [r7, #22]
 80080f4:	8afa      	ldrh	r2, [r7, #22]
 80080f6:	8abb      	ldrh	r3, [r7, #20]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d3ef      	bcc.n	80080dc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2200      	movs	r2, #0
 8008100:	701a      	strb	r2, [r3, #0]
  }
}
 8008102:	bf00      	nop
 8008104:	371c      	adds	r7, #28
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800810e:	b480      	push	{r7}
 8008110:	b085      	sub	sp, #20
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	881a      	ldrh	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	b29b      	uxth	r3, r3
 8008122:	4413      	add	r3, r2
 8008124:	b29a      	uxth	r2, r3
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4413      	add	r3, r2
 8008134:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8008136:	68fb      	ldr	r3, [r7, #12]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b086      	sub	sp, #24
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	4613      	mov	r3, r2
 8008150:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008152:	2301      	movs	r3, #1
 8008154:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	789b      	ldrb	r3, [r3, #2]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d002      	beq.n	8008164 <USBH_CtlReq+0x20>
 800815e:	2b02      	cmp	r3, #2
 8008160:	d00f      	beq.n	8008182 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8008162:	e034      	b.n	80081ce <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	88fa      	ldrh	r2, [r7, #6]
 800816e:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2201      	movs	r2, #1
 8008174:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2202      	movs	r2, #2
 800817a:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800817c:	2301      	movs	r3, #1
 800817e:	75fb      	strb	r3, [r7, #23]
    break;
 8008180:	e025      	b.n	80081ce <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f000 f828 	bl	80081d8 <USBH_HandleControl>
 8008188:	4603      	mov	r3, r0
 800818a:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800818c:	7dfb      	ldrb	r3, [r7, #23]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d108      	bne.n	80081a4 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2201      	movs	r2, #1
 8008196:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	75fb      	strb	r3, [r7, #23]
    break;
 80081a2:	e013      	b.n	80081cc <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
 80081a6:	2b03      	cmp	r3, #3
 80081a8:	d108      	bne.n	80081bc <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2201      	movs	r2, #1
 80081ae:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80081b6:	2303      	movs	r3, #3
 80081b8:	75fb      	strb	r3, [r7, #23]
    break;
 80081ba:	e007      	b.n	80081cc <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 80081bc:	7dfb      	ldrb	r3, [r7, #23]
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d104      	bne.n	80081cc <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2201      	movs	r2, #1
 80081c6:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80081c8:	2302      	movs	r3, #2
 80081ca:	75fb      	strb	r3, [r7, #23]
    break;
 80081cc:	bf00      	nop
  }
  return status;
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af02      	add	r7, sp, #8
 80081de:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80081e0:	2301      	movs	r3, #1
 80081e2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80081e4:	2300      	movs	r3, #0
 80081e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	7e1b      	ldrb	r3, [r3, #24]
 80081ec:	3b01      	subs	r3, #1
 80081ee:	2b0a      	cmp	r3, #10
 80081f0:	f200 814c 	bhi.w	800848c <USBH_HandleControl+0x2b4>
 80081f4:	a201      	add	r2, pc, #4	; (adr r2, 80081fc <USBH_HandleControl+0x24>)
 80081f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fa:	bf00      	nop
 80081fc:	08008229 	.word	0x08008229
 8008200:	08008243 	.word	0x08008243
 8008204:	080082ad 	.word	0x080082ad
 8008208:	080082d3 	.word	0x080082d3
 800820c:	0800830b 	.word	0x0800830b
 8008210:	08008337 	.word	0x08008337
 8008214:	08008389 	.word	0x08008389
 8008218:	080083ab 	.word	0x080083ab
 800821c:	080083e7 	.word	0x080083e7
 8008220:	0800840f 	.word	0x0800840f
 8008224:	0800844d 	.word	0x0800844d
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f103 0110 	add.w	r1, r3, #16
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	795b      	ldrb	r3, [r3, #5]
 8008232:	461a      	mov	r2, r3
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f939 	bl	80084ac <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2202      	movs	r2, #2
 800823e:	761a      	strb	r2, [r3, #24]
    break;
 8008240:	e12f      	b.n	80084a2 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	795b      	ldrb	r3, [r3, #5]
 8008246:	4619      	mov	r1, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f001 fae3 	bl	8009814 <USBH_LL_GetURBState>
 800824e:	4603      	mov	r3, r0
 8008250:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8008252:	7bbb      	ldrb	r3, [r7, #14]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d11e      	bne.n	8008296 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	7c1b      	ldrb	r3, [r3, #16]
 800825c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008260:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	8adb      	ldrh	r3, [r3, #22]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00a      	beq.n	8008280 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800826a:	7b7b      	ldrb	r3, [r7, #13]
 800826c:	2b80      	cmp	r3, #128	; 0x80
 800826e:	d103      	bne.n	8008278 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2203      	movs	r2, #3
 8008274:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008276:	e10b      	b.n	8008490 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2205      	movs	r2, #5
 800827c:	761a      	strb	r2, [r3, #24]
    break;
 800827e:	e107      	b.n	8008490 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8008280:	7b7b      	ldrb	r3, [r7, #13]
 8008282:	2b80      	cmp	r3, #128	; 0x80
 8008284:	d103      	bne.n	800828e <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2209      	movs	r2, #9
 800828a:	761a      	strb	r2, [r3, #24]
    break;
 800828c:	e100      	b.n	8008490 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2207      	movs	r2, #7
 8008292:	761a      	strb	r2, [r3, #24]
    break;
 8008294:	e0fc      	b.n	8008490 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	2b04      	cmp	r3, #4
 800829a:	d003      	beq.n	80082a4 <USBH_HandleControl+0xcc>
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	2b02      	cmp	r3, #2
 80082a0:	f040 80f6 	bne.w	8008490 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	220b      	movs	r2, #11
 80082a8:	761a      	strb	r2, [r3, #24]
    break;
 80082aa:	e0f1      	b.n	8008490 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6899      	ldr	r1, [r3, #8]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	899a      	ldrh	r2, [r3, #12]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	791b      	ldrb	r3, [r3, #4]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f930 	bl	800852a <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2204      	movs	r2, #4
 80082ce:	761a      	strb	r2, [r3, #24]
    break;
 80082d0:	e0e7      	b.n	80084a2 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	791b      	ldrb	r3, [r3, #4]
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f001 fa9b 	bl	8009814 <USBH_LL_GetURBState>
 80082de:	4603      	mov	r3, r0
 80082e0:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 80082e2:	7bbb      	ldrb	r3, [r7, #14]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d102      	bne.n	80082ee <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2209      	movs	r2, #9
 80082ec:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
 80082f0:	2b05      	cmp	r3, #5
 80082f2:	d102      	bne.n	80082fa <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 80082f4:	2303      	movs	r3, #3
 80082f6:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80082f8:	e0cc      	b.n	8008494 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 80082fa:	7bbb      	ldrb	r3, [r7, #14]
 80082fc:	2b04      	cmp	r3, #4
 80082fe:	f040 80c9 	bne.w	8008494 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	220b      	movs	r2, #11
 8008306:	761a      	strb	r2, [r3, #24]
    break;
 8008308:	e0c4      	b.n	8008494 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6899      	ldr	r1, [r3, #8]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	899a      	ldrh	r2, [r3, #12]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	7958      	ldrb	r0, [r3, #5]
 8008316:	2301      	movs	r3, #1
 8008318:	9300      	str	r3, [sp, #0]
 800831a:	4603      	mov	r3, r0
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f8df 	bl	80084e0 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008328:	b29a      	uxth	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2206      	movs	r2, #6
 8008332:	761a      	strb	r2, [r3, #24]
    break;
 8008334:	e0b5      	b.n	80084a2 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	795b      	ldrb	r3, [r3, #5]
 800833a:	4619      	mov	r1, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f001 fa69 	bl	8009814 <USBH_LL_GetURBState>
 8008342:	4603      	mov	r3, r0
 8008344:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8008346:	7bbb      	ldrb	r3, [r7, #14]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d103      	bne.n	8008354 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2207      	movs	r2, #7
 8008350:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008352:	e0a1      	b.n	8008498 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8008354:	7bbb      	ldrb	r3, [r7, #14]
 8008356:	2b05      	cmp	r3, #5
 8008358:	d105      	bne.n	8008366 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	220c      	movs	r2, #12
 800835e:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8008360:	2303      	movs	r3, #3
 8008362:	73fb      	strb	r3, [r7, #15]
    break;
 8008364:	e098      	b.n	8008498 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008366:	7bbb      	ldrb	r3, [r7, #14]
 8008368:	2b02      	cmp	r3, #2
 800836a:	d103      	bne.n	8008374 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2205      	movs	r2, #5
 8008370:	761a      	strb	r2, [r3, #24]
    break;
 8008372:	e091      	b.n	8008498 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8008374:	7bbb      	ldrb	r3, [r7, #14]
 8008376:	2b04      	cmp	r3, #4
 8008378:	f040 808e 	bne.w	8008498 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	220b      	movs	r2, #11
 8008380:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8008382:	2302      	movs	r3, #2
 8008384:	73fb      	strb	r3, [r7, #15]
    break;
 8008386:	e087      	b.n	8008498 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	791b      	ldrb	r3, [r3, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	2100      	movs	r1, #0
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f8ca 	bl	800852a <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800839c:	b29a      	uxth	r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2208      	movs	r2, #8
 80083a6:	761a      	strb	r2, [r3, #24]

    break;
 80083a8:	e07b      	b.n	80084a2 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	791b      	ldrb	r3, [r3, #4]
 80083ae:	4619      	mov	r1, r3
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f001 fa2f 	bl	8009814 <USBH_LL_GetURBState>
 80083b6:	4603      	mov	r3, r0
 80083b8:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 80083ba:	7bbb      	ldrb	r3, [r7, #14]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d105      	bne.n	80083cc <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	220d      	movs	r2, #13
 80083c4:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80083ca:	e067      	b.n	800849c <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	d103      	bne.n	80083da <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	220b      	movs	r2, #11
 80083d6:	761a      	strb	r2, [r3, #24]
    break;
 80083d8:	e060      	b.n	800849c <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 80083da:	7bbb      	ldrb	r3, [r7, #14]
 80083dc:	2b05      	cmp	r3, #5
 80083de:	d15d      	bne.n	800849c <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 80083e0:	2303      	movs	r3, #3
 80083e2:	73fb      	strb	r3, [r7, #15]
    break;
 80083e4:	e05a      	b.n	800849c <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	795a      	ldrb	r2, [r3, #5]
 80083ea:	2301      	movs	r3, #1
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	4613      	mov	r3, r2
 80083f0:	2200      	movs	r2, #0
 80083f2:	2100      	movs	r1, #0
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f873 	bl	80084e0 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008400:	b29a      	uxth	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	220a      	movs	r2, #10
 800840a:	761a      	strb	r2, [r3, #24]
    break;
 800840c:	e049      	b.n	80084a2 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	795b      	ldrb	r3, [r3, #5]
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f001 f9fd 	bl	8009814 <USBH_LL_GetURBState>
 800841a:	4603      	mov	r3, r0
 800841c:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800841e:	7bbb      	ldrb	r3, [r7, #14]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d105      	bne.n	8008430 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8008424:	2300      	movs	r3, #0
 8008426:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	220d      	movs	r2, #13
 800842c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800842e:	e037      	b.n	80084a0 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008430:	7bbb      	ldrb	r3, [r7, #14]
 8008432:	2b02      	cmp	r3, #2
 8008434:	d103      	bne.n	800843e <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2209      	movs	r2, #9
 800843a:	761a      	strb	r2, [r3, #24]
    break;
 800843c:	e030      	b.n	80084a0 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800843e:	7bbb      	ldrb	r3, [r7, #14]
 8008440:	2b04      	cmp	r3, #4
 8008442:	d12d      	bne.n	80084a0 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	220b      	movs	r2, #11
 8008448:	761a      	strb	r2, [r3, #24]
    break;
 800844a:	e029      	b.n	80084a0 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	7e5b      	ldrb	r3, [r3, #25]
 8008450:	3301      	adds	r3, #1
 8008452:	b2da      	uxtb	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	765a      	strb	r2, [r3, #25]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	7e5b      	ldrb	r3, [r3, #25]
 800845c:	2b02      	cmp	r3, #2
 800845e:	d809      	bhi.n	8008474 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f001 f8ea 	bl	800963a <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2201      	movs	r2, #1
 800846a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8008472:	e016      	b.n	80084a2 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800847a:	2106      	movs	r1, #6
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8008486:	2302      	movs	r3, #2
 8008488:	73fb      	strb	r3, [r7, #15]
    break;
 800848a:	e00a      	b.n	80084a2 <USBH_HandleControl+0x2ca>

  default:
    break;
 800848c:	bf00      	nop
 800848e:	e008      	b.n	80084a2 <USBH_HandleControl+0x2ca>
    break;
 8008490:	bf00      	nop
 8008492:	e006      	b.n	80084a2 <USBH_HandleControl+0x2ca>
    break;
 8008494:	bf00      	nop
 8008496:	e004      	b.n	80084a2 <USBH_HandleControl+0x2ca>
    break;
 8008498:	bf00      	nop
 800849a:	e002      	b.n	80084a2 <USBH_HandleControl+0x2ca>
    break;
 800849c:	bf00      	nop
 800849e:	e000      	b.n	80084a2 <USBH_HandleControl+0x2ca>
    break;
 80084a0:	bf00      	nop
  }
  return status;
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b088      	sub	sp, #32
 80084b0:	af04      	add	r7, sp, #16
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	4613      	mov	r3, r2
 80084b8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80084ba:	79f9      	ldrb	r1, [r7, #7]
 80084bc:	2300      	movs	r3, #0
 80084be:	9303      	str	r3, [sp, #12]
 80084c0:	2308      	movs	r3, #8
 80084c2:	9302      	str	r3, [sp, #8]
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	9301      	str	r3, [sp, #4]
 80084c8:	2300      	movs	r3, #0
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	2300      	movs	r3, #0
 80084ce:	2200      	movs	r2, #0
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f001 f96e 	bl	80097b2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b088      	sub	sp, #32
 80084e4:	af04      	add	r7, sp, #16
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	4611      	mov	r1, r2
 80084ec:	461a      	mov	r2, r3
 80084ee:	460b      	mov	r3, r1
 80084f0:	80fb      	strh	r3, [r7, #6]
 80084f2:	4613      	mov	r3, r2
 80084f4:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008500:	2300      	movs	r3, #0
 8008502:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008504:	7979      	ldrb	r1, [r7, #5]
 8008506:	7e3b      	ldrb	r3, [r7, #24]
 8008508:	9303      	str	r3, [sp, #12]
 800850a:	88fb      	ldrh	r3, [r7, #6]
 800850c:	9302      	str	r3, [sp, #8]
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	9301      	str	r3, [sp, #4]
 8008512:	2301      	movs	r3, #1
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	2300      	movs	r3, #0
 8008518:	2200      	movs	r2, #0
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f001 f949 	bl	80097b2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b088      	sub	sp, #32
 800852e:	af04      	add	r7, sp, #16
 8008530:	60f8      	str	r0, [r7, #12]
 8008532:	60b9      	str	r1, [r7, #8]
 8008534:	4611      	mov	r1, r2
 8008536:	461a      	mov	r2, r3
 8008538:	460b      	mov	r3, r1
 800853a:	80fb      	strh	r3, [r7, #6]
 800853c:	4613      	mov	r3, r2
 800853e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008540:	7979      	ldrb	r1, [r7, #5]
 8008542:	2300      	movs	r3, #0
 8008544:	9303      	str	r3, [sp, #12]
 8008546:	88fb      	ldrh	r3, [r7, #6]
 8008548:	9302      	str	r3, [sp, #8]
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	9301      	str	r3, [sp, #4]
 800854e:	2301      	movs	r3, #1
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	2300      	movs	r3, #0
 8008554:	2201      	movs	r2, #1
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f001 f92b 	bl	80097b2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800855c:	2300      	movs	r3, #0

}
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b088      	sub	sp, #32
 800856a:	af04      	add	r7, sp, #16
 800856c:	60f8      	str	r0, [r7, #12]
 800856e:	60b9      	str	r1, [r7, #8]
 8008570:	4611      	mov	r1, r2
 8008572:	461a      	mov	r2, r3
 8008574:	460b      	mov	r3, r1
 8008576:	80fb      	strh	r3, [r7, #6]
 8008578:	4613      	mov	r3, r2
 800857a:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008582:	2b00      	cmp	r3, #0
 8008584:	d001      	beq.n	800858a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008586:	2300      	movs	r3, #0
 8008588:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800858a:	7979      	ldrb	r1, [r7, #5]
 800858c:	7e3b      	ldrb	r3, [r7, #24]
 800858e:	9303      	str	r3, [sp, #12]
 8008590:	88fb      	ldrh	r3, [r7, #6]
 8008592:	9302      	str	r3, [sp, #8]
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	9301      	str	r3, [sp, #4]
 8008598:	2301      	movs	r3, #1
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	2302      	movs	r3, #2
 800859e:	2200      	movs	r2, #0
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f001 f906 	bl	80097b2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b088      	sub	sp, #32
 80085b4:	af04      	add	r7, sp, #16
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	4611      	mov	r1, r2
 80085bc:	461a      	mov	r2, r3
 80085be:	460b      	mov	r3, r1
 80085c0:	80fb      	strh	r3, [r7, #6]
 80085c2:	4613      	mov	r3, r2
 80085c4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80085c6:	7979      	ldrb	r1, [r7, #5]
 80085c8:	2300      	movs	r3, #0
 80085ca:	9303      	str	r3, [sp, #12]
 80085cc:	88fb      	ldrh	r3, [r7, #6]
 80085ce:	9302      	str	r3, [sp, #8]
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	9301      	str	r3, [sp, #4]
 80085d4:	2301      	movs	r3, #1
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	2302      	movs	r3, #2
 80085da:	2201      	movs	r2, #1
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f001 f8e8 	bl	80097b2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b086      	sub	sp, #24
 80085f0:	af04      	add	r7, sp, #16
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	4608      	mov	r0, r1
 80085f6:	4611      	mov	r1, r2
 80085f8:	461a      	mov	r2, r3
 80085fa:	4603      	mov	r3, r0
 80085fc:	70fb      	strb	r3, [r7, #3]
 80085fe:	460b      	mov	r3, r1
 8008600:	70bb      	strb	r3, [r7, #2]
 8008602:	4613      	mov	r3, r2
 8008604:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8008606:	7878      	ldrb	r0, [r7, #1]
 8008608:	78ba      	ldrb	r2, [r7, #2]
 800860a:	78f9      	ldrb	r1, [r7, #3]
 800860c:	8b3b      	ldrh	r3, [r7, #24]
 800860e:	9302      	str	r3, [sp, #8]
 8008610:	7d3b      	ldrb	r3, [r7, #20]
 8008612:	9301      	str	r3, [sp, #4]
 8008614:	7c3b      	ldrb	r3, [r7, #16]
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	4603      	mov	r3, r0
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f001 f87b 	bl	8009716 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8008620:	2300      	movs	r3, #0

}
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b082      	sub	sp, #8
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
 8008632:	460b      	mov	r3, r1
 8008634:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8008636:	78fb      	ldrb	r3, [r7, #3]
 8008638:	4619      	mov	r1, r3
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f001 f89a 	bl	8009774 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008640:	2300      	movs	r3, #0

}
 8008642:	4618      	mov	r0, r3
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b084      	sub	sp, #16
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
 8008652:	460b      	mov	r3, r1
 8008654:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f831 	bl	80086be <USBH_GetFreePipe>
 800865c:	4603      	mov	r3, r0
 800865e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008660:	89fb      	ldrh	r3, [r7, #14]
 8008662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008666:	4293      	cmp	r3, r2
 8008668:	d007      	beq.n	800867a <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800866a:	78fb      	ldrb	r3, [r7, #3]
 800866c:	89fa      	ldrh	r2, [r7, #14]
 800866e:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	32e0      	adds	r2, #224	; 0xe0
 8008676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800867a:	89fb      	ldrh	r3, [r7, #14]
 800867c:	b2db      	uxtb	r3, r3
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008686:	b480      	push	{r7}
 8008688:	b083      	sub	sp, #12
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	460b      	mov	r3, r1
 8008690:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8008692:	78fb      	ldrb	r3, [r7, #3]
 8008694:	2b0a      	cmp	r3, #10
 8008696:	d80b      	bhi.n	80086b0 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8008698:	78fa      	ldrb	r2, [r7, #3]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	32e0      	adds	r2, #224	; 0xe0
 800869e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a2:	78fa      	ldrb	r2, [r7, #3]
 80086a4:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	32e0      	adds	r2, #224	; 0xe0
 80086ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80086be:	b480      	push	{r7}
 80086c0:	b085      	sub	sp, #20
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80086c6:	2300      	movs	r3, #0
 80086c8:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80086ca:	2300      	movs	r3, #0
 80086cc:	73fb      	strb	r3, [r7, #15]
 80086ce:	e00e      	b.n	80086ee <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80086d0:	7bfa      	ldrb	r2, [r7, #15]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	32e0      	adds	r2, #224	; 0xe0
 80086d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d102      	bne.n	80086e8 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	e007      	b.n	80086f8 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 80086e8:	7bfb      	ldrb	r3, [r7, #15]
 80086ea:	3301      	adds	r3, #1
 80086ec:	73fb      	strb	r3, [r7, #15]
 80086ee:	7bfb      	ldrb	r3, [r7, #15]
 80086f0:	2b0a      	cmp	r3, #10
 80086f2:	d9ed      	bls.n	80086d0 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 80086f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3714      	adds	r7, #20
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008704:	b5b0      	push	{r4, r5, r7, lr}
 8008706:	b08c      	sub	sp, #48	; 0x30
 8008708:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800870a:	f7f8 fb27 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800870e:	f000 f87b 	bl	8008808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008712:	f000 fa7f 	bl	8008c14 <MX_GPIO_Init>
  MX_I2C1_Init();
 8008716:	f000 f949 	bl	80089ac <MX_I2C1_Init>
  MX_I2S3_Init();
 800871a:	f000 f975 	bl	8008a08 <MX_I2S3_Init>
  MX_SPI1_Init();
 800871e:	f000 f9a3 	bl	8008a68 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8008722:	f000 fe1f 	bl	8009364 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8008726:	f000 f8ef 	bl	8008908 <MX_ADC1_Init>
  MX_TIM4_Init();
 800872a:	f000 f9d3 	bl	8008ad4 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800872e:	f000 fa47 	bl	8008bc0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8008732:	2108      	movs	r1, #8
 8008734:	482c      	ldr	r0, [pc, #176]	; (80087e8 <main+0xe4>)
 8008736:	f7fc fa85 	bl	8004c44 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800873a:	f000 fe39 	bl	80093b0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
	HAL_ADC_Start(&hadc1);
 800873e:	482b      	ldr	r0, [pc, #172]	; (80087ec <main+0xe8>)
 8008740:	f7f8 fbe4 	bl	8000f0c <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK)
 8008744:	492a      	ldr	r1, [pc, #168]	; (80087f0 <main+0xec>)
 8008746:	4829      	ldr	r0, [pc, #164]	; (80087ec <main+0xe8>)
 8008748:	f7f8 fca6 	bl	8001098 <HAL_ADC_PollForConversion>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d103      	bne.n	800875a <main+0x56>
               {
                   ADCValue = HAL_ADC_GetValue(&hadc1);
 8008752:	4826      	ldr	r0, [pc, #152]	; (80087ec <main+0xe8>)
 8008754:	f7f8 fd24 	bl	80011a0 <HAL_ADC_GetValue>
 8008758:	62f8      	str	r0, [r7, #44]	; 0x2c
               }
    char buffer[20];
    sprintf(buffer, "%d \r\n", ADCValue);
 800875a:	1d3b      	adds	r3, r7, #4
 800875c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800875e:	4925      	ldr	r1, [pc, #148]	; (80087f4 <main+0xf0>)
 8008760:	4618      	mov	r0, r3
 8008762:	f001 fa2b 	bl	8009bbc <siprintf>
    HAL_UART_Transmit(&huart2, &buffer, strlen(buffer), 1000000);
 8008766:	1d3b      	adds	r3, r7, #4
 8008768:	4618      	mov	r0, r3
 800876a:	f7f7 fd31 	bl	80001d0 <strlen>
 800876e:	4603      	mov	r3, r0
 8008770:	b29a      	uxth	r2, r3
 8008772:	1d39      	adds	r1, r7, #4
 8008774:	4b1e      	ldr	r3, [pc, #120]	; (80087f0 <main+0xec>)
 8008776:	4820      	ldr	r0, [pc, #128]	; (80087f8 <main+0xf4>)
 8008778:	f7fc ffc1 	bl	80056fe <HAL_UART_Transmit>
    int c = 1800 - ADCValue;
 800877c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877e:	f5c3 63e1 	rsb	r3, r3, #1800	; 0x708
 8008782:	62bb      	str	r3, [r7, #40]	; 0x28
    int p = 1800 - 100;
 8008784:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8008788:	627b      	str	r3, [r7, #36]	; 0x24
    double x = 1.0*c/p;
 800878a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800878c:	f7f7 feca 	bl	8000524 <__aeabi_i2d>
 8008790:	4604      	mov	r4, r0
 8008792:	460d      	mov	r5, r1
 8008794:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008796:	f7f7 fec5 	bl	8000524 <__aeabi_i2d>
 800879a:	4602      	mov	r2, r0
 800879c:	460b      	mov	r3, r1
 800879e:	4620      	mov	r0, r4
 80087a0:	4629      	mov	r1, r5
 80087a2:	f7f8 f853 	bl	800084c <__aeabi_ddiv>
 80087a6:	4603      	mov	r3, r0
 80087a8:	460c      	mov	r4, r1
 80087aa:	e9c7 3406 	strd	r3, r4, [r7, #24]
    TIM4->CCR3 = (1 - x) * 100;
 80087ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087b2:	f04f 0000 	mov.w	r0, #0
 80087b6:	4911      	ldr	r1, [pc, #68]	; (80087fc <main+0xf8>)
 80087b8:	f7f7 fd66 	bl	8000288 <__aeabi_dsub>
 80087bc:	4603      	mov	r3, r0
 80087be:	460c      	mov	r4, r1
 80087c0:	4618      	mov	r0, r3
 80087c2:	4621      	mov	r1, r4
 80087c4:	f04f 0200 	mov.w	r2, #0
 80087c8:	4b0d      	ldr	r3, [pc, #52]	; (8008800 <main+0xfc>)
 80087ca:	f7f7 ff15 	bl	80005f8 <__aeabi_dmul>
 80087ce:	4603      	mov	r3, r0
 80087d0:	460c      	mov	r4, r1
 80087d2:	461a      	mov	r2, r3
 80087d4:	4623      	mov	r3, r4
 80087d6:	4c0b      	ldr	r4, [pc, #44]	; (8008804 <main+0x100>)
 80087d8:	4610      	mov	r0, r2
 80087da:	4619      	mov	r1, r3
 80087dc:	f7f8 f91e 	bl	8000a1c <__aeabi_d2uiz>
 80087e0:	4603      	mov	r3, r0
 80087e2:	63e3      	str	r3, [r4, #60]	; 0x3c
  {
 80087e4:	e7a9      	b.n	800873a <main+0x36>
 80087e6:	bf00      	nop
 80087e8:	200000c4 	.word	0x200000c4
 80087ec:	20000158 	.word	0x20000158
 80087f0:	000f4240 	.word	0x000f4240
 80087f4:	0800a274 	.word	0x0800a274
 80087f8:	200001f8 	.word	0x200001f8
 80087fc:	3ff00000 	.word	0x3ff00000
 8008800:	40590000 	.word	0x40590000
 8008804:	40000800 	.word	0x40000800

08008808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b098      	sub	sp, #96	; 0x60
 800880c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800880e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008812:	2230      	movs	r2, #48	; 0x30
 8008814:	2100      	movs	r1, #0
 8008816:	4618      	mov	r0, r3
 8008818:	f001 f910 	bl	8009a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800881c:	f107 031c 	add.w	r3, r7, #28
 8008820:	2200      	movs	r2, #0
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	605a      	str	r2, [r3, #4]
 8008826:	609a      	str	r2, [r3, #8]
 8008828:	60da      	str	r2, [r3, #12]
 800882a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800882c:	f107 030c 	add.w	r3, r7, #12
 8008830:	2200      	movs	r2, #0
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	605a      	str	r2, [r3, #4]
 8008836:	609a      	str	r2, [r3, #8]
 8008838:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800883a:	2300      	movs	r3, #0
 800883c:	60bb      	str	r3, [r7, #8]
 800883e:	4b30      	ldr	r3, [pc, #192]	; (8008900 <SystemClock_Config+0xf8>)
 8008840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008842:	4a2f      	ldr	r2, [pc, #188]	; (8008900 <SystemClock_Config+0xf8>)
 8008844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008848:	6413      	str	r3, [r2, #64]	; 0x40
 800884a:	4b2d      	ldr	r3, [pc, #180]	; (8008900 <SystemClock_Config+0xf8>)
 800884c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008852:	60bb      	str	r3, [r7, #8]
 8008854:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008856:	2300      	movs	r3, #0
 8008858:	607b      	str	r3, [r7, #4]
 800885a:	4b2a      	ldr	r3, [pc, #168]	; (8008904 <SystemClock_Config+0xfc>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a29      	ldr	r2, [pc, #164]	; (8008904 <SystemClock_Config+0xfc>)
 8008860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008864:	6013      	str	r3, [r2, #0]
 8008866:	4b27      	ldr	r3, [pc, #156]	; (8008904 <SystemClock_Config+0xfc>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800886e:	607b      	str	r3, [r7, #4]
 8008870:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008872:	2301      	movs	r3, #1
 8008874:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008876:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800887a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800887c:	2302      	movs	r3, #2
 800887e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008880:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008884:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008886:	2304      	movs	r3, #4
 8008888:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 800888a:	2360      	movs	r3, #96	; 0x60
 800888c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800888e:	2306      	movs	r3, #6
 8008890:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8008892:	2304      	movs	r3, #4
 8008894:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008896:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800889a:	4618      	mov	r0, r3
 800889c:	f7fb fba0 	bl	8003fe0 <HAL_RCC_OscConfig>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d001      	beq.n	80088aa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80088a6:	f000 fab3 	bl	8008e10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80088aa:	230f      	movs	r3, #15
 80088ac:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80088ae:	2302      	movs	r3, #2
 80088b0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80088b2:	2300      	movs	r3, #0
 80088b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80088b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80088ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80088bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088c0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80088c2:	f107 031c 	add.w	r3, r7, #28
 80088c6:	2101      	movs	r1, #1
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7fb fdcb 	bl	8004464 <HAL_RCC_ClockConfig>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d001      	beq.n	80088d8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80088d4:	f000 fa9c 	bl	8008e10 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80088d8:	2301      	movs	r3, #1
 80088da:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80088dc:	2332      	movs	r3, #50	; 0x32
 80088de:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80088e0:	2302      	movs	r3, #2
 80088e2:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80088e4:	f107 030c 	add.w	r3, r7, #12
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7fb ffa9 	bl	8004840 <HAL_RCCEx_PeriphCLKConfig>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d001      	beq.n	80088f8 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80088f4:	f000 fa8c 	bl	8008e10 <Error_Handler>
  }
}
 80088f8:	bf00      	nop
 80088fa:	3760      	adds	r7, #96	; 0x60
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	40023800 	.word	0x40023800
 8008904:	40007000 	.word	0x40007000

08008908 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800890e:	463b      	mov	r3, r7
 8008910:	2200      	movs	r2, #0
 8008912:	601a      	str	r2, [r3, #0]
 8008914:	605a      	str	r2, [r3, #4]
 8008916:	609a      	str	r2, [r3, #8]
 8008918:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800891a:	4b21      	ldr	r3, [pc, #132]	; (80089a0 <MX_ADC1_Init+0x98>)
 800891c:	4a21      	ldr	r2, [pc, #132]	; (80089a4 <MX_ADC1_Init+0x9c>)
 800891e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8008920:	4b1f      	ldr	r3, [pc, #124]	; (80089a0 <MX_ADC1_Init+0x98>)
 8008922:	2200      	movs	r2, #0
 8008924:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008926:	4b1e      	ldr	r3, [pc, #120]	; (80089a0 <MX_ADC1_Init+0x98>)
 8008928:	2200      	movs	r2, #0
 800892a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800892c:	4b1c      	ldr	r3, [pc, #112]	; (80089a0 <MX_ADC1_Init+0x98>)
 800892e:	2200      	movs	r2, #0
 8008930:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8008932:	4b1b      	ldr	r3, [pc, #108]	; (80089a0 <MX_ADC1_Init+0x98>)
 8008934:	2200      	movs	r2, #0
 8008936:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008938:	4b19      	ldr	r3, [pc, #100]	; (80089a0 <MX_ADC1_Init+0x98>)
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008940:	4b17      	ldr	r3, [pc, #92]	; (80089a0 <MX_ADC1_Init+0x98>)
 8008942:	2200      	movs	r2, #0
 8008944:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008946:	4b16      	ldr	r3, [pc, #88]	; (80089a0 <MX_ADC1_Init+0x98>)
 8008948:	4a17      	ldr	r2, [pc, #92]	; (80089a8 <MX_ADC1_Init+0xa0>)
 800894a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800894c:	4b14      	ldr	r3, [pc, #80]	; (80089a0 <MX_ADC1_Init+0x98>)
 800894e:	2200      	movs	r2, #0
 8008950:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8008952:	4b13      	ldr	r3, [pc, #76]	; (80089a0 <MX_ADC1_Init+0x98>)
 8008954:	2201      	movs	r2, #1
 8008956:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8008958:	4b11      	ldr	r3, [pc, #68]	; (80089a0 <MX_ADC1_Init+0x98>)
 800895a:	2200      	movs	r2, #0
 800895c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008960:	4b0f      	ldr	r3, [pc, #60]	; (80089a0 <MX_ADC1_Init+0x98>)
 8008962:	2201      	movs	r2, #1
 8008964:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008966:	480e      	ldr	r0, [pc, #56]	; (80089a0 <MX_ADC1_Init+0x98>)
 8008968:	f7f8 fa8c 	bl	8000e84 <HAL_ADC_Init>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8008972:	f000 fa4d 	bl	8008e10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8008976:	2301      	movs	r3, #1
 8008978:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800897a:	2301      	movs	r3, #1
 800897c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800897e:	2300      	movs	r3, #0
 8008980:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008982:	463b      	mov	r3, r7
 8008984:	4619      	mov	r1, r3
 8008986:	4806      	ldr	r0, [pc, #24]	; (80089a0 <MX_ADC1_Init+0x98>)
 8008988:	f7f8 fc18 	bl	80011bc <HAL_ADC_ConfigChannel>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8008992:	f000 fa3d 	bl	8008e10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008996:	bf00      	nop
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	20000158 	.word	0x20000158
 80089a4:	40012000 	.word	0x40012000
 80089a8:	0f000001 	.word	0x0f000001

080089ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80089b0:	4b12      	ldr	r3, [pc, #72]	; (80089fc <MX_I2C1_Init+0x50>)
 80089b2:	4a13      	ldr	r2, [pc, #76]	; (8008a00 <MX_I2C1_Init+0x54>)
 80089b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80089b6:	4b11      	ldr	r3, [pc, #68]	; (80089fc <MX_I2C1_Init+0x50>)
 80089b8:	4a12      	ldr	r2, [pc, #72]	; (8008a04 <MX_I2C1_Init+0x58>)
 80089ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80089bc:	4b0f      	ldr	r3, [pc, #60]	; (80089fc <MX_I2C1_Init+0x50>)
 80089be:	2200      	movs	r2, #0
 80089c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80089c2:	4b0e      	ldr	r3, [pc, #56]	; (80089fc <MX_I2C1_Init+0x50>)
 80089c4:	2200      	movs	r2, #0
 80089c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80089c8:	4b0c      	ldr	r3, [pc, #48]	; (80089fc <MX_I2C1_Init+0x50>)
 80089ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80089ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80089d0:	4b0a      	ldr	r3, [pc, #40]	; (80089fc <MX_I2C1_Init+0x50>)
 80089d2:	2200      	movs	r2, #0
 80089d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80089d6:	4b09      	ldr	r3, [pc, #36]	; (80089fc <MX_I2C1_Init+0x50>)
 80089d8:	2200      	movs	r2, #0
 80089da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80089dc:	4b07      	ldr	r3, [pc, #28]	; (80089fc <MX_I2C1_Init+0x50>)
 80089de:	2200      	movs	r2, #0
 80089e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80089e2:	4b06      	ldr	r3, [pc, #24]	; (80089fc <MX_I2C1_Init+0x50>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80089e8:	4804      	ldr	r0, [pc, #16]	; (80089fc <MX_I2C1_Init+0x50>)
 80089ea:	f7fa fd31 	bl	8003450 <HAL_I2C_Init>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d001      	beq.n	80089f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80089f4:	f000 fa0c 	bl	8008e10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80089f8:	bf00      	nop
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	20000104 	.word	0x20000104
 8008a00:	40005400 	.word	0x40005400
 8008a04:	000186a0 	.word	0x000186a0

08008a08 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8008a0c:	4b13      	ldr	r3, [pc, #76]	; (8008a5c <MX_I2S3_Init+0x54>)
 8008a0e:	4a14      	ldr	r2, [pc, #80]	; (8008a60 <MX_I2S3_Init+0x58>)
 8008a10:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8008a12:	4b12      	ldr	r3, [pc, #72]	; (8008a5c <MX_I2S3_Init+0x54>)
 8008a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a18:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8008a1a:	4b10      	ldr	r3, [pc, #64]	; (8008a5c <MX_I2S3_Init+0x54>)
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8008a20:	4b0e      	ldr	r3, [pc, #56]	; (8008a5c <MX_I2S3_Init+0x54>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8008a26:	4b0d      	ldr	r3, [pc, #52]	; (8008a5c <MX_I2S3_Init+0x54>)
 8008a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a2c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8008a2e:	4b0b      	ldr	r3, [pc, #44]	; (8008a5c <MX_I2S3_Init+0x54>)
 8008a30:	4a0c      	ldr	r2, [pc, #48]	; (8008a64 <MX_I2S3_Init+0x5c>)
 8008a32:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8008a34:	4b09      	ldr	r3, [pc, #36]	; (8008a5c <MX_I2S3_Init+0x54>)
 8008a36:	2200      	movs	r2, #0
 8008a38:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8008a3a:	4b08      	ldr	r3, [pc, #32]	; (8008a5c <MX_I2S3_Init+0x54>)
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8008a40:	4b06      	ldr	r3, [pc, #24]	; (8008a5c <MX_I2S3_Init+0x54>)
 8008a42:	2200      	movs	r2, #0
 8008a44:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8008a46:	4805      	ldr	r0, [pc, #20]	; (8008a5c <MX_I2S3_Init+0x54>)
 8008a48:	f7fa fe2a 	bl	80036a0 <HAL_I2S_Init>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d001      	beq.n	8008a56 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8008a52:	f000 f9dd 	bl	8008e10 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8008a56:	bf00      	nop
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	20000238 	.word	0x20000238
 8008a60:	40003c00 	.word	0x40003c00
 8008a64:	00017700 	.word	0x00017700

08008a68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008a6c:	4b17      	ldr	r3, [pc, #92]	; (8008acc <MX_SPI1_Init+0x64>)
 8008a6e:	4a18      	ldr	r2, [pc, #96]	; (8008ad0 <MX_SPI1_Init+0x68>)
 8008a70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008a72:	4b16      	ldr	r3, [pc, #88]	; (8008acc <MX_SPI1_Init+0x64>)
 8008a74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008a78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008a7a:	4b14      	ldr	r3, [pc, #80]	; (8008acc <MX_SPI1_Init+0x64>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008a80:	4b12      	ldr	r3, [pc, #72]	; (8008acc <MX_SPI1_Init+0x64>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a86:	4b11      	ldr	r3, [pc, #68]	; (8008acc <MX_SPI1_Init+0x64>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008a8c:	4b0f      	ldr	r3, [pc, #60]	; (8008acc <MX_SPI1_Init+0x64>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008a92:	4b0e      	ldr	r3, [pc, #56]	; (8008acc <MX_SPI1_Init+0x64>)
 8008a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a9a:	4b0c      	ldr	r3, [pc, #48]	; (8008acc <MX_SPI1_Init+0x64>)
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008aa0:	4b0a      	ldr	r3, [pc, #40]	; (8008acc <MX_SPI1_Init+0x64>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008aa6:	4b09      	ldr	r3, [pc, #36]	; (8008acc <MX_SPI1_Init+0x64>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008aac:	4b07      	ldr	r3, [pc, #28]	; (8008acc <MX_SPI1_Init+0x64>)
 8008aae:	2200      	movs	r2, #0
 8008ab0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8008ab2:	4b06      	ldr	r3, [pc, #24]	; (8008acc <MX_SPI1_Init+0x64>)
 8008ab4:	220a      	movs	r2, #10
 8008ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008ab8:	4804      	ldr	r0, [pc, #16]	; (8008acc <MX_SPI1_Init+0x64>)
 8008aba:	f7fb ffff 	bl	8004abc <HAL_SPI_Init>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d001      	beq.n	8008ac8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8008ac4:	f000 f9a4 	bl	8008e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008ac8:	bf00      	nop
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	200001a0 	.word	0x200001a0
 8008ad0:	40013000 	.word	0x40013000

08008ad4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b08e      	sub	sp, #56	; 0x38
 8008ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008ada:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008ade:	2200      	movs	r2, #0
 8008ae0:	601a      	str	r2, [r3, #0]
 8008ae2:	605a      	str	r2, [r3, #4]
 8008ae4:	609a      	str	r2, [r3, #8]
 8008ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008ae8:	f107 0320 	add.w	r3, r7, #32
 8008aec:	2200      	movs	r2, #0
 8008aee:	601a      	str	r2, [r3, #0]
 8008af0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008af2:	1d3b      	adds	r3, r7, #4
 8008af4:	2200      	movs	r2, #0
 8008af6:	601a      	str	r2, [r3, #0]
 8008af8:	605a      	str	r2, [r3, #4]
 8008afa:	609a      	str	r2, [r3, #8]
 8008afc:	60da      	str	r2, [r3, #12]
 8008afe:	611a      	str	r2, [r3, #16]
 8008b00:	615a      	str	r2, [r3, #20]
 8008b02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8008b04:	4b2c      	ldr	r3, [pc, #176]	; (8008bb8 <MX_TIM4_Init+0xe4>)
 8008b06:	4a2d      	ldr	r2, [pc, #180]	; (8008bbc <MX_TIM4_Init+0xe8>)
 8008b08:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 160;
 8008b0a:	4b2b      	ldr	r3, [pc, #172]	; (8008bb8 <MX_TIM4_Init+0xe4>)
 8008b0c:	22a0      	movs	r2, #160	; 0xa0
 8008b0e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b10:	4b29      	ldr	r3, [pc, #164]	; (8008bb8 <MX_TIM4_Init+0xe4>)
 8008b12:	2200      	movs	r2, #0
 8008b14:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8008b16:	4b28      	ldr	r3, [pc, #160]	; (8008bb8 <MX_TIM4_Init+0xe4>)
 8008b18:	2264      	movs	r2, #100	; 0x64
 8008b1a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b1c:	4b26      	ldr	r3, [pc, #152]	; (8008bb8 <MX_TIM4_Init+0xe4>)
 8008b1e:	2200      	movs	r2, #0
 8008b20:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b22:	4b25      	ldr	r3, [pc, #148]	; (8008bb8 <MX_TIM4_Init+0xe4>)
 8008b24:	2200      	movs	r2, #0
 8008b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008b28:	4823      	ldr	r0, [pc, #140]	; (8008bb8 <MX_TIM4_Init+0xe4>)
 8008b2a:	f7fc f82b 	bl	8004b84 <HAL_TIM_Base_Init>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d001      	beq.n	8008b38 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8008b34:	f000 f96c 	bl	8008e10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008b3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008b42:	4619      	mov	r1, r3
 8008b44:	481c      	ldr	r0, [pc, #112]	; (8008bb8 <MX_TIM4_Init+0xe4>)
 8008b46:	f7fc f981 	bl	8004e4c <HAL_TIM_ConfigClockSource>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d001      	beq.n	8008b54 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8008b50:	f000 f95e 	bl	8008e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8008b54:	4818      	ldr	r0, [pc, #96]	; (8008bb8 <MX_TIM4_Init+0xe4>)
 8008b56:	f7fc f840 	bl	8004bda <HAL_TIM_PWM_Init>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8008b60:	f000 f956 	bl	8008e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008b64:	2300      	movs	r3, #0
 8008b66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008b6c:	f107 0320 	add.w	r3, r7, #32
 8008b70:	4619      	mov	r1, r3
 8008b72:	4811      	ldr	r0, [pc, #68]	; (8008bb8 <MX_TIM4_Init+0xe4>)
 8008b74:	f7fc fd31 	bl	80055da <HAL_TIMEx_MasterConfigSynchronization>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d001      	beq.n	8008b82 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8008b7e:	f000 f947 	bl	8008e10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008b82:	2360      	movs	r3, #96	; 0x60
 8008b84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008b92:	1d3b      	adds	r3, r7, #4
 8008b94:	2208      	movs	r2, #8
 8008b96:	4619      	mov	r1, r3
 8008b98:	4807      	ldr	r0, [pc, #28]	; (8008bb8 <MX_TIM4_Init+0xe4>)
 8008b9a:	f7fc f891 	bl	8004cc0 <HAL_TIM_PWM_ConfigChannel>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8008ba4:	f000 f934 	bl	8008e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8008ba8:	4803      	ldr	r0, [pc, #12]	; (8008bb8 <MX_TIM4_Init+0xe4>)
 8008baa:	f000 fabf 	bl	800912c <HAL_TIM_MspPostInit>

}
 8008bae:	bf00      	nop
 8008bb0:	3738      	adds	r7, #56	; 0x38
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	200000c4 	.word	0x200000c4
 8008bbc:	40000800 	.word	0x40000800

08008bc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008bc4:	4b11      	ldr	r3, [pc, #68]	; (8008c0c <MX_USART2_UART_Init+0x4c>)
 8008bc6:	4a12      	ldr	r2, [pc, #72]	; (8008c10 <MX_USART2_UART_Init+0x50>)
 8008bc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008bca:	4b10      	ldr	r3, [pc, #64]	; (8008c0c <MX_USART2_UART_Init+0x4c>)
 8008bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008bd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008bd2:	4b0e      	ldr	r3, [pc, #56]	; (8008c0c <MX_USART2_UART_Init+0x4c>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008bd8:	4b0c      	ldr	r3, [pc, #48]	; (8008c0c <MX_USART2_UART_Init+0x4c>)
 8008bda:	2200      	movs	r2, #0
 8008bdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008bde:	4b0b      	ldr	r3, [pc, #44]	; (8008c0c <MX_USART2_UART_Init+0x4c>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008be4:	4b09      	ldr	r3, [pc, #36]	; (8008c0c <MX_USART2_UART_Init+0x4c>)
 8008be6:	220c      	movs	r2, #12
 8008be8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008bea:	4b08      	ldr	r3, [pc, #32]	; (8008c0c <MX_USART2_UART_Init+0x4c>)
 8008bec:	2200      	movs	r2, #0
 8008bee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008bf0:	4b06      	ldr	r3, [pc, #24]	; (8008c0c <MX_USART2_UART_Init+0x4c>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008bf6:	4805      	ldr	r0, [pc, #20]	; (8008c0c <MX_USART2_UART_Init+0x4c>)
 8008bf8:	f7fc fd34 	bl	8005664 <HAL_UART_Init>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d001      	beq.n	8008c06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8008c02:	f000 f905 	bl	8008e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008c06:	bf00      	nop
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	200001f8 	.word	0x200001f8
 8008c10:	40004400 	.word	0x40004400

08008c14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b08c      	sub	sp, #48	; 0x30
 8008c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c1a:	f107 031c 	add.w	r3, r7, #28
 8008c1e:	2200      	movs	r2, #0
 8008c20:	601a      	str	r2, [r3, #0]
 8008c22:	605a      	str	r2, [r3, #4]
 8008c24:	609a      	str	r2, [r3, #8]
 8008c26:	60da      	str	r2, [r3, #12]
 8008c28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	61bb      	str	r3, [r7, #24]
 8008c2e:	4b71      	ldr	r3, [pc, #452]	; (8008df4 <MX_GPIO_Init+0x1e0>)
 8008c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c32:	4a70      	ldr	r2, [pc, #448]	; (8008df4 <MX_GPIO_Init+0x1e0>)
 8008c34:	f043 0310 	orr.w	r3, r3, #16
 8008c38:	6313      	str	r3, [r2, #48]	; 0x30
 8008c3a:	4b6e      	ldr	r3, [pc, #440]	; (8008df4 <MX_GPIO_Init+0x1e0>)
 8008c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3e:	f003 0310 	and.w	r3, r3, #16
 8008c42:	61bb      	str	r3, [r7, #24]
 8008c44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008c46:	2300      	movs	r3, #0
 8008c48:	617b      	str	r3, [r7, #20]
 8008c4a:	4b6a      	ldr	r3, [pc, #424]	; (8008df4 <MX_GPIO_Init+0x1e0>)
 8008c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c4e:	4a69      	ldr	r2, [pc, #420]	; (8008df4 <MX_GPIO_Init+0x1e0>)
 8008c50:	f043 0304 	orr.w	r3, r3, #4
 8008c54:	6313      	str	r3, [r2, #48]	; 0x30
 8008c56:	4b67      	ldr	r3, [pc, #412]	; (8008df4 <MX_GPIO_Init+0x1e0>)
 8008c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5a:	f003 0304 	and.w	r3, r3, #4
 8008c5e:	617b      	str	r3, [r7, #20]
 8008c60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008c62:	2300      	movs	r3, #0
 8008c64:	613b      	str	r3, [r7, #16]
 8008c66:	4b63      	ldr	r3, [pc, #396]	; (8008df4 <MX_GPIO_Init+0x1e0>)
 8008c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6a:	4a62      	ldr	r2, [pc, #392]	; (8008df4 <MX_GPIO_Init+0x1e0>)
 8008c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c70:	6313      	str	r3, [r2, #48]	; 0x30
 8008c72:	4b60      	ldr	r3, [pc, #384]	; (8008df4 <MX_GPIO_Init+0x1e0>)
 8008c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c7a:	613b      	str	r3, [r7, #16]
 8008c7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60fb      	str	r3, [r7, #12]
 8008c82:	4b5c      	ldr	r3, [pc, #368]	; (8008df4 <MX_GPIO_Init+0x1e0>)
 8008c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c86:	4a5b      	ldr	r2, [pc, #364]	; (8008df4 <MX_GPIO_Init+0x1e0>)
 8008c88:	f043 0301 	orr.w	r3, r3, #1
 8008c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8008c8e:	4b59      	ldr	r3, [pc, #356]	; (8008df4 <MX_GPIO_Init+0x1e0>)
 8008c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	60fb      	str	r3, [r7, #12]
 8008c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	60bb      	str	r3, [r7, #8]
 8008c9e:	4b55      	ldr	r3, [pc, #340]	; (8008df4 <MX_GPIO_Init+0x1e0>)
 8008ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca2:	4a54      	ldr	r2, [pc, #336]	; (8008df4 <MX_GPIO_Init+0x1e0>)
 8008ca4:	f043 0302 	orr.w	r3, r3, #2
 8008ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8008caa:	4b52      	ldr	r3, [pc, #328]	; (8008df4 <MX_GPIO_Init+0x1e0>)
 8008cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cae:	f003 0302 	and.w	r3, r3, #2
 8008cb2:	60bb      	str	r3, [r7, #8]
 8008cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	607b      	str	r3, [r7, #4]
 8008cba:	4b4e      	ldr	r3, [pc, #312]	; (8008df4 <MX_GPIO_Init+0x1e0>)
 8008cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cbe:	4a4d      	ldr	r2, [pc, #308]	; (8008df4 <MX_GPIO_Init+0x1e0>)
 8008cc0:	f043 0308 	orr.w	r3, r3, #8
 8008cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8008cc6:	4b4b      	ldr	r3, [pc, #300]	; (8008df4 <MX_GPIO_Init+0x1e0>)
 8008cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cca:	f003 0308 	and.w	r3, r3, #8
 8008cce:	607b      	str	r3, [r7, #4]
 8008cd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	2108      	movs	r1, #8
 8008cd6:	4848      	ldr	r0, [pc, #288]	; (8008df8 <MX_GPIO_Init+0x1e4>)
 8008cd8:	f7f8 ff3a 	bl	8001b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8008cdc:	2201      	movs	r2, #1
 8008cde:	2101      	movs	r1, #1
 8008ce0:	4846      	ldr	r0, [pc, #280]	; (8008dfc <MX_GPIO_Init+0x1e8>)
 8008ce2:	f7f8 ff35 	bl	8001b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f24b 0110 	movw	r1, #45072	; 0xb010
 8008cec:	4844      	ldr	r0, [pc, #272]	; (8008e00 <MX_GPIO_Init+0x1ec>)
 8008cee:	f7f8 ff2f 	bl	8001b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8008cf2:	2308      	movs	r3, #8
 8008cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8008d02:	f107 031c 	add.w	r3, r7, #28
 8008d06:	4619      	mov	r1, r3
 8008d08:	483b      	ldr	r0, [pc, #236]	; (8008df8 <MX_GPIO_Init+0x1e4>)
 8008d0a:	f7f8 fd87 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d12:	2301      	movs	r3, #1
 8008d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d16:	2300      	movs	r3, #0
 8008d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8008d1e:	f107 031c 	add.w	r3, r7, #28
 8008d22:	4619      	mov	r1, r3
 8008d24:	4835      	ldr	r0, [pc, #212]	; (8008dfc <MX_GPIO_Init+0x1e8>)
 8008d26:	f7f8 fd79 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8008d2a:	2308      	movs	r3, #8
 8008d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d2e:	2302      	movs	r3, #2
 8008d30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d32:	2300      	movs	r3, #0
 8008d34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d36:	2300      	movs	r3, #0
 8008d38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008d3a:	2305      	movs	r3, #5
 8008d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8008d3e:	f107 031c 	add.w	r3, r7, #28
 8008d42:	4619      	mov	r1, r3
 8008d44:	482d      	ldr	r0, [pc, #180]	; (8008dfc <MX_GPIO_Init+0x1e8>)
 8008d46:	f7f8 fd69 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008d4e:	4b2d      	ldr	r3, [pc, #180]	; (8008e04 <MX_GPIO_Init+0x1f0>)
 8008d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d52:	2300      	movs	r3, #0
 8008d54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008d56:	f107 031c 	add.w	r3, r7, #28
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	482a      	ldr	r0, [pc, #168]	; (8008e08 <MX_GPIO_Init+0x1f4>)
 8008d5e:	f7f8 fd5d 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8008d62:	2304      	movs	r3, #4
 8008d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d66:	2300      	movs	r3, #0
 8008d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8008d6e:	f107 031c 	add.w	r3, r7, #28
 8008d72:	4619      	mov	r1, r3
 8008d74:	4825      	ldr	r0, [pc, #148]	; (8008e0c <MX_GPIO_Init+0x1f8>)
 8008d76:	f7f8 fd51 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8008d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d80:	2302      	movs	r3, #2
 8008d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d84:	2300      	movs	r3, #0
 8008d86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008d8c:	2305      	movs	r3, #5
 8008d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8008d90:	f107 031c 	add.w	r3, r7, #28
 8008d94:	4619      	mov	r1, r3
 8008d96:	481d      	ldr	r0, [pc, #116]	; (8008e0c <MX_GPIO_Init+0x1f8>)
 8008d98:	f7f8 fd40 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD6_Pin|Audio_RST_Pin;
 8008d9c:	f24b 0310 	movw	r3, #45072	; 0xb010
 8008da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008da2:	2301      	movs	r3, #1
 8008da4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008da6:	2300      	movs	r3, #0
 8008da8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008daa:	2300      	movs	r3, #0
 8008dac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008dae:	f107 031c 	add.w	r3, r7, #28
 8008db2:	4619      	mov	r1, r3
 8008db4:	4812      	ldr	r0, [pc, #72]	; (8008e00 <MX_GPIO_Init+0x1ec>)
 8008db6:	f7f8 fd31 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8008dba:	2320      	movs	r3, #32
 8008dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8008dc6:	f107 031c 	add.w	r3, r7, #28
 8008dca:	4619      	mov	r1, r3
 8008dcc:	480c      	ldr	r0, [pc, #48]	; (8008e00 <MX_GPIO_Init+0x1ec>)
 8008dce:	f7f8 fd25 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008dd6:	4b0b      	ldr	r3, [pc, #44]	; (8008e04 <MX_GPIO_Init+0x1f0>)
 8008dd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8008dde:	f107 031c 	add.w	r3, r7, #28
 8008de2:	4619      	mov	r1, r3
 8008de4:	4804      	ldr	r0, [pc, #16]	; (8008df8 <MX_GPIO_Init+0x1e4>)
 8008de6:	f7f8 fd19 	bl	800181c <HAL_GPIO_Init>

}
 8008dea:	bf00      	nop
 8008dec:	3730      	adds	r7, #48	; 0x30
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	40023800 	.word	0x40023800
 8008df8:	40021000 	.word	0x40021000
 8008dfc:	40020800 	.word	0x40020800
 8008e00:	40020c00 	.word	0x40020c00
 8008e04:	10120000 	.word	0x10120000
 8008e08:	40020000 	.word	0x40020000
 8008e0c:	40020400 	.word	0x40020400

08008e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008e10:	b480      	push	{r7}
 8008e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008e14:	bf00      	nop
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
	...

08008e20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e26:	2300      	movs	r3, #0
 8008e28:	607b      	str	r3, [r7, #4]
 8008e2a:	4b10      	ldr	r3, [pc, #64]	; (8008e6c <HAL_MspInit+0x4c>)
 8008e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e2e:	4a0f      	ldr	r2, [pc, #60]	; (8008e6c <HAL_MspInit+0x4c>)
 8008e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e34:	6453      	str	r3, [r2, #68]	; 0x44
 8008e36:	4b0d      	ldr	r3, [pc, #52]	; (8008e6c <HAL_MspInit+0x4c>)
 8008e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e3e:	607b      	str	r3, [r7, #4]
 8008e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008e42:	2300      	movs	r3, #0
 8008e44:	603b      	str	r3, [r7, #0]
 8008e46:	4b09      	ldr	r3, [pc, #36]	; (8008e6c <HAL_MspInit+0x4c>)
 8008e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4a:	4a08      	ldr	r2, [pc, #32]	; (8008e6c <HAL_MspInit+0x4c>)
 8008e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e50:	6413      	str	r3, [r2, #64]	; 0x40
 8008e52:	4b06      	ldr	r3, [pc, #24]	; (8008e6c <HAL_MspInit+0x4c>)
 8008e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e5a:	603b      	str	r3, [r7, #0]
 8008e5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8008e5e:	2007      	movs	r0, #7
 8008e60:	f7f8 fc9a 	bl	8001798 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008e64:	bf00      	nop
 8008e66:	3708      	adds	r7, #8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	40023800 	.word	0x40023800

08008e70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b08a      	sub	sp, #40	; 0x28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e78:	f107 0314 	add.w	r3, r7, #20
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	601a      	str	r2, [r3, #0]
 8008e80:	605a      	str	r2, [r3, #4]
 8008e82:	609a      	str	r2, [r3, #8]
 8008e84:	60da      	str	r2, [r3, #12]
 8008e86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a17      	ldr	r2, [pc, #92]	; (8008eec <HAL_ADC_MspInit+0x7c>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d127      	bne.n	8008ee2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008e92:	2300      	movs	r3, #0
 8008e94:	613b      	str	r3, [r7, #16]
 8008e96:	4b16      	ldr	r3, [pc, #88]	; (8008ef0 <HAL_ADC_MspInit+0x80>)
 8008e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e9a:	4a15      	ldr	r2, [pc, #84]	; (8008ef0 <HAL_ADC_MspInit+0x80>)
 8008e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8008ea2:	4b13      	ldr	r3, [pc, #76]	; (8008ef0 <HAL_ADC_MspInit+0x80>)
 8008ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eaa:	613b      	str	r3, [r7, #16]
 8008eac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eae:	2300      	movs	r3, #0
 8008eb0:	60fb      	str	r3, [r7, #12]
 8008eb2:	4b0f      	ldr	r3, [pc, #60]	; (8008ef0 <HAL_ADC_MspInit+0x80>)
 8008eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb6:	4a0e      	ldr	r2, [pc, #56]	; (8008ef0 <HAL_ADC_MspInit+0x80>)
 8008eb8:	f043 0301 	orr.w	r3, r3, #1
 8008ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8008ebe:	4b0c      	ldr	r3, [pc, #48]	; (8008ef0 <HAL_ADC_MspInit+0x80>)
 8008ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	60fb      	str	r3, [r7, #12]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8008eca:	2302      	movs	r3, #2
 8008ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ed6:	f107 0314 	add.w	r3, r7, #20
 8008eda:	4619      	mov	r1, r3
 8008edc:	4805      	ldr	r0, [pc, #20]	; (8008ef4 <HAL_ADC_MspInit+0x84>)
 8008ede:	f7f8 fc9d 	bl	800181c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008ee2:	bf00      	nop
 8008ee4:	3728      	adds	r7, #40	; 0x28
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	40012000 	.word	0x40012000
 8008ef0:	40023800 	.word	0x40023800
 8008ef4:	40020000 	.word	0x40020000

08008ef8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b08a      	sub	sp, #40	; 0x28
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f00:	f107 0314 	add.w	r3, r7, #20
 8008f04:	2200      	movs	r2, #0
 8008f06:	601a      	str	r2, [r3, #0]
 8008f08:	605a      	str	r2, [r3, #4]
 8008f0a:	609a      	str	r2, [r3, #8]
 8008f0c:	60da      	str	r2, [r3, #12]
 8008f0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a19      	ldr	r2, [pc, #100]	; (8008f7c <HAL_I2C_MspInit+0x84>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d12c      	bne.n	8008f74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	613b      	str	r3, [r7, #16]
 8008f1e:	4b18      	ldr	r3, [pc, #96]	; (8008f80 <HAL_I2C_MspInit+0x88>)
 8008f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f22:	4a17      	ldr	r2, [pc, #92]	; (8008f80 <HAL_I2C_MspInit+0x88>)
 8008f24:	f043 0302 	orr.w	r3, r3, #2
 8008f28:	6313      	str	r3, [r2, #48]	; 0x30
 8008f2a:	4b15      	ldr	r3, [pc, #84]	; (8008f80 <HAL_I2C_MspInit+0x88>)
 8008f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f2e:	f003 0302 	and.w	r3, r3, #2
 8008f32:	613b      	str	r3, [r7, #16]
 8008f34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8008f36:	f44f 7310 	mov.w	r3, #576	; 0x240
 8008f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008f3c:	2312      	movs	r3, #18
 8008f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008f40:	2301      	movs	r3, #1
 8008f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f44:	2300      	movs	r3, #0
 8008f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008f48:	2304      	movs	r3, #4
 8008f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f4c:	f107 0314 	add.w	r3, r7, #20
 8008f50:	4619      	mov	r1, r3
 8008f52:	480c      	ldr	r0, [pc, #48]	; (8008f84 <HAL_I2C_MspInit+0x8c>)
 8008f54:	f7f8 fc62 	bl	800181c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008f58:	2300      	movs	r3, #0
 8008f5a:	60fb      	str	r3, [r7, #12]
 8008f5c:	4b08      	ldr	r3, [pc, #32]	; (8008f80 <HAL_I2C_MspInit+0x88>)
 8008f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f60:	4a07      	ldr	r2, [pc, #28]	; (8008f80 <HAL_I2C_MspInit+0x88>)
 8008f62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f66:	6413      	str	r3, [r2, #64]	; 0x40
 8008f68:	4b05      	ldr	r3, [pc, #20]	; (8008f80 <HAL_I2C_MspInit+0x88>)
 8008f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f70:	60fb      	str	r3, [r7, #12]
 8008f72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008f74:	bf00      	nop
 8008f76:	3728      	adds	r7, #40	; 0x28
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	40005400 	.word	0x40005400
 8008f80:	40023800 	.word	0x40023800
 8008f84:	40020400 	.word	0x40020400

08008f88 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b08a      	sub	sp, #40	; 0x28
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f90:	f107 0314 	add.w	r3, r7, #20
 8008f94:	2200      	movs	r2, #0
 8008f96:	601a      	str	r2, [r3, #0]
 8008f98:	605a      	str	r2, [r3, #4]
 8008f9a:	609a      	str	r2, [r3, #8]
 8008f9c:	60da      	str	r2, [r3, #12]
 8008f9e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a28      	ldr	r2, [pc, #160]	; (8009048 <HAL_I2S_MspInit+0xc0>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d14a      	bne.n	8009040 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008faa:	2300      	movs	r3, #0
 8008fac:	613b      	str	r3, [r7, #16]
 8008fae:	4b27      	ldr	r3, [pc, #156]	; (800904c <HAL_I2S_MspInit+0xc4>)
 8008fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb2:	4a26      	ldr	r2, [pc, #152]	; (800904c <HAL_I2S_MspInit+0xc4>)
 8008fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8008fba:	4b24      	ldr	r3, [pc, #144]	; (800904c <HAL_I2S_MspInit+0xc4>)
 8008fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fc2:	613b      	str	r3, [r7, #16]
 8008fc4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	60fb      	str	r3, [r7, #12]
 8008fca:	4b20      	ldr	r3, [pc, #128]	; (800904c <HAL_I2S_MspInit+0xc4>)
 8008fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fce:	4a1f      	ldr	r2, [pc, #124]	; (800904c <HAL_I2S_MspInit+0xc4>)
 8008fd0:	f043 0301 	orr.w	r3, r3, #1
 8008fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8008fd6:	4b1d      	ldr	r3, [pc, #116]	; (800904c <HAL_I2S_MspInit+0xc4>)
 8008fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fda:	f003 0301 	and.w	r3, r3, #1
 8008fde:	60fb      	str	r3, [r7, #12]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	60bb      	str	r3, [r7, #8]
 8008fe6:	4b19      	ldr	r3, [pc, #100]	; (800904c <HAL_I2S_MspInit+0xc4>)
 8008fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fea:	4a18      	ldr	r2, [pc, #96]	; (800904c <HAL_I2S_MspInit+0xc4>)
 8008fec:	f043 0304 	orr.w	r3, r3, #4
 8008ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8008ff2:	4b16      	ldr	r3, [pc, #88]	; (800904c <HAL_I2S_MspInit+0xc4>)
 8008ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff6:	f003 0304 	and.w	r3, r3, #4
 8008ffa:	60bb      	str	r3, [r7, #8]
 8008ffc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8008ffe:	2310      	movs	r3, #16
 8009000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009002:	2302      	movs	r3, #2
 8009004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009006:	2300      	movs	r3, #0
 8009008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800900a:	2300      	movs	r3, #0
 800900c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800900e:	2306      	movs	r3, #6
 8009010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8009012:	f107 0314 	add.w	r3, r7, #20
 8009016:	4619      	mov	r1, r3
 8009018:	480d      	ldr	r0, [pc, #52]	; (8009050 <HAL_I2S_MspInit+0xc8>)
 800901a:	f7f8 fbff 	bl	800181c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800901e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8009022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009024:	2302      	movs	r3, #2
 8009026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009028:	2300      	movs	r3, #0
 800902a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800902c:	2300      	movs	r3, #0
 800902e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009030:	2306      	movs	r3, #6
 8009032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009034:	f107 0314 	add.w	r3, r7, #20
 8009038:	4619      	mov	r1, r3
 800903a:	4806      	ldr	r0, [pc, #24]	; (8009054 <HAL_I2S_MspInit+0xcc>)
 800903c:	f7f8 fbee 	bl	800181c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8009040:	bf00      	nop
 8009042:	3728      	adds	r7, #40	; 0x28
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	40003c00 	.word	0x40003c00
 800904c:	40023800 	.word	0x40023800
 8009050:	40020000 	.word	0x40020000
 8009054:	40020800 	.word	0x40020800

08009058 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b08a      	sub	sp, #40	; 0x28
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009060:	f107 0314 	add.w	r3, r7, #20
 8009064:	2200      	movs	r2, #0
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	605a      	str	r2, [r3, #4]
 800906a:	609a      	str	r2, [r3, #8]
 800906c:	60da      	str	r2, [r3, #12]
 800906e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a19      	ldr	r2, [pc, #100]	; (80090dc <HAL_SPI_MspInit+0x84>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d12b      	bne.n	80090d2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800907a:	2300      	movs	r3, #0
 800907c:	613b      	str	r3, [r7, #16]
 800907e:	4b18      	ldr	r3, [pc, #96]	; (80090e0 <HAL_SPI_MspInit+0x88>)
 8009080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009082:	4a17      	ldr	r2, [pc, #92]	; (80090e0 <HAL_SPI_MspInit+0x88>)
 8009084:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009088:	6453      	str	r3, [r2, #68]	; 0x44
 800908a:	4b15      	ldr	r3, [pc, #84]	; (80090e0 <HAL_SPI_MspInit+0x88>)
 800908c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800908e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009092:	613b      	str	r3, [r7, #16]
 8009094:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009096:	2300      	movs	r3, #0
 8009098:	60fb      	str	r3, [r7, #12]
 800909a:	4b11      	ldr	r3, [pc, #68]	; (80090e0 <HAL_SPI_MspInit+0x88>)
 800909c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800909e:	4a10      	ldr	r2, [pc, #64]	; (80090e0 <HAL_SPI_MspInit+0x88>)
 80090a0:	f043 0301 	orr.w	r3, r3, #1
 80090a4:	6313      	str	r3, [r2, #48]	; 0x30
 80090a6:	4b0e      	ldr	r3, [pc, #56]	; (80090e0 <HAL_SPI_MspInit+0x88>)
 80090a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090aa:	f003 0301 	and.w	r3, r3, #1
 80090ae:	60fb      	str	r3, [r7, #12]
 80090b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80090b2:	23e0      	movs	r3, #224	; 0xe0
 80090b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090b6:	2302      	movs	r3, #2
 80090b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090ba:	2300      	movs	r3, #0
 80090bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090be:	2300      	movs	r3, #0
 80090c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80090c2:	2305      	movs	r3, #5
 80090c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090c6:	f107 0314 	add.w	r3, r7, #20
 80090ca:	4619      	mov	r1, r3
 80090cc:	4805      	ldr	r0, [pc, #20]	; (80090e4 <HAL_SPI_MspInit+0x8c>)
 80090ce:	f7f8 fba5 	bl	800181c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80090d2:	bf00      	nop
 80090d4:	3728      	adds	r7, #40	; 0x28
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	40013000 	.word	0x40013000
 80090e0:	40023800 	.word	0x40023800
 80090e4:	40020000 	.word	0x40020000

080090e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a0b      	ldr	r2, [pc, #44]	; (8009124 <HAL_TIM_Base_MspInit+0x3c>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d10d      	bne.n	8009116 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80090fa:	2300      	movs	r3, #0
 80090fc:	60fb      	str	r3, [r7, #12]
 80090fe:	4b0a      	ldr	r3, [pc, #40]	; (8009128 <HAL_TIM_Base_MspInit+0x40>)
 8009100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009102:	4a09      	ldr	r2, [pc, #36]	; (8009128 <HAL_TIM_Base_MspInit+0x40>)
 8009104:	f043 0304 	orr.w	r3, r3, #4
 8009108:	6413      	str	r3, [r2, #64]	; 0x40
 800910a:	4b07      	ldr	r3, [pc, #28]	; (8009128 <HAL_TIM_Base_MspInit+0x40>)
 800910c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910e:	f003 0304 	and.w	r3, r3, #4
 8009112:	60fb      	str	r3, [r7, #12]
 8009114:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8009116:	bf00      	nop
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	40000800 	.word	0x40000800
 8009128:	40023800 	.word	0x40023800

0800912c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b088      	sub	sp, #32
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009134:	f107 030c 	add.w	r3, r7, #12
 8009138:	2200      	movs	r2, #0
 800913a:	601a      	str	r2, [r3, #0]
 800913c:	605a      	str	r2, [r3, #4]
 800913e:	609a      	str	r2, [r3, #8]
 8009140:	60da      	str	r2, [r3, #12]
 8009142:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a12      	ldr	r2, [pc, #72]	; (8009194 <HAL_TIM_MspPostInit+0x68>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d11e      	bne.n	800918c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800914e:	2300      	movs	r3, #0
 8009150:	60bb      	str	r3, [r7, #8]
 8009152:	4b11      	ldr	r3, [pc, #68]	; (8009198 <HAL_TIM_MspPostInit+0x6c>)
 8009154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009156:	4a10      	ldr	r2, [pc, #64]	; (8009198 <HAL_TIM_MspPostInit+0x6c>)
 8009158:	f043 0308 	orr.w	r3, r3, #8
 800915c:	6313      	str	r3, [r2, #48]	; 0x30
 800915e:	4b0e      	ldr	r3, [pc, #56]	; (8009198 <HAL_TIM_MspPostInit+0x6c>)
 8009160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009162:	f003 0308 	and.w	r3, r3, #8
 8009166:	60bb      	str	r3, [r7, #8]
 8009168:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD14     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800916a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800916e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009170:	2302      	movs	r3, #2
 8009172:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009174:	2300      	movs	r3, #0
 8009176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009178:	2300      	movs	r3, #0
 800917a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800917c:	2302      	movs	r3, #2
 800917e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009180:	f107 030c 	add.w	r3, r7, #12
 8009184:	4619      	mov	r1, r3
 8009186:	4805      	ldr	r0, [pc, #20]	; (800919c <HAL_TIM_MspPostInit+0x70>)
 8009188:	f7f8 fb48 	bl	800181c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800918c:	bf00      	nop
 800918e:	3720      	adds	r7, #32
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	40000800 	.word	0x40000800
 8009198:	40023800 	.word	0x40023800
 800919c:	40020c00 	.word	0x40020c00

080091a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b08a      	sub	sp, #40	; 0x28
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091a8:	f107 0314 	add.w	r3, r7, #20
 80091ac:	2200      	movs	r2, #0
 80091ae:	601a      	str	r2, [r3, #0]
 80091b0:	605a      	str	r2, [r3, #4]
 80091b2:	609a      	str	r2, [r3, #8]
 80091b4:	60da      	str	r2, [r3, #12]
 80091b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a19      	ldr	r2, [pc, #100]	; (8009224 <HAL_UART_MspInit+0x84>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d12b      	bne.n	800921a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80091c2:	2300      	movs	r3, #0
 80091c4:	613b      	str	r3, [r7, #16]
 80091c6:	4b18      	ldr	r3, [pc, #96]	; (8009228 <HAL_UART_MspInit+0x88>)
 80091c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ca:	4a17      	ldr	r2, [pc, #92]	; (8009228 <HAL_UART_MspInit+0x88>)
 80091cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091d0:	6413      	str	r3, [r2, #64]	; 0x40
 80091d2:	4b15      	ldr	r3, [pc, #84]	; (8009228 <HAL_UART_MspInit+0x88>)
 80091d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091da:	613b      	str	r3, [r7, #16]
 80091dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091de:	2300      	movs	r3, #0
 80091e0:	60fb      	str	r3, [r7, #12]
 80091e2:	4b11      	ldr	r3, [pc, #68]	; (8009228 <HAL_UART_MspInit+0x88>)
 80091e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e6:	4a10      	ldr	r2, [pc, #64]	; (8009228 <HAL_UART_MspInit+0x88>)
 80091e8:	f043 0301 	orr.w	r3, r3, #1
 80091ec:	6313      	str	r3, [r2, #48]	; 0x30
 80091ee:	4b0e      	ldr	r3, [pc, #56]	; (8009228 <HAL_UART_MspInit+0x88>)
 80091f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f2:	f003 0301 	and.w	r3, r3, #1
 80091f6:	60fb      	str	r3, [r7, #12]
 80091f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80091fa:	230c      	movs	r3, #12
 80091fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091fe:	2302      	movs	r3, #2
 8009200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009202:	2301      	movs	r3, #1
 8009204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009206:	2303      	movs	r3, #3
 8009208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800920a:	2307      	movs	r3, #7
 800920c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800920e:	f107 0314 	add.w	r3, r7, #20
 8009212:	4619      	mov	r1, r3
 8009214:	4805      	ldr	r0, [pc, #20]	; (800922c <HAL_UART_MspInit+0x8c>)
 8009216:	f7f8 fb01 	bl	800181c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800921a:	bf00      	nop
 800921c:	3728      	adds	r7, #40	; 0x28
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	40004400 	.word	0x40004400
 8009228:	40023800 	.word	0x40023800
 800922c:	40020000 	.word	0x40020000

08009230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009230:	b480      	push	{r7}
 8009232:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009234:	bf00      	nop
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr

0800923e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800923e:	b480      	push	{r7}
 8009240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009242:	e7fe      	b.n	8009242 <HardFault_Handler+0x4>

08009244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009244:	b480      	push	{r7}
 8009246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009248:	e7fe      	b.n	8009248 <MemManage_Handler+0x4>

0800924a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800924a:	b480      	push	{r7}
 800924c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800924e:	e7fe      	b.n	800924e <BusFault_Handler+0x4>

08009250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009250:	b480      	push	{r7}
 8009252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009254:	e7fe      	b.n	8009254 <UsageFault_Handler+0x4>

08009256 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009256:	b480      	push	{r7}
 8009258:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800925a:	bf00      	nop
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009264:	b480      	push	{r7}
 8009266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009268:	bf00      	nop
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr

08009272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009272:	b480      	push	{r7}
 8009274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009276:	bf00      	nop
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009284:	f7f7 fdbc 	bl	8000e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009288:	bf00      	nop
 800928a:	bd80      	pop	{r7, pc}

0800928c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8009290:	4802      	ldr	r0, [pc, #8]	; (800929c <OTG_FS_IRQHandler+0x10>)
 8009292:	f7f8 fefb 	bl	800208c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8009296:	bf00      	nop
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	2000064c 	.word	0x2000064c

080092a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80092a8:	4b11      	ldr	r3, [pc, #68]	; (80092f0 <_sbrk+0x50>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d102      	bne.n	80092b6 <_sbrk+0x16>
		heap_end = &end;
 80092b0:	4b0f      	ldr	r3, [pc, #60]	; (80092f0 <_sbrk+0x50>)
 80092b2:	4a10      	ldr	r2, [pc, #64]	; (80092f4 <_sbrk+0x54>)
 80092b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80092b6:	4b0e      	ldr	r3, [pc, #56]	; (80092f0 <_sbrk+0x50>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80092bc:	4b0c      	ldr	r3, [pc, #48]	; (80092f0 <_sbrk+0x50>)
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4413      	add	r3, r2
 80092c4:	466a      	mov	r2, sp
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d907      	bls.n	80092da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80092ca:	f000 fb7d 	bl	80099c8 <__errno>
 80092ce:	4602      	mov	r2, r0
 80092d0:	230c      	movs	r3, #12
 80092d2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80092d4:	f04f 33ff 	mov.w	r3, #4294967295
 80092d8:	e006      	b.n	80092e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80092da:	4b05      	ldr	r3, [pc, #20]	; (80092f0 <_sbrk+0x50>)
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4413      	add	r3, r2
 80092e2:	4a03      	ldr	r2, [pc, #12]	; (80092f0 <_sbrk+0x50>)
 80092e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80092e6:	68fb      	ldr	r3, [r7, #12]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	200000b0 	.word	0x200000b0
 80092f4:	20000918 	.word	0x20000918

080092f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80092f8:	b480      	push	{r7}
 80092fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80092fc:	4b16      	ldr	r3, [pc, #88]	; (8009358 <SystemInit+0x60>)
 80092fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009302:	4a15      	ldr	r2, [pc, #84]	; (8009358 <SystemInit+0x60>)
 8009304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800930c:	4b13      	ldr	r3, [pc, #76]	; (800935c <SystemInit+0x64>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a12      	ldr	r2, [pc, #72]	; (800935c <SystemInit+0x64>)
 8009312:	f043 0301 	orr.w	r3, r3, #1
 8009316:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009318:	4b10      	ldr	r3, [pc, #64]	; (800935c <SystemInit+0x64>)
 800931a:	2200      	movs	r2, #0
 800931c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800931e:	4b0f      	ldr	r3, [pc, #60]	; (800935c <SystemInit+0x64>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a0e      	ldr	r2, [pc, #56]	; (800935c <SystemInit+0x64>)
 8009324:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8009328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800932c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800932e:	4b0b      	ldr	r3, [pc, #44]	; (800935c <SystemInit+0x64>)
 8009330:	4a0b      	ldr	r2, [pc, #44]	; (8009360 <SystemInit+0x68>)
 8009332:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009334:	4b09      	ldr	r3, [pc, #36]	; (800935c <SystemInit+0x64>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a08      	ldr	r2, [pc, #32]	; (800935c <SystemInit+0x64>)
 800933a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800933e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009340:	4b06      	ldr	r3, [pc, #24]	; (800935c <SystemInit+0x64>)
 8009342:	2200      	movs	r2, #0
 8009344:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009346:	4b04      	ldr	r3, [pc, #16]	; (8009358 <SystemInit+0x60>)
 8009348:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800934c:	609a      	str	r2, [r3, #8]
#endif
}
 800934e:	bf00      	nop
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	e000ed00 	.word	0xe000ed00
 800935c:	40023800 	.word	0x40023800
 8009360:	24003010 	.word	0x24003010

08009364 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009368:	2201      	movs	r2, #1
 800936a:	490e      	ldr	r1, [pc, #56]	; (80093a4 <MX_USB_HOST_Init+0x40>)
 800936c:	480e      	ldr	r0, [pc, #56]	; (80093a8 <MX_USB_HOST_Init+0x44>)
 800936e:	f7fd ff8b 	bl	8007288 <USBH_Init>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d001      	beq.n	800937c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009378:	f7ff fd4a 	bl	8008e10 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800937c:	490b      	ldr	r1, [pc, #44]	; (80093ac <MX_USB_HOST_Init+0x48>)
 800937e:	480a      	ldr	r0, [pc, #40]	; (80093a8 <MX_USB_HOST_Init+0x44>)
 8009380:	f7fd fff5 	bl	800736e <USBH_RegisterClass>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d001      	beq.n	800938e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800938a:	f7ff fd41 	bl	8008e10 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800938e:	4806      	ldr	r0, [pc, #24]	; (80093a8 <MX_USB_HOST_Init+0x44>)
 8009390:	f7fe f87a 	bl	8007488 <USBH_Start>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800939a:	f7ff fd39 	bl	8008e10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800939e:	bf00      	nop
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	080093c5 	.word	0x080093c5
 80093a8:	20000280 	.word	0x20000280
 80093ac:	20000008 	.word	0x20000008

080093b0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80093b4:	4802      	ldr	r0, [pc, #8]	; (80093c0 <MX_USB_HOST_Process+0x10>)
 80093b6:	f7fe f877 	bl	80074a8 <USBH_Process>
}
 80093ba:	bf00      	nop
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	20000280 	.word	0x20000280

080093c4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	460b      	mov	r3, r1
 80093ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80093d0:	78fb      	ldrb	r3, [r7, #3]
 80093d2:	3b01      	subs	r3, #1
 80093d4:	2b04      	cmp	r3, #4
 80093d6:	d819      	bhi.n	800940c <USBH_UserProcess+0x48>
 80093d8:	a201      	add	r2, pc, #4	; (adr r2, 80093e0 <USBH_UserProcess+0x1c>)
 80093da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093de:	bf00      	nop
 80093e0:	0800940d 	.word	0x0800940d
 80093e4:	080093fd 	.word	0x080093fd
 80093e8:	0800940d 	.word	0x0800940d
 80093ec:	08009405 	.word	0x08009405
 80093f0:	080093f5 	.word	0x080093f5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80093f4:	4b09      	ldr	r3, [pc, #36]	; (800941c <USBH_UserProcess+0x58>)
 80093f6:	2203      	movs	r2, #3
 80093f8:	701a      	strb	r2, [r3, #0]
  break;
 80093fa:	e008      	b.n	800940e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80093fc:	4b07      	ldr	r3, [pc, #28]	; (800941c <USBH_UserProcess+0x58>)
 80093fe:	2202      	movs	r2, #2
 8009400:	701a      	strb	r2, [r3, #0]
  break;
 8009402:	e004      	b.n	800940e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009404:	4b05      	ldr	r3, [pc, #20]	; (800941c <USBH_UserProcess+0x58>)
 8009406:	2201      	movs	r2, #1
 8009408:	701a      	strb	r2, [r3, #0]
  break;
 800940a:	e000      	b.n	800940e <USBH_UserProcess+0x4a>

  default:
  break;
 800940c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800940e:	bf00      	nop
 8009410:	370c      	adds	r7, #12
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	200000b4 	.word	0x200000b4

08009420 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b08a      	sub	sp, #40	; 0x28
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009428:	f107 0314 	add.w	r3, r7, #20
 800942c:	2200      	movs	r2, #0
 800942e:	601a      	str	r2, [r3, #0]
 8009430:	605a      	str	r2, [r3, #4]
 8009432:	609a      	str	r2, [r3, #8]
 8009434:	60da      	str	r2, [r3, #12]
 8009436:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009440:	d147      	bne.n	80094d2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009442:	2300      	movs	r3, #0
 8009444:	613b      	str	r3, [r7, #16]
 8009446:	4b25      	ldr	r3, [pc, #148]	; (80094dc <HAL_HCD_MspInit+0xbc>)
 8009448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944a:	4a24      	ldr	r2, [pc, #144]	; (80094dc <HAL_HCD_MspInit+0xbc>)
 800944c:	f043 0301 	orr.w	r3, r3, #1
 8009450:	6313      	str	r3, [r2, #48]	; 0x30
 8009452:	4b22      	ldr	r3, [pc, #136]	; (80094dc <HAL_HCD_MspInit+0xbc>)
 8009454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009456:	f003 0301 	and.w	r3, r3, #1
 800945a:	613b      	str	r3, [r7, #16]
 800945c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800945e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009464:	2300      	movs	r3, #0
 8009466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009468:	2300      	movs	r3, #0
 800946a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800946c:	f107 0314 	add.w	r3, r7, #20
 8009470:	4619      	mov	r1, r3
 8009472:	481b      	ldr	r0, [pc, #108]	; (80094e0 <HAL_HCD_MspInit+0xc0>)
 8009474:	f7f8 f9d2 	bl	800181c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009478:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800947c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800947e:	2302      	movs	r3, #2
 8009480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009482:	2300      	movs	r3, #0
 8009484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009486:	2300      	movs	r3, #0
 8009488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800948a:	230a      	movs	r3, #10
 800948c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800948e:	f107 0314 	add.w	r3, r7, #20
 8009492:	4619      	mov	r1, r3
 8009494:	4812      	ldr	r0, [pc, #72]	; (80094e0 <HAL_HCD_MspInit+0xc0>)
 8009496:	f7f8 f9c1 	bl	800181c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800949a:	4b10      	ldr	r3, [pc, #64]	; (80094dc <HAL_HCD_MspInit+0xbc>)
 800949c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800949e:	4a0f      	ldr	r2, [pc, #60]	; (80094dc <HAL_HCD_MspInit+0xbc>)
 80094a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094a4:	6353      	str	r3, [r2, #52]	; 0x34
 80094a6:	2300      	movs	r3, #0
 80094a8:	60fb      	str	r3, [r7, #12]
 80094aa:	4b0c      	ldr	r3, [pc, #48]	; (80094dc <HAL_HCD_MspInit+0xbc>)
 80094ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ae:	4a0b      	ldr	r2, [pc, #44]	; (80094dc <HAL_HCD_MspInit+0xbc>)
 80094b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094b4:	6453      	str	r3, [r2, #68]	; 0x44
 80094b6:	4b09      	ldr	r3, [pc, #36]	; (80094dc <HAL_HCD_MspInit+0xbc>)
 80094b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094be:	60fb      	str	r3, [r7, #12]
 80094c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80094c2:	2200      	movs	r2, #0
 80094c4:	2100      	movs	r1, #0
 80094c6:	2043      	movs	r0, #67	; 0x43
 80094c8:	f7f8 f971 	bl	80017ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80094cc:	2043      	movs	r0, #67	; 0x43
 80094ce:	f7f8 f98a 	bl	80017e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80094d2:	bf00      	nop
 80094d4:	3728      	adds	r7, #40	; 0x28
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	40023800 	.word	0x40023800
 80094e0:	40020000 	.word	0x40020000

080094e4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fe fa89 	bl	8007a0a <USBH_LL_IncTimer>
}
 80094f8:	bf00      	nop
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800950e:	4618      	mov	r0, r3
 8009510:	f7fe face 	bl	8007ab0 <USBH_LL_Connect>
}
 8009514:	bf00      	nop
 8009516:	3708      	adds	r7, #8
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800952a:	4618      	mov	r0, r3
 800952c:	f7fe fae6 	bl	8007afc <USBH_LL_Disconnect>
}
 8009530:	bf00      	nop
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	460b      	mov	r3, r1
 8009542:	70fb      	strb	r3, [r7, #3]
 8009544:	4613      	mov	r3, r2
 8009546:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009548:	bf00      	nop
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009562:	4618      	mov	r0, r3
 8009564:	f7fe fa7b 	bl	8007a5e <USBH_LL_PortEnabled>
} 
 8009568:	bf00      	nop
 800956a:	3708      	adds	r7, #8
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800957e:	4618      	mov	r0, r3
 8009580:	f7fe fa7b 	bl	8007a7a <USBH_LL_PortDisabled>
} 
 8009584:	bf00      	nop
 8009586:	3708      	adds	r7, #8
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800959a:	2b01      	cmp	r3, #1
 800959c:	d12a      	bne.n	80095f4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800959e:	4a18      	ldr	r2, [pc, #96]	; (8009600 <USBH_LL_Init+0x74>)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	4a15      	ldr	r2, [pc, #84]	; (8009600 <USBH_LL_Init+0x74>)
 80095aa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80095ae:	4b14      	ldr	r3, [pc, #80]	; (8009600 <USBH_LL_Init+0x74>)
 80095b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80095b4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80095b6:	4b12      	ldr	r3, [pc, #72]	; (8009600 <USBH_LL_Init+0x74>)
 80095b8:	2208      	movs	r2, #8
 80095ba:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80095bc:	4b10      	ldr	r3, [pc, #64]	; (8009600 <USBH_LL_Init+0x74>)
 80095be:	2201      	movs	r2, #1
 80095c0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80095c2:	4b0f      	ldr	r3, [pc, #60]	; (8009600 <USBH_LL_Init+0x74>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80095c8:	4b0d      	ldr	r3, [pc, #52]	; (8009600 <USBH_LL_Init+0x74>)
 80095ca:	2202      	movs	r2, #2
 80095cc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80095ce:	4b0c      	ldr	r3, [pc, #48]	; (8009600 <USBH_LL_Init+0x74>)
 80095d0:	2200      	movs	r2, #0
 80095d2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80095d4:	480a      	ldr	r0, [pc, #40]	; (8009600 <USBH_LL_Init+0x74>)
 80095d6:	f7f8 fad4 	bl	8001b82 <HAL_HCD_Init>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d001      	beq.n	80095e4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80095e0:	f7ff fc16 	bl	8008e10 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80095e4:	4806      	ldr	r0, [pc, #24]	; (8009600 <USBH_LL_Init+0x74>)
 80095e6:	f7f8 fecf 	bl	8002388 <HAL_HCD_GetCurrentFrame>
 80095ea:	4603      	mov	r3, r0
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7fe f9fc 	bl	80079ec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3708      	adds	r7, #8
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	2000064c 	.word	0x2000064c

08009604 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800960c:	2300      	movs	r3, #0
 800960e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009610:	2300      	movs	r3, #0
 8009612:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800961a:	4618      	mov	r0, r3
 800961c:	f7f8 fe3c 	bl	8002298 <HAL_HCD_Start>
 8009620:	4603      	mov	r3, r0
 8009622:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009624:	7bfb      	ldrb	r3, [r7, #15]
 8009626:	4618      	mov	r0, r3
 8009628:	f000 f95c 	bl	80098e4 <USBH_Get_USB_Status>
 800962c:	4603      	mov	r3, r0
 800962e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009630:	7bbb      	ldrb	r3, [r7, #14]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b084      	sub	sp, #16
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009642:	2300      	movs	r3, #0
 8009644:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009646:	2300      	movs	r3, #0
 8009648:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009650:	4618      	mov	r0, r3
 8009652:	f7f8 fe44 	bl	80022de <HAL_HCD_Stop>
 8009656:	4603      	mov	r3, r0
 8009658:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800965a:	7bfb      	ldrb	r3, [r7, #15]
 800965c:	4618      	mov	r0, r3
 800965e:	f000 f941 	bl	80098e4 <USBH_Get_USB_Status>
 8009662:	4603      	mov	r3, r0
 8009664:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8009666:	7bbb      	ldrb	r3, [r7, #14]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009678:	2301      	movs	r3, #1
 800967a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009682:	4618      	mov	r0, r3
 8009684:	f7f8 fe8e 	bl	80023a4 <HAL_HCD_GetCurrentSpeed>
 8009688:	4603      	mov	r3, r0
 800968a:	2b01      	cmp	r3, #1
 800968c:	d007      	beq.n	800969e <USBH_LL_GetSpeed+0x2e>
 800968e:	2b01      	cmp	r3, #1
 8009690:	d302      	bcc.n	8009698 <USBH_LL_GetSpeed+0x28>
 8009692:	2b02      	cmp	r3, #2
 8009694:	d006      	beq.n	80096a4 <USBH_LL_GetSpeed+0x34>
 8009696:	e008      	b.n	80096aa <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009698:	2300      	movs	r3, #0
 800969a:	73fb      	strb	r3, [r7, #15]
    break;
 800969c:	e008      	b.n	80096b0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800969e:	2301      	movs	r3, #1
 80096a0:	73fb      	strb	r3, [r7, #15]
    break;
 80096a2:	e005      	b.n	80096b0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80096a4:	2302      	movs	r3, #2
 80096a6:	73fb      	strb	r3, [r7, #15]
    break;
 80096a8:	e002      	b.n	80096b0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80096aa:	2301      	movs	r3, #1
 80096ac:	73fb      	strb	r3, [r7, #15]
    break;
 80096ae:	bf00      	nop
  }
  return  speed;
 80096b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b084      	sub	sp, #16
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7f8 fe21 	bl	8002318 <HAL_HCD_ResetPort>
 80096d6:	4603      	mov	r3, r0
 80096d8:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 80096da:	7bfb      	ldrb	r3, [r7, #15]
 80096dc:	4618      	mov	r0, r3
 80096de:	f000 f901 	bl	80098e4 <USBH_Get_USB_Status>
 80096e2:	4603      	mov	r3, r0
 80096e4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80096e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	460b      	mov	r3, r1
 80096fa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009702:	78fa      	ldrb	r2, [r7, #3]
 8009704:	4611      	mov	r1, r2
 8009706:	4618      	mov	r0, r3
 8009708:	f7f8 fe29 	bl	800235e <HAL_HCD_HC_GetXferCount>
 800970c:	4603      	mov	r3, r0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009716:	b590      	push	{r4, r7, lr}
 8009718:	b089      	sub	sp, #36	; 0x24
 800971a:	af04      	add	r7, sp, #16
 800971c:	6078      	str	r0, [r7, #4]
 800971e:	4608      	mov	r0, r1
 8009720:	4611      	mov	r1, r2
 8009722:	461a      	mov	r2, r3
 8009724:	4603      	mov	r3, r0
 8009726:	70fb      	strb	r3, [r7, #3]
 8009728:	460b      	mov	r3, r1
 800972a:	70bb      	strb	r3, [r7, #2]
 800972c:	4613      	mov	r3, r2
 800972e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009730:	2300      	movs	r3, #0
 8009732:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009734:	2300      	movs	r3, #0
 8009736:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800973e:	787c      	ldrb	r4, [r7, #1]
 8009740:	78ba      	ldrb	r2, [r7, #2]
 8009742:	78f9      	ldrb	r1, [r7, #3]
 8009744:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009746:	9302      	str	r3, [sp, #8]
 8009748:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800974c:	9301      	str	r3, [sp, #4]
 800974e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	4623      	mov	r3, r4
 8009756:	f7f8 fa76 	bl	8001c46 <HAL_HCD_HC_Init>
 800975a:	4603      	mov	r3, r0
 800975c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800975e:	7bfb      	ldrb	r3, [r7, #15]
 8009760:	4618      	mov	r0, r3
 8009762:	f000 f8bf 	bl	80098e4 <USBH_Get_USB_Status>
 8009766:	4603      	mov	r3, r0
 8009768:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800976a:	7bbb      	ldrb	r3, [r7, #14]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3714      	adds	r7, #20
 8009770:	46bd      	mov	sp, r7
 8009772:	bd90      	pop	{r4, r7, pc}

08009774 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	460b      	mov	r3, r1
 800977e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009780:	2300      	movs	r3, #0
 8009782:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800978e:	78fa      	ldrb	r2, [r7, #3]
 8009790:	4611      	mov	r1, r2
 8009792:	4618      	mov	r0, r3
 8009794:	f7f8 faef 	bl	8001d76 <HAL_HCD_HC_Halt>
 8009798:	4603      	mov	r3, r0
 800979a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800979c:	7bfb      	ldrb	r3, [r7, #15]
 800979e:	4618      	mov	r0, r3
 80097a0:	f000 f8a0 	bl	80098e4 <USBH_Get_USB_Status>
 80097a4:	4603      	mov	r3, r0
 80097a6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80097a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80097b2:	b590      	push	{r4, r7, lr}
 80097b4:	b089      	sub	sp, #36	; 0x24
 80097b6:	af04      	add	r7, sp, #16
 80097b8:	6078      	str	r0, [r7, #4]
 80097ba:	4608      	mov	r0, r1
 80097bc:	4611      	mov	r1, r2
 80097be:	461a      	mov	r2, r3
 80097c0:	4603      	mov	r3, r0
 80097c2:	70fb      	strb	r3, [r7, #3]
 80097c4:	460b      	mov	r3, r1
 80097c6:	70bb      	strb	r3, [r7, #2]
 80097c8:	4613      	mov	r3, r2
 80097ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097cc:	2300      	movs	r3, #0
 80097ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097d0:	2300      	movs	r3, #0
 80097d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80097da:	787c      	ldrb	r4, [r7, #1]
 80097dc:	78ba      	ldrb	r2, [r7, #2]
 80097de:	78f9      	ldrb	r1, [r7, #3]
 80097e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80097e4:	9303      	str	r3, [sp, #12]
 80097e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80097e8:	9302      	str	r3, [sp, #8]
 80097ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ec:	9301      	str	r3, [sp, #4]
 80097ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	4623      	mov	r3, r4
 80097f6:	f7f8 fae1 	bl	8001dbc <HAL_HCD_HC_SubmitRequest>
 80097fa:	4603      	mov	r3, r0
 80097fc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80097fe:	7bfb      	ldrb	r3, [r7, #15]
 8009800:	4618      	mov	r0, r3
 8009802:	f000 f86f 	bl	80098e4 <USBH_Get_USB_Status>
 8009806:	4603      	mov	r3, r0
 8009808:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800980a:	7bbb      	ldrb	r3, [r7, #14]
}
 800980c:	4618      	mov	r0, r3
 800980e:	3714      	adds	r7, #20
 8009810:	46bd      	mov	sp, r7
 8009812:	bd90      	pop	{r4, r7, pc}

08009814 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	460b      	mov	r3, r1
 800981e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009826:	78fa      	ldrb	r2, [r7, #3]
 8009828:	4611      	mov	r1, r2
 800982a:	4618      	mov	r0, r3
 800982c:	f7f8 fd82 	bl	8002334 <HAL_HCD_HC_GetURBState>
 8009830:	4603      	mov	r3, r0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3708      	adds	r7, #8
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800983a:	b580      	push	{r7, lr}
 800983c:	b082      	sub	sp, #8
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
 8009842:	460b      	mov	r3, r1
 8009844:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800984c:	2b01      	cmp	r3, #1
 800984e:	d103      	bne.n	8009858 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009850:	78fb      	ldrb	r3, [r7, #3]
 8009852:	4618      	mov	r0, r3
 8009854:	f000 f872 	bl	800993c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009858:	20c8      	movs	r0, #200	; 0xc8
 800985a:	f7f7 faf1 	bl	8000e40 <HAL_Delay>
  return USBH_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	460b      	mov	r3, r1
 8009872:	70fb      	strb	r3, [r7, #3]
 8009874:	4613      	mov	r3, r2
 8009876:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800987e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009880:	78fa      	ldrb	r2, [r7, #3]
 8009882:	68f9      	ldr	r1, [r7, #12]
 8009884:	4613      	mov	r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	4413      	add	r3, r2
 800988a:	00db      	lsls	r3, r3, #3
 800988c:	440b      	add	r3, r1
 800988e:	333b      	adds	r3, #59	; 0x3b
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00a      	beq.n	80098ac <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009896:	78fa      	ldrb	r2, [r7, #3]
 8009898:	68f9      	ldr	r1, [r7, #12]
 800989a:	4613      	mov	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	00db      	lsls	r3, r3, #3
 80098a2:	440b      	add	r3, r1
 80098a4:	3350      	adds	r3, #80	; 0x50
 80098a6:	78ba      	ldrb	r2, [r7, #2]
 80098a8:	701a      	strb	r2, [r3, #0]
 80098aa:	e009      	b.n	80098c0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80098ac:	78fa      	ldrb	r2, [r7, #3]
 80098ae:	68f9      	ldr	r1, [r7, #12]
 80098b0:	4613      	mov	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	00db      	lsls	r3, r3, #3
 80098b8:	440b      	add	r3, r1
 80098ba:	3351      	adds	r3, #81	; 0x51
 80098bc:	78ba      	ldrb	r2, [r7, #2]
 80098be:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3714      	adds	r7, #20
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr

080098ce <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b082      	sub	sp, #8
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f7f7 fab2 	bl	8000e40 <HAL_Delay>
}
 80098dc:	bf00      	nop
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b085      	sub	sp, #20
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	4603      	mov	r3, r0
 80098ec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80098f2:	79fb      	ldrb	r3, [r7, #7]
 80098f4:	2b03      	cmp	r3, #3
 80098f6:	d817      	bhi.n	8009928 <USBH_Get_USB_Status+0x44>
 80098f8:	a201      	add	r2, pc, #4	; (adr r2, 8009900 <USBH_Get_USB_Status+0x1c>)
 80098fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fe:	bf00      	nop
 8009900:	08009911 	.word	0x08009911
 8009904:	08009917 	.word	0x08009917
 8009908:	0800991d 	.word	0x0800991d
 800990c:	08009923 	.word	0x08009923
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	73fb      	strb	r3, [r7, #15]
    break;
 8009914:	e00b      	b.n	800992e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009916:	2302      	movs	r3, #2
 8009918:	73fb      	strb	r3, [r7, #15]
    break;
 800991a:	e008      	b.n	800992e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800991c:	2301      	movs	r3, #1
 800991e:	73fb      	strb	r3, [r7, #15]
    break;
 8009920:	e005      	b.n	800992e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009922:	2302      	movs	r3, #2
 8009924:	73fb      	strb	r3, [r7, #15]
    break;
 8009926:	e002      	b.n	800992e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009928:	2302      	movs	r3, #2
 800992a:	73fb      	strb	r3, [r7, #15]
    break;
 800992c:	bf00      	nop
  }
  return usb_status;
 800992e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3714      	adds	r7, #20
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	4603      	mov	r3, r0
 8009944:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8009946:	79fb      	ldrb	r3, [r7, #7]
 8009948:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800994a:	79fb      	ldrb	r3, [r7, #7]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d102      	bne.n	8009956 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8009950:	2301      	movs	r3, #1
 8009952:	73fb      	strb	r3, [r7, #15]
 8009954:	e001      	b.n	800995a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009956:	2300      	movs	r3, #0
 8009958:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800995a:	7bfb      	ldrb	r3, [r7, #15]
 800995c:	461a      	mov	r2, r3
 800995e:	2101      	movs	r1, #1
 8009960:	4803      	ldr	r0, [pc, #12]	; (8009970 <MX_DriverVbusFS+0x34>)
 8009962:	f7f8 f8f5 	bl	8001b50 <HAL_GPIO_WritePin>
}
 8009966:	bf00      	nop
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	40020800 	.word	0x40020800

08009974 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009974:	f8df d034 	ldr.w	sp, [pc, #52]	; 80099ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009978:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800997a:	e003      	b.n	8009984 <LoopCopyDataInit>

0800997c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800997c:	4b0c      	ldr	r3, [pc, #48]	; (80099b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800997e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009980:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009982:	3104      	adds	r1, #4

08009984 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009984:	480b      	ldr	r0, [pc, #44]	; (80099b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009986:	4b0c      	ldr	r3, [pc, #48]	; (80099b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009988:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800998a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800998c:	d3f6      	bcc.n	800997c <CopyDataInit>
  ldr  r2, =_sbss
 800998e:	4a0b      	ldr	r2, [pc, #44]	; (80099bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009990:	e002      	b.n	8009998 <LoopFillZerobss>

08009992 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009992:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009994:	f842 3b04 	str.w	r3, [r2], #4

08009998 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009998:	4b09      	ldr	r3, [pc, #36]	; (80099c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800999a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800999c:	d3f9      	bcc.n	8009992 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800999e:	f7ff fcab 	bl	80092f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80099a2:	f000 f817 	bl	80099d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80099a6:	f7fe fead 	bl	8008704 <main>
  bx  lr    
 80099aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80099ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80099b0:	0800a2d8 	.word	0x0800a2d8
  ldr  r0, =_sdata
 80099b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80099b8:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80099bc:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80099c0:	20000914 	.word	0x20000914

080099c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80099c4:	e7fe      	b.n	80099c4 <ADC_IRQHandler>
	...

080099c8 <__errno>:
 80099c8:	4b01      	ldr	r3, [pc, #4]	; (80099d0 <__errno+0x8>)
 80099ca:	6818      	ldr	r0, [r3, #0]
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	2000002c 	.word	0x2000002c

080099d4 <__libc_init_array>:
 80099d4:	b570      	push	{r4, r5, r6, lr}
 80099d6:	4e0d      	ldr	r6, [pc, #52]	; (8009a0c <__libc_init_array+0x38>)
 80099d8:	4c0d      	ldr	r4, [pc, #52]	; (8009a10 <__libc_init_array+0x3c>)
 80099da:	1ba4      	subs	r4, r4, r6
 80099dc:	10a4      	asrs	r4, r4, #2
 80099de:	2500      	movs	r5, #0
 80099e0:	42a5      	cmp	r5, r4
 80099e2:	d109      	bne.n	80099f8 <__libc_init_array+0x24>
 80099e4:	4e0b      	ldr	r6, [pc, #44]	; (8009a14 <__libc_init_array+0x40>)
 80099e6:	4c0c      	ldr	r4, [pc, #48]	; (8009a18 <__libc_init_array+0x44>)
 80099e8:	f000 fc36 	bl	800a258 <_init>
 80099ec:	1ba4      	subs	r4, r4, r6
 80099ee:	10a4      	asrs	r4, r4, #2
 80099f0:	2500      	movs	r5, #0
 80099f2:	42a5      	cmp	r5, r4
 80099f4:	d105      	bne.n	8009a02 <__libc_init_array+0x2e>
 80099f6:	bd70      	pop	{r4, r5, r6, pc}
 80099f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80099fc:	4798      	blx	r3
 80099fe:	3501      	adds	r5, #1
 8009a00:	e7ee      	b.n	80099e0 <__libc_init_array+0xc>
 8009a02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a06:	4798      	blx	r3
 8009a08:	3501      	adds	r5, #1
 8009a0a:	e7f2      	b.n	80099f2 <__libc_init_array+0x1e>
 8009a0c:	0800a2d0 	.word	0x0800a2d0
 8009a10:	0800a2d0 	.word	0x0800a2d0
 8009a14:	0800a2d0 	.word	0x0800a2d0
 8009a18:	0800a2d4 	.word	0x0800a2d4

08009a1c <malloc>:
 8009a1c:	4b02      	ldr	r3, [pc, #8]	; (8009a28 <malloc+0xc>)
 8009a1e:	4601      	mov	r1, r0
 8009a20:	6818      	ldr	r0, [r3, #0]
 8009a22:	f000 b861 	b.w	8009ae8 <_malloc_r>
 8009a26:	bf00      	nop
 8009a28:	2000002c 	.word	0x2000002c

08009a2c <free>:
 8009a2c:	4b02      	ldr	r3, [pc, #8]	; (8009a38 <free+0xc>)
 8009a2e:	4601      	mov	r1, r0
 8009a30:	6818      	ldr	r0, [r3, #0]
 8009a32:	f000 b80b 	b.w	8009a4c <_free_r>
 8009a36:	bf00      	nop
 8009a38:	2000002c 	.word	0x2000002c

08009a3c <memset>:
 8009a3c:	4402      	add	r2, r0
 8009a3e:	4603      	mov	r3, r0
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d100      	bne.n	8009a46 <memset+0xa>
 8009a44:	4770      	bx	lr
 8009a46:	f803 1b01 	strb.w	r1, [r3], #1
 8009a4a:	e7f9      	b.n	8009a40 <memset+0x4>

08009a4c <_free_r>:
 8009a4c:	b538      	push	{r3, r4, r5, lr}
 8009a4e:	4605      	mov	r5, r0
 8009a50:	2900      	cmp	r1, #0
 8009a52:	d045      	beq.n	8009ae0 <_free_r+0x94>
 8009a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a58:	1f0c      	subs	r4, r1, #4
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	bfb8      	it	lt
 8009a5e:	18e4      	addlt	r4, r4, r3
 8009a60:	f000 f8cc 	bl	8009bfc <__malloc_lock>
 8009a64:	4a1f      	ldr	r2, [pc, #124]	; (8009ae4 <_free_r+0x98>)
 8009a66:	6813      	ldr	r3, [r2, #0]
 8009a68:	4610      	mov	r0, r2
 8009a6a:	b933      	cbnz	r3, 8009a7a <_free_r+0x2e>
 8009a6c:	6063      	str	r3, [r4, #4]
 8009a6e:	6014      	str	r4, [r2, #0]
 8009a70:	4628      	mov	r0, r5
 8009a72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a76:	f000 b8c2 	b.w	8009bfe <__malloc_unlock>
 8009a7a:	42a3      	cmp	r3, r4
 8009a7c:	d90c      	bls.n	8009a98 <_free_r+0x4c>
 8009a7e:	6821      	ldr	r1, [r4, #0]
 8009a80:	1862      	adds	r2, r4, r1
 8009a82:	4293      	cmp	r3, r2
 8009a84:	bf04      	itt	eq
 8009a86:	681a      	ldreq	r2, [r3, #0]
 8009a88:	685b      	ldreq	r3, [r3, #4]
 8009a8a:	6063      	str	r3, [r4, #4]
 8009a8c:	bf04      	itt	eq
 8009a8e:	1852      	addeq	r2, r2, r1
 8009a90:	6022      	streq	r2, [r4, #0]
 8009a92:	6004      	str	r4, [r0, #0]
 8009a94:	e7ec      	b.n	8009a70 <_free_r+0x24>
 8009a96:	4613      	mov	r3, r2
 8009a98:	685a      	ldr	r2, [r3, #4]
 8009a9a:	b10a      	cbz	r2, 8009aa0 <_free_r+0x54>
 8009a9c:	42a2      	cmp	r2, r4
 8009a9e:	d9fa      	bls.n	8009a96 <_free_r+0x4a>
 8009aa0:	6819      	ldr	r1, [r3, #0]
 8009aa2:	1858      	adds	r0, r3, r1
 8009aa4:	42a0      	cmp	r0, r4
 8009aa6:	d10b      	bne.n	8009ac0 <_free_r+0x74>
 8009aa8:	6820      	ldr	r0, [r4, #0]
 8009aaa:	4401      	add	r1, r0
 8009aac:	1858      	adds	r0, r3, r1
 8009aae:	4282      	cmp	r2, r0
 8009ab0:	6019      	str	r1, [r3, #0]
 8009ab2:	d1dd      	bne.n	8009a70 <_free_r+0x24>
 8009ab4:	6810      	ldr	r0, [r2, #0]
 8009ab6:	6852      	ldr	r2, [r2, #4]
 8009ab8:	605a      	str	r2, [r3, #4]
 8009aba:	4401      	add	r1, r0
 8009abc:	6019      	str	r1, [r3, #0]
 8009abe:	e7d7      	b.n	8009a70 <_free_r+0x24>
 8009ac0:	d902      	bls.n	8009ac8 <_free_r+0x7c>
 8009ac2:	230c      	movs	r3, #12
 8009ac4:	602b      	str	r3, [r5, #0]
 8009ac6:	e7d3      	b.n	8009a70 <_free_r+0x24>
 8009ac8:	6820      	ldr	r0, [r4, #0]
 8009aca:	1821      	adds	r1, r4, r0
 8009acc:	428a      	cmp	r2, r1
 8009ace:	bf04      	itt	eq
 8009ad0:	6811      	ldreq	r1, [r2, #0]
 8009ad2:	6852      	ldreq	r2, [r2, #4]
 8009ad4:	6062      	str	r2, [r4, #4]
 8009ad6:	bf04      	itt	eq
 8009ad8:	1809      	addeq	r1, r1, r0
 8009ada:	6021      	streq	r1, [r4, #0]
 8009adc:	605c      	str	r4, [r3, #4]
 8009ade:	e7c7      	b.n	8009a70 <_free_r+0x24>
 8009ae0:	bd38      	pop	{r3, r4, r5, pc}
 8009ae2:	bf00      	nop
 8009ae4:	200000b8 	.word	0x200000b8

08009ae8 <_malloc_r>:
 8009ae8:	b570      	push	{r4, r5, r6, lr}
 8009aea:	1ccd      	adds	r5, r1, #3
 8009aec:	f025 0503 	bic.w	r5, r5, #3
 8009af0:	3508      	adds	r5, #8
 8009af2:	2d0c      	cmp	r5, #12
 8009af4:	bf38      	it	cc
 8009af6:	250c      	movcc	r5, #12
 8009af8:	2d00      	cmp	r5, #0
 8009afa:	4606      	mov	r6, r0
 8009afc:	db01      	blt.n	8009b02 <_malloc_r+0x1a>
 8009afe:	42a9      	cmp	r1, r5
 8009b00:	d903      	bls.n	8009b0a <_malloc_r+0x22>
 8009b02:	230c      	movs	r3, #12
 8009b04:	6033      	str	r3, [r6, #0]
 8009b06:	2000      	movs	r0, #0
 8009b08:	bd70      	pop	{r4, r5, r6, pc}
 8009b0a:	f000 f877 	bl	8009bfc <__malloc_lock>
 8009b0e:	4a21      	ldr	r2, [pc, #132]	; (8009b94 <_malloc_r+0xac>)
 8009b10:	6814      	ldr	r4, [r2, #0]
 8009b12:	4621      	mov	r1, r4
 8009b14:	b991      	cbnz	r1, 8009b3c <_malloc_r+0x54>
 8009b16:	4c20      	ldr	r4, [pc, #128]	; (8009b98 <_malloc_r+0xb0>)
 8009b18:	6823      	ldr	r3, [r4, #0]
 8009b1a:	b91b      	cbnz	r3, 8009b24 <_malloc_r+0x3c>
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	f000 f83d 	bl	8009b9c <_sbrk_r>
 8009b22:	6020      	str	r0, [r4, #0]
 8009b24:	4629      	mov	r1, r5
 8009b26:	4630      	mov	r0, r6
 8009b28:	f000 f838 	bl	8009b9c <_sbrk_r>
 8009b2c:	1c43      	adds	r3, r0, #1
 8009b2e:	d124      	bne.n	8009b7a <_malloc_r+0x92>
 8009b30:	230c      	movs	r3, #12
 8009b32:	6033      	str	r3, [r6, #0]
 8009b34:	4630      	mov	r0, r6
 8009b36:	f000 f862 	bl	8009bfe <__malloc_unlock>
 8009b3a:	e7e4      	b.n	8009b06 <_malloc_r+0x1e>
 8009b3c:	680b      	ldr	r3, [r1, #0]
 8009b3e:	1b5b      	subs	r3, r3, r5
 8009b40:	d418      	bmi.n	8009b74 <_malloc_r+0x8c>
 8009b42:	2b0b      	cmp	r3, #11
 8009b44:	d90f      	bls.n	8009b66 <_malloc_r+0x7e>
 8009b46:	600b      	str	r3, [r1, #0]
 8009b48:	50cd      	str	r5, [r1, r3]
 8009b4a:	18cc      	adds	r4, r1, r3
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	f000 f856 	bl	8009bfe <__malloc_unlock>
 8009b52:	f104 000b 	add.w	r0, r4, #11
 8009b56:	1d23      	adds	r3, r4, #4
 8009b58:	f020 0007 	bic.w	r0, r0, #7
 8009b5c:	1ac3      	subs	r3, r0, r3
 8009b5e:	d0d3      	beq.n	8009b08 <_malloc_r+0x20>
 8009b60:	425a      	negs	r2, r3
 8009b62:	50e2      	str	r2, [r4, r3]
 8009b64:	e7d0      	b.n	8009b08 <_malloc_r+0x20>
 8009b66:	428c      	cmp	r4, r1
 8009b68:	684b      	ldr	r3, [r1, #4]
 8009b6a:	bf16      	itet	ne
 8009b6c:	6063      	strne	r3, [r4, #4]
 8009b6e:	6013      	streq	r3, [r2, #0]
 8009b70:	460c      	movne	r4, r1
 8009b72:	e7eb      	b.n	8009b4c <_malloc_r+0x64>
 8009b74:	460c      	mov	r4, r1
 8009b76:	6849      	ldr	r1, [r1, #4]
 8009b78:	e7cc      	b.n	8009b14 <_malloc_r+0x2c>
 8009b7a:	1cc4      	adds	r4, r0, #3
 8009b7c:	f024 0403 	bic.w	r4, r4, #3
 8009b80:	42a0      	cmp	r0, r4
 8009b82:	d005      	beq.n	8009b90 <_malloc_r+0xa8>
 8009b84:	1a21      	subs	r1, r4, r0
 8009b86:	4630      	mov	r0, r6
 8009b88:	f000 f808 	bl	8009b9c <_sbrk_r>
 8009b8c:	3001      	adds	r0, #1
 8009b8e:	d0cf      	beq.n	8009b30 <_malloc_r+0x48>
 8009b90:	6025      	str	r5, [r4, #0]
 8009b92:	e7db      	b.n	8009b4c <_malloc_r+0x64>
 8009b94:	200000b8 	.word	0x200000b8
 8009b98:	200000bc 	.word	0x200000bc

08009b9c <_sbrk_r>:
 8009b9c:	b538      	push	{r3, r4, r5, lr}
 8009b9e:	4c06      	ldr	r4, [pc, #24]	; (8009bb8 <_sbrk_r+0x1c>)
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	4605      	mov	r5, r0
 8009ba4:	4608      	mov	r0, r1
 8009ba6:	6023      	str	r3, [r4, #0]
 8009ba8:	f7ff fb7a 	bl	80092a0 <_sbrk>
 8009bac:	1c43      	adds	r3, r0, #1
 8009bae:	d102      	bne.n	8009bb6 <_sbrk_r+0x1a>
 8009bb0:	6823      	ldr	r3, [r4, #0]
 8009bb2:	b103      	cbz	r3, 8009bb6 <_sbrk_r+0x1a>
 8009bb4:	602b      	str	r3, [r5, #0]
 8009bb6:	bd38      	pop	{r3, r4, r5, pc}
 8009bb8:	20000910 	.word	0x20000910

08009bbc <siprintf>:
 8009bbc:	b40e      	push	{r1, r2, r3}
 8009bbe:	b500      	push	{lr}
 8009bc0:	b09c      	sub	sp, #112	; 0x70
 8009bc2:	ab1d      	add	r3, sp, #116	; 0x74
 8009bc4:	9002      	str	r0, [sp, #8]
 8009bc6:	9006      	str	r0, [sp, #24]
 8009bc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009bcc:	4809      	ldr	r0, [pc, #36]	; (8009bf4 <siprintf+0x38>)
 8009bce:	9107      	str	r1, [sp, #28]
 8009bd0:	9104      	str	r1, [sp, #16]
 8009bd2:	4909      	ldr	r1, [pc, #36]	; (8009bf8 <siprintf+0x3c>)
 8009bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bd8:	9105      	str	r1, [sp, #20]
 8009bda:	6800      	ldr	r0, [r0, #0]
 8009bdc:	9301      	str	r3, [sp, #4]
 8009bde:	a902      	add	r1, sp, #8
 8009be0:	f000 f868 	bl	8009cb4 <_svfiprintf_r>
 8009be4:	9b02      	ldr	r3, [sp, #8]
 8009be6:	2200      	movs	r2, #0
 8009be8:	701a      	strb	r2, [r3, #0]
 8009bea:	b01c      	add	sp, #112	; 0x70
 8009bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bf0:	b003      	add	sp, #12
 8009bf2:	4770      	bx	lr
 8009bf4:	2000002c 	.word	0x2000002c
 8009bf8:	ffff0208 	.word	0xffff0208

08009bfc <__malloc_lock>:
 8009bfc:	4770      	bx	lr

08009bfe <__malloc_unlock>:
 8009bfe:	4770      	bx	lr

08009c00 <__ssputs_r>:
 8009c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c04:	688e      	ldr	r6, [r1, #8]
 8009c06:	429e      	cmp	r6, r3
 8009c08:	4682      	mov	sl, r0
 8009c0a:	460c      	mov	r4, r1
 8009c0c:	4690      	mov	r8, r2
 8009c0e:	4699      	mov	r9, r3
 8009c10:	d837      	bhi.n	8009c82 <__ssputs_r+0x82>
 8009c12:	898a      	ldrh	r2, [r1, #12]
 8009c14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c18:	d031      	beq.n	8009c7e <__ssputs_r+0x7e>
 8009c1a:	6825      	ldr	r5, [r4, #0]
 8009c1c:	6909      	ldr	r1, [r1, #16]
 8009c1e:	1a6f      	subs	r7, r5, r1
 8009c20:	6965      	ldr	r5, [r4, #20]
 8009c22:	2302      	movs	r3, #2
 8009c24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c28:	fb95 f5f3 	sdiv	r5, r5, r3
 8009c2c:	f109 0301 	add.w	r3, r9, #1
 8009c30:	443b      	add	r3, r7
 8009c32:	429d      	cmp	r5, r3
 8009c34:	bf38      	it	cc
 8009c36:	461d      	movcc	r5, r3
 8009c38:	0553      	lsls	r3, r2, #21
 8009c3a:	d530      	bpl.n	8009c9e <__ssputs_r+0x9e>
 8009c3c:	4629      	mov	r1, r5
 8009c3e:	f7ff ff53 	bl	8009ae8 <_malloc_r>
 8009c42:	4606      	mov	r6, r0
 8009c44:	b950      	cbnz	r0, 8009c5c <__ssputs_r+0x5c>
 8009c46:	230c      	movs	r3, #12
 8009c48:	f8ca 3000 	str.w	r3, [sl]
 8009c4c:	89a3      	ldrh	r3, [r4, #12]
 8009c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c52:	81a3      	strh	r3, [r4, #12]
 8009c54:	f04f 30ff 	mov.w	r0, #4294967295
 8009c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c5c:	463a      	mov	r2, r7
 8009c5e:	6921      	ldr	r1, [r4, #16]
 8009c60:	f000 faa8 	bl	800a1b4 <memcpy>
 8009c64:	89a3      	ldrh	r3, [r4, #12]
 8009c66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c6e:	81a3      	strh	r3, [r4, #12]
 8009c70:	6126      	str	r6, [r4, #16]
 8009c72:	6165      	str	r5, [r4, #20]
 8009c74:	443e      	add	r6, r7
 8009c76:	1bed      	subs	r5, r5, r7
 8009c78:	6026      	str	r6, [r4, #0]
 8009c7a:	60a5      	str	r5, [r4, #8]
 8009c7c:	464e      	mov	r6, r9
 8009c7e:	454e      	cmp	r6, r9
 8009c80:	d900      	bls.n	8009c84 <__ssputs_r+0x84>
 8009c82:	464e      	mov	r6, r9
 8009c84:	4632      	mov	r2, r6
 8009c86:	4641      	mov	r1, r8
 8009c88:	6820      	ldr	r0, [r4, #0]
 8009c8a:	f000 fa9e 	bl	800a1ca <memmove>
 8009c8e:	68a3      	ldr	r3, [r4, #8]
 8009c90:	1b9b      	subs	r3, r3, r6
 8009c92:	60a3      	str	r3, [r4, #8]
 8009c94:	6823      	ldr	r3, [r4, #0]
 8009c96:	441e      	add	r6, r3
 8009c98:	6026      	str	r6, [r4, #0]
 8009c9a:	2000      	movs	r0, #0
 8009c9c:	e7dc      	b.n	8009c58 <__ssputs_r+0x58>
 8009c9e:	462a      	mov	r2, r5
 8009ca0:	f000 faac 	bl	800a1fc <_realloc_r>
 8009ca4:	4606      	mov	r6, r0
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	d1e2      	bne.n	8009c70 <__ssputs_r+0x70>
 8009caa:	6921      	ldr	r1, [r4, #16]
 8009cac:	4650      	mov	r0, sl
 8009cae:	f7ff fecd 	bl	8009a4c <_free_r>
 8009cb2:	e7c8      	b.n	8009c46 <__ssputs_r+0x46>

08009cb4 <_svfiprintf_r>:
 8009cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb8:	461d      	mov	r5, r3
 8009cba:	898b      	ldrh	r3, [r1, #12]
 8009cbc:	061f      	lsls	r7, r3, #24
 8009cbe:	b09d      	sub	sp, #116	; 0x74
 8009cc0:	4680      	mov	r8, r0
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	4616      	mov	r6, r2
 8009cc6:	d50f      	bpl.n	8009ce8 <_svfiprintf_r+0x34>
 8009cc8:	690b      	ldr	r3, [r1, #16]
 8009cca:	b96b      	cbnz	r3, 8009ce8 <_svfiprintf_r+0x34>
 8009ccc:	2140      	movs	r1, #64	; 0x40
 8009cce:	f7ff ff0b 	bl	8009ae8 <_malloc_r>
 8009cd2:	6020      	str	r0, [r4, #0]
 8009cd4:	6120      	str	r0, [r4, #16]
 8009cd6:	b928      	cbnz	r0, 8009ce4 <_svfiprintf_r+0x30>
 8009cd8:	230c      	movs	r3, #12
 8009cda:	f8c8 3000 	str.w	r3, [r8]
 8009cde:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce2:	e0c8      	b.n	8009e76 <_svfiprintf_r+0x1c2>
 8009ce4:	2340      	movs	r3, #64	; 0x40
 8009ce6:	6163      	str	r3, [r4, #20]
 8009ce8:	2300      	movs	r3, #0
 8009cea:	9309      	str	r3, [sp, #36]	; 0x24
 8009cec:	2320      	movs	r3, #32
 8009cee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cf2:	2330      	movs	r3, #48	; 0x30
 8009cf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cf8:	9503      	str	r5, [sp, #12]
 8009cfa:	f04f 0b01 	mov.w	fp, #1
 8009cfe:	4637      	mov	r7, r6
 8009d00:	463d      	mov	r5, r7
 8009d02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009d06:	b10b      	cbz	r3, 8009d0c <_svfiprintf_r+0x58>
 8009d08:	2b25      	cmp	r3, #37	; 0x25
 8009d0a:	d13e      	bne.n	8009d8a <_svfiprintf_r+0xd6>
 8009d0c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009d10:	d00b      	beq.n	8009d2a <_svfiprintf_r+0x76>
 8009d12:	4653      	mov	r3, sl
 8009d14:	4632      	mov	r2, r6
 8009d16:	4621      	mov	r1, r4
 8009d18:	4640      	mov	r0, r8
 8009d1a:	f7ff ff71 	bl	8009c00 <__ssputs_r>
 8009d1e:	3001      	adds	r0, #1
 8009d20:	f000 80a4 	beq.w	8009e6c <_svfiprintf_r+0x1b8>
 8009d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d26:	4453      	add	r3, sl
 8009d28:	9309      	str	r3, [sp, #36]	; 0x24
 8009d2a:	783b      	ldrb	r3, [r7, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f000 809d 	beq.w	8009e6c <_svfiprintf_r+0x1b8>
 8009d32:	2300      	movs	r3, #0
 8009d34:	f04f 32ff 	mov.w	r2, #4294967295
 8009d38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d3c:	9304      	str	r3, [sp, #16]
 8009d3e:	9307      	str	r3, [sp, #28]
 8009d40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d44:	931a      	str	r3, [sp, #104]	; 0x68
 8009d46:	462f      	mov	r7, r5
 8009d48:	2205      	movs	r2, #5
 8009d4a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009d4e:	4850      	ldr	r0, [pc, #320]	; (8009e90 <_svfiprintf_r+0x1dc>)
 8009d50:	f7f6 fa46 	bl	80001e0 <memchr>
 8009d54:	9b04      	ldr	r3, [sp, #16]
 8009d56:	b9d0      	cbnz	r0, 8009d8e <_svfiprintf_r+0xda>
 8009d58:	06d9      	lsls	r1, r3, #27
 8009d5a:	bf44      	itt	mi
 8009d5c:	2220      	movmi	r2, #32
 8009d5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d62:	071a      	lsls	r2, r3, #28
 8009d64:	bf44      	itt	mi
 8009d66:	222b      	movmi	r2, #43	; 0x2b
 8009d68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d6c:	782a      	ldrb	r2, [r5, #0]
 8009d6e:	2a2a      	cmp	r2, #42	; 0x2a
 8009d70:	d015      	beq.n	8009d9e <_svfiprintf_r+0xea>
 8009d72:	9a07      	ldr	r2, [sp, #28]
 8009d74:	462f      	mov	r7, r5
 8009d76:	2000      	movs	r0, #0
 8009d78:	250a      	movs	r5, #10
 8009d7a:	4639      	mov	r1, r7
 8009d7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d80:	3b30      	subs	r3, #48	; 0x30
 8009d82:	2b09      	cmp	r3, #9
 8009d84:	d94d      	bls.n	8009e22 <_svfiprintf_r+0x16e>
 8009d86:	b1b8      	cbz	r0, 8009db8 <_svfiprintf_r+0x104>
 8009d88:	e00f      	b.n	8009daa <_svfiprintf_r+0xf6>
 8009d8a:	462f      	mov	r7, r5
 8009d8c:	e7b8      	b.n	8009d00 <_svfiprintf_r+0x4c>
 8009d8e:	4a40      	ldr	r2, [pc, #256]	; (8009e90 <_svfiprintf_r+0x1dc>)
 8009d90:	1a80      	subs	r0, r0, r2
 8009d92:	fa0b f000 	lsl.w	r0, fp, r0
 8009d96:	4318      	orrs	r0, r3
 8009d98:	9004      	str	r0, [sp, #16]
 8009d9a:	463d      	mov	r5, r7
 8009d9c:	e7d3      	b.n	8009d46 <_svfiprintf_r+0x92>
 8009d9e:	9a03      	ldr	r2, [sp, #12]
 8009da0:	1d11      	adds	r1, r2, #4
 8009da2:	6812      	ldr	r2, [r2, #0]
 8009da4:	9103      	str	r1, [sp, #12]
 8009da6:	2a00      	cmp	r2, #0
 8009da8:	db01      	blt.n	8009dae <_svfiprintf_r+0xfa>
 8009daa:	9207      	str	r2, [sp, #28]
 8009dac:	e004      	b.n	8009db8 <_svfiprintf_r+0x104>
 8009dae:	4252      	negs	r2, r2
 8009db0:	f043 0302 	orr.w	r3, r3, #2
 8009db4:	9207      	str	r2, [sp, #28]
 8009db6:	9304      	str	r3, [sp, #16]
 8009db8:	783b      	ldrb	r3, [r7, #0]
 8009dba:	2b2e      	cmp	r3, #46	; 0x2e
 8009dbc:	d10c      	bne.n	8009dd8 <_svfiprintf_r+0x124>
 8009dbe:	787b      	ldrb	r3, [r7, #1]
 8009dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8009dc2:	d133      	bne.n	8009e2c <_svfiprintf_r+0x178>
 8009dc4:	9b03      	ldr	r3, [sp, #12]
 8009dc6:	1d1a      	adds	r2, r3, #4
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	9203      	str	r2, [sp, #12]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	bfb8      	it	lt
 8009dd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dd4:	3702      	adds	r7, #2
 8009dd6:	9305      	str	r3, [sp, #20]
 8009dd8:	4d2e      	ldr	r5, [pc, #184]	; (8009e94 <_svfiprintf_r+0x1e0>)
 8009dda:	7839      	ldrb	r1, [r7, #0]
 8009ddc:	2203      	movs	r2, #3
 8009dde:	4628      	mov	r0, r5
 8009de0:	f7f6 f9fe 	bl	80001e0 <memchr>
 8009de4:	b138      	cbz	r0, 8009df6 <_svfiprintf_r+0x142>
 8009de6:	2340      	movs	r3, #64	; 0x40
 8009de8:	1b40      	subs	r0, r0, r5
 8009dea:	fa03 f000 	lsl.w	r0, r3, r0
 8009dee:	9b04      	ldr	r3, [sp, #16]
 8009df0:	4303      	orrs	r3, r0
 8009df2:	3701      	adds	r7, #1
 8009df4:	9304      	str	r3, [sp, #16]
 8009df6:	7839      	ldrb	r1, [r7, #0]
 8009df8:	4827      	ldr	r0, [pc, #156]	; (8009e98 <_svfiprintf_r+0x1e4>)
 8009dfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dfe:	2206      	movs	r2, #6
 8009e00:	1c7e      	adds	r6, r7, #1
 8009e02:	f7f6 f9ed 	bl	80001e0 <memchr>
 8009e06:	2800      	cmp	r0, #0
 8009e08:	d038      	beq.n	8009e7c <_svfiprintf_r+0x1c8>
 8009e0a:	4b24      	ldr	r3, [pc, #144]	; (8009e9c <_svfiprintf_r+0x1e8>)
 8009e0c:	bb13      	cbnz	r3, 8009e54 <_svfiprintf_r+0x1a0>
 8009e0e:	9b03      	ldr	r3, [sp, #12]
 8009e10:	3307      	adds	r3, #7
 8009e12:	f023 0307 	bic.w	r3, r3, #7
 8009e16:	3308      	adds	r3, #8
 8009e18:	9303      	str	r3, [sp, #12]
 8009e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e1c:	444b      	add	r3, r9
 8009e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e20:	e76d      	b.n	8009cfe <_svfiprintf_r+0x4a>
 8009e22:	fb05 3202 	mla	r2, r5, r2, r3
 8009e26:	2001      	movs	r0, #1
 8009e28:	460f      	mov	r7, r1
 8009e2a:	e7a6      	b.n	8009d7a <_svfiprintf_r+0xc6>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	3701      	adds	r7, #1
 8009e30:	9305      	str	r3, [sp, #20]
 8009e32:	4619      	mov	r1, r3
 8009e34:	250a      	movs	r5, #10
 8009e36:	4638      	mov	r0, r7
 8009e38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e3c:	3a30      	subs	r2, #48	; 0x30
 8009e3e:	2a09      	cmp	r2, #9
 8009e40:	d903      	bls.n	8009e4a <_svfiprintf_r+0x196>
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d0c8      	beq.n	8009dd8 <_svfiprintf_r+0x124>
 8009e46:	9105      	str	r1, [sp, #20]
 8009e48:	e7c6      	b.n	8009dd8 <_svfiprintf_r+0x124>
 8009e4a:	fb05 2101 	mla	r1, r5, r1, r2
 8009e4e:	2301      	movs	r3, #1
 8009e50:	4607      	mov	r7, r0
 8009e52:	e7f0      	b.n	8009e36 <_svfiprintf_r+0x182>
 8009e54:	ab03      	add	r3, sp, #12
 8009e56:	9300      	str	r3, [sp, #0]
 8009e58:	4622      	mov	r2, r4
 8009e5a:	4b11      	ldr	r3, [pc, #68]	; (8009ea0 <_svfiprintf_r+0x1ec>)
 8009e5c:	a904      	add	r1, sp, #16
 8009e5e:	4640      	mov	r0, r8
 8009e60:	f3af 8000 	nop.w
 8009e64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009e68:	4681      	mov	r9, r0
 8009e6a:	d1d6      	bne.n	8009e1a <_svfiprintf_r+0x166>
 8009e6c:	89a3      	ldrh	r3, [r4, #12]
 8009e6e:	065b      	lsls	r3, r3, #25
 8009e70:	f53f af35 	bmi.w	8009cde <_svfiprintf_r+0x2a>
 8009e74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e76:	b01d      	add	sp, #116	; 0x74
 8009e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e7c:	ab03      	add	r3, sp, #12
 8009e7e:	9300      	str	r3, [sp, #0]
 8009e80:	4622      	mov	r2, r4
 8009e82:	4b07      	ldr	r3, [pc, #28]	; (8009ea0 <_svfiprintf_r+0x1ec>)
 8009e84:	a904      	add	r1, sp, #16
 8009e86:	4640      	mov	r0, r8
 8009e88:	f000 f882 	bl	8009f90 <_printf_i>
 8009e8c:	e7ea      	b.n	8009e64 <_svfiprintf_r+0x1b0>
 8009e8e:	bf00      	nop
 8009e90:	0800a294 	.word	0x0800a294
 8009e94:	0800a29a 	.word	0x0800a29a
 8009e98:	0800a29e 	.word	0x0800a29e
 8009e9c:	00000000 	.word	0x00000000
 8009ea0:	08009c01 	.word	0x08009c01

08009ea4 <_printf_common>:
 8009ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ea8:	4691      	mov	r9, r2
 8009eaa:	461f      	mov	r7, r3
 8009eac:	688a      	ldr	r2, [r1, #8]
 8009eae:	690b      	ldr	r3, [r1, #16]
 8009eb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	bfb8      	it	lt
 8009eb8:	4613      	movlt	r3, r2
 8009eba:	f8c9 3000 	str.w	r3, [r9]
 8009ebe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ec2:	4606      	mov	r6, r0
 8009ec4:	460c      	mov	r4, r1
 8009ec6:	b112      	cbz	r2, 8009ece <_printf_common+0x2a>
 8009ec8:	3301      	adds	r3, #1
 8009eca:	f8c9 3000 	str.w	r3, [r9]
 8009ece:	6823      	ldr	r3, [r4, #0]
 8009ed0:	0699      	lsls	r1, r3, #26
 8009ed2:	bf42      	ittt	mi
 8009ed4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009ed8:	3302      	addmi	r3, #2
 8009eda:	f8c9 3000 	strmi.w	r3, [r9]
 8009ede:	6825      	ldr	r5, [r4, #0]
 8009ee0:	f015 0506 	ands.w	r5, r5, #6
 8009ee4:	d107      	bne.n	8009ef6 <_printf_common+0x52>
 8009ee6:	f104 0a19 	add.w	sl, r4, #25
 8009eea:	68e3      	ldr	r3, [r4, #12]
 8009eec:	f8d9 2000 	ldr.w	r2, [r9]
 8009ef0:	1a9b      	subs	r3, r3, r2
 8009ef2:	42ab      	cmp	r3, r5
 8009ef4:	dc28      	bgt.n	8009f48 <_printf_common+0xa4>
 8009ef6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009efa:	6822      	ldr	r2, [r4, #0]
 8009efc:	3300      	adds	r3, #0
 8009efe:	bf18      	it	ne
 8009f00:	2301      	movne	r3, #1
 8009f02:	0692      	lsls	r2, r2, #26
 8009f04:	d42d      	bmi.n	8009f62 <_printf_common+0xbe>
 8009f06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f0a:	4639      	mov	r1, r7
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	47c0      	blx	r8
 8009f10:	3001      	adds	r0, #1
 8009f12:	d020      	beq.n	8009f56 <_printf_common+0xb2>
 8009f14:	6823      	ldr	r3, [r4, #0]
 8009f16:	68e5      	ldr	r5, [r4, #12]
 8009f18:	f8d9 2000 	ldr.w	r2, [r9]
 8009f1c:	f003 0306 	and.w	r3, r3, #6
 8009f20:	2b04      	cmp	r3, #4
 8009f22:	bf08      	it	eq
 8009f24:	1aad      	subeq	r5, r5, r2
 8009f26:	68a3      	ldr	r3, [r4, #8]
 8009f28:	6922      	ldr	r2, [r4, #16]
 8009f2a:	bf0c      	ite	eq
 8009f2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f30:	2500      	movne	r5, #0
 8009f32:	4293      	cmp	r3, r2
 8009f34:	bfc4      	itt	gt
 8009f36:	1a9b      	subgt	r3, r3, r2
 8009f38:	18ed      	addgt	r5, r5, r3
 8009f3a:	f04f 0900 	mov.w	r9, #0
 8009f3e:	341a      	adds	r4, #26
 8009f40:	454d      	cmp	r5, r9
 8009f42:	d11a      	bne.n	8009f7a <_printf_common+0xd6>
 8009f44:	2000      	movs	r0, #0
 8009f46:	e008      	b.n	8009f5a <_printf_common+0xb6>
 8009f48:	2301      	movs	r3, #1
 8009f4a:	4652      	mov	r2, sl
 8009f4c:	4639      	mov	r1, r7
 8009f4e:	4630      	mov	r0, r6
 8009f50:	47c0      	blx	r8
 8009f52:	3001      	adds	r0, #1
 8009f54:	d103      	bne.n	8009f5e <_printf_common+0xba>
 8009f56:	f04f 30ff 	mov.w	r0, #4294967295
 8009f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f5e:	3501      	adds	r5, #1
 8009f60:	e7c3      	b.n	8009eea <_printf_common+0x46>
 8009f62:	18e1      	adds	r1, r4, r3
 8009f64:	1c5a      	adds	r2, r3, #1
 8009f66:	2030      	movs	r0, #48	; 0x30
 8009f68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f6c:	4422      	add	r2, r4
 8009f6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f76:	3302      	adds	r3, #2
 8009f78:	e7c5      	b.n	8009f06 <_printf_common+0x62>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	4622      	mov	r2, r4
 8009f7e:	4639      	mov	r1, r7
 8009f80:	4630      	mov	r0, r6
 8009f82:	47c0      	blx	r8
 8009f84:	3001      	adds	r0, #1
 8009f86:	d0e6      	beq.n	8009f56 <_printf_common+0xb2>
 8009f88:	f109 0901 	add.w	r9, r9, #1
 8009f8c:	e7d8      	b.n	8009f40 <_printf_common+0x9c>
	...

08009f90 <_printf_i>:
 8009f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f94:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009f98:	460c      	mov	r4, r1
 8009f9a:	7e09      	ldrb	r1, [r1, #24]
 8009f9c:	b085      	sub	sp, #20
 8009f9e:	296e      	cmp	r1, #110	; 0x6e
 8009fa0:	4617      	mov	r7, r2
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	4698      	mov	r8, r3
 8009fa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fa8:	f000 80b3 	beq.w	800a112 <_printf_i+0x182>
 8009fac:	d822      	bhi.n	8009ff4 <_printf_i+0x64>
 8009fae:	2963      	cmp	r1, #99	; 0x63
 8009fb0:	d036      	beq.n	800a020 <_printf_i+0x90>
 8009fb2:	d80a      	bhi.n	8009fca <_printf_i+0x3a>
 8009fb4:	2900      	cmp	r1, #0
 8009fb6:	f000 80b9 	beq.w	800a12c <_printf_i+0x19c>
 8009fba:	2958      	cmp	r1, #88	; 0x58
 8009fbc:	f000 8083 	beq.w	800a0c6 <_printf_i+0x136>
 8009fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fc4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009fc8:	e032      	b.n	800a030 <_printf_i+0xa0>
 8009fca:	2964      	cmp	r1, #100	; 0x64
 8009fcc:	d001      	beq.n	8009fd2 <_printf_i+0x42>
 8009fce:	2969      	cmp	r1, #105	; 0x69
 8009fd0:	d1f6      	bne.n	8009fc0 <_printf_i+0x30>
 8009fd2:	6820      	ldr	r0, [r4, #0]
 8009fd4:	6813      	ldr	r3, [r2, #0]
 8009fd6:	0605      	lsls	r5, r0, #24
 8009fd8:	f103 0104 	add.w	r1, r3, #4
 8009fdc:	d52a      	bpl.n	800a034 <_printf_i+0xa4>
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6011      	str	r1, [r2, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	da03      	bge.n	8009fee <_printf_i+0x5e>
 8009fe6:	222d      	movs	r2, #45	; 0x2d
 8009fe8:	425b      	negs	r3, r3
 8009fea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009fee:	486f      	ldr	r0, [pc, #444]	; (800a1ac <_printf_i+0x21c>)
 8009ff0:	220a      	movs	r2, #10
 8009ff2:	e039      	b.n	800a068 <_printf_i+0xd8>
 8009ff4:	2973      	cmp	r1, #115	; 0x73
 8009ff6:	f000 809d 	beq.w	800a134 <_printf_i+0x1a4>
 8009ffa:	d808      	bhi.n	800a00e <_printf_i+0x7e>
 8009ffc:	296f      	cmp	r1, #111	; 0x6f
 8009ffe:	d020      	beq.n	800a042 <_printf_i+0xb2>
 800a000:	2970      	cmp	r1, #112	; 0x70
 800a002:	d1dd      	bne.n	8009fc0 <_printf_i+0x30>
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	f043 0320 	orr.w	r3, r3, #32
 800a00a:	6023      	str	r3, [r4, #0]
 800a00c:	e003      	b.n	800a016 <_printf_i+0x86>
 800a00e:	2975      	cmp	r1, #117	; 0x75
 800a010:	d017      	beq.n	800a042 <_printf_i+0xb2>
 800a012:	2978      	cmp	r1, #120	; 0x78
 800a014:	d1d4      	bne.n	8009fc0 <_printf_i+0x30>
 800a016:	2378      	movs	r3, #120	; 0x78
 800a018:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a01c:	4864      	ldr	r0, [pc, #400]	; (800a1b0 <_printf_i+0x220>)
 800a01e:	e055      	b.n	800a0cc <_printf_i+0x13c>
 800a020:	6813      	ldr	r3, [r2, #0]
 800a022:	1d19      	adds	r1, r3, #4
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	6011      	str	r1, [r2, #0]
 800a028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a02c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a030:	2301      	movs	r3, #1
 800a032:	e08c      	b.n	800a14e <_printf_i+0x1be>
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	6011      	str	r1, [r2, #0]
 800a038:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a03c:	bf18      	it	ne
 800a03e:	b21b      	sxthne	r3, r3
 800a040:	e7cf      	b.n	8009fe2 <_printf_i+0x52>
 800a042:	6813      	ldr	r3, [r2, #0]
 800a044:	6825      	ldr	r5, [r4, #0]
 800a046:	1d18      	adds	r0, r3, #4
 800a048:	6010      	str	r0, [r2, #0]
 800a04a:	0628      	lsls	r0, r5, #24
 800a04c:	d501      	bpl.n	800a052 <_printf_i+0xc2>
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	e002      	b.n	800a058 <_printf_i+0xc8>
 800a052:	0668      	lsls	r0, r5, #25
 800a054:	d5fb      	bpl.n	800a04e <_printf_i+0xbe>
 800a056:	881b      	ldrh	r3, [r3, #0]
 800a058:	4854      	ldr	r0, [pc, #336]	; (800a1ac <_printf_i+0x21c>)
 800a05a:	296f      	cmp	r1, #111	; 0x6f
 800a05c:	bf14      	ite	ne
 800a05e:	220a      	movne	r2, #10
 800a060:	2208      	moveq	r2, #8
 800a062:	2100      	movs	r1, #0
 800a064:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a068:	6865      	ldr	r5, [r4, #4]
 800a06a:	60a5      	str	r5, [r4, #8]
 800a06c:	2d00      	cmp	r5, #0
 800a06e:	f2c0 8095 	blt.w	800a19c <_printf_i+0x20c>
 800a072:	6821      	ldr	r1, [r4, #0]
 800a074:	f021 0104 	bic.w	r1, r1, #4
 800a078:	6021      	str	r1, [r4, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d13d      	bne.n	800a0fa <_printf_i+0x16a>
 800a07e:	2d00      	cmp	r5, #0
 800a080:	f040 808e 	bne.w	800a1a0 <_printf_i+0x210>
 800a084:	4665      	mov	r5, ip
 800a086:	2a08      	cmp	r2, #8
 800a088:	d10b      	bne.n	800a0a2 <_printf_i+0x112>
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	07db      	lsls	r3, r3, #31
 800a08e:	d508      	bpl.n	800a0a2 <_printf_i+0x112>
 800a090:	6923      	ldr	r3, [r4, #16]
 800a092:	6862      	ldr	r2, [r4, #4]
 800a094:	429a      	cmp	r2, r3
 800a096:	bfde      	ittt	le
 800a098:	2330      	movle	r3, #48	; 0x30
 800a09a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a09e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0a2:	ebac 0305 	sub.w	r3, ip, r5
 800a0a6:	6123      	str	r3, [r4, #16]
 800a0a8:	f8cd 8000 	str.w	r8, [sp]
 800a0ac:	463b      	mov	r3, r7
 800a0ae:	aa03      	add	r2, sp, #12
 800a0b0:	4621      	mov	r1, r4
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	f7ff fef6 	bl	8009ea4 <_printf_common>
 800a0b8:	3001      	adds	r0, #1
 800a0ba:	d14d      	bne.n	800a158 <_printf_i+0x1c8>
 800a0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c0:	b005      	add	sp, #20
 800a0c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0c6:	4839      	ldr	r0, [pc, #228]	; (800a1ac <_printf_i+0x21c>)
 800a0c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a0cc:	6813      	ldr	r3, [r2, #0]
 800a0ce:	6821      	ldr	r1, [r4, #0]
 800a0d0:	1d1d      	adds	r5, r3, #4
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	6015      	str	r5, [r2, #0]
 800a0d6:	060a      	lsls	r2, r1, #24
 800a0d8:	d50b      	bpl.n	800a0f2 <_printf_i+0x162>
 800a0da:	07ca      	lsls	r2, r1, #31
 800a0dc:	bf44      	itt	mi
 800a0de:	f041 0120 	orrmi.w	r1, r1, #32
 800a0e2:	6021      	strmi	r1, [r4, #0]
 800a0e4:	b91b      	cbnz	r3, 800a0ee <_printf_i+0x15e>
 800a0e6:	6822      	ldr	r2, [r4, #0]
 800a0e8:	f022 0220 	bic.w	r2, r2, #32
 800a0ec:	6022      	str	r2, [r4, #0]
 800a0ee:	2210      	movs	r2, #16
 800a0f0:	e7b7      	b.n	800a062 <_printf_i+0xd2>
 800a0f2:	064d      	lsls	r5, r1, #25
 800a0f4:	bf48      	it	mi
 800a0f6:	b29b      	uxthmi	r3, r3
 800a0f8:	e7ef      	b.n	800a0da <_printf_i+0x14a>
 800a0fa:	4665      	mov	r5, ip
 800a0fc:	fbb3 f1f2 	udiv	r1, r3, r2
 800a100:	fb02 3311 	mls	r3, r2, r1, r3
 800a104:	5cc3      	ldrb	r3, [r0, r3]
 800a106:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a10a:	460b      	mov	r3, r1
 800a10c:	2900      	cmp	r1, #0
 800a10e:	d1f5      	bne.n	800a0fc <_printf_i+0x16c>
 800a110:	e7b9      	b.n	800a086 <_printf_i+0xf6>
 800a112:	6813      	ldr	r3, [r2, #0]
 800a114:	6825      	ldr	r5, [r4, #0]
 800a116:	6961      	ldr	r1, [r4, #20]
 800a118:	1d18      	adds	r0, r3, #4
 800a11a:	6010      	str	r0, [r2, #0]
 800a11c:	0628      	lsls	r0, r5, #24
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	d501      	bpl.n	800a126 <_printf_i+0x196>
 800a122:	6019      	str	r1, [r3, #0]
 800a124:	e002      	b.n	800a12c <_printf_i+0x19c>
 800a126:	066a      	lsls	r2, r5, #25
 800a128:	d5fb      	bpl.n	800a122 <_printf_i+0x192>
 800a12a:	8019      	strh	r1, [r3, #0]
 800a12c:	2300      	movs	r3, #0
 800a12e:	6123      	str	r3, [r4, #16]
 800a130:	4665      	mov	r5, ip
 800a132:	e7b9      	b.n	800a0a8 <_printf_i+0x118>
 800a134:	6813      	ldr	r3, [r2, #0]
 800a136:	1d19      	adds	r1, r3, #4
 800a138:	6011      	str	r1, [r2, #0]
 800a13a:	681d      	ldr	r5, [r3, #0]
 800a13c:	6862      	ldr	r2, [r4, #4]
 800a13e:	2100      	movs	r1, #0
 800a140:	4628      	mov	r0, r5
 800a142:	f7f6 f84d 	bl	80001e0 <memchr>
 800a146:	b108      	cbz	r0, 800a14c <_printf_i+0x1bc>
 800a148:	1b40      	subs	r0, r0, r5
 800a14a:	6060      	str	r0, [r4, #4]
 800a14c:	6863      	ldr	r3, [r4, #4]
 800a14e:	6123      	str	r3, [r4, #16]
 800a150:	2300      	movs	r3, #0
 800a152:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a156:	e7a7      	b.n	800a0a8 <_printf_i+0x118>
 800a158:	6923      	ldr	r3, [r4, #16]
 800a15a:	462a      	mov	r2, r5
 800a15c:	4639      	mov	r1, r7
 800a15e:	4630      	mov	r0, r6
 800a160:	47c0      	blx	r8
 800a162:	3001      	adds	r0, #1
 800a164:	d0aa      	beq.n	800a0bc <_printf_i+0x12c>
 800a166:	6823      	ldr	r3, [r4, #0]
 800a168:	079b      	lsls	r3, r3, #30
 800a16a:	d413      	bmi.n	800a194 <_printf_i+0x204>
 800a16c:	68e0      	ldr	r0, [r4, #12]
 800a16e:	9b03      	ldr	r3, [sp, #12]
 800a170:	4298      	cmp	r0, r3
 800a172:	bfb8      	it	lt
 800a174:	4618      	movlt	r0, r3
 800a176:	e7a3      	b.n	800a0c0 <_printf_i+0x130>
 800a178:	2301      	movs	r3, #1
 800a17a:	464a      	mov	r2, r9
 800a17c:	4639      	mov	r1, r7
 800a17e:	4630      	mov	r0, r6
 800a180:	47c0      	blx	r8
 800a182:	3001      	adds	r0, #1
 800a184:	d09a      	beq.n	800a0bc <_printf_i+0x12c>
 800a186:	3501      	adds	r5, #1
 800a188:	68e3      	ldr	r3, [r4, #12]
 800a18a:	9a03      	ldr	r2, [sp, #12]
 800a18c:	1a9b      	subs	r3, r3, r2
 800a18e:	42ab      	cmp	r3, r5
 800a190:	dcf2      	bgt.n	800a178 <_printf_i+0x1e8>
 800a192:	e7eb      	b.n	800a16c <_printf_i+0x1dc>
 800a194:	2500      	movs	r5, #0
 800a196:	f104 0919 	add.w	r9, r4, #25
 800a19a:	e7f5      	b.n	800a188 <_printf_i+0x1f8>
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d1ac      	bne.n	800a0fa <_printf_i+0x16a>
 800a1a0:	7803      	ldrb	r3, [r0, #0]
 800a1a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1aa:	e76c      	b.n	800a086 <_printf_i+0xf6>
 800a1ac:	0800a2a5 	.word	0x0800a2a5
 800a1b0:	0800a2b6 	.word	0x0800a2b6

0800a1b4 <memcpy>:
 800a1b4:	b510      	push	{r4, lr}
 800a1b6:	1e43      	subs	r3, r0, #1
 800a1b8:	440a      	add	r2, r1
 800a1ba:	4291      	cmp	r1, r2
 800a1bc:	d100      	bne.n	800a1c0 <memcpy+0xc>
 800a1be:	bd10      	pop	{r4, pc}
 800a1c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1c8:	e7f7      	b.n	800a1ba <memcpy+0x6>

0800a1ca <memmove>:
 800a1ca:	4288      	cmp	r0, r1
 800a1cc:	b510      	push	{r4, lr}
 800a1ce:	eb01 0302 	add.w	r3, r1, r2
 800a1d2:	d807      	bhi.n	800a1e4 <memmove+0x1a>
 800a1d4:	1e42      	subs	r2, r0, #1
 800a1d6:	4299      	cmp	r1, r3
 800a1d8:	d00a      	beq.n	800a1f0 <memmove+0x26>
 800a1da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1de:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a1e2:	e7f8      	b.n	800a1d6 <memmove+0xc>
 800a1e4:	4283      	cmp	r3, r0
 800a1e6:	d9f5      	bls.n	800a1d4 <memmove+0xa>
 800a1e8:	1881      	adds	r1, r0, r2
 800a1ea:	1ad2      	subs	r2, r2, r3
 800a1ec:	42d3      	cmn	r3, r2
 800a1ee:	d100      	bne.n	800a1f2 <memmove+0x28>
 800a1f0:	bd10      	pop	{r4, pc}
 800a1f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a1fa:	e7f7      	b.n	800a1ec <memmove+0x22>

0800a1fc <_realloc_r>:
 800a1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fe:	4607      	mov	r7, r0
 800a200:	4614      	mov	r4, r2
 800a202:	460e      	mov	r6, r1
 800a204:	b921      	cbnz	r1, 800a210 <_realloc_r+0x14>
 800a206:	4611      	mov	r1, r2
 800a208:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a20c:	f7ff bc6c 	b.w	8009ae8 <_malloc_r>
 800a210:	b922      	cbnz	r2, 800a21c <_realloc_r+0x20>
 800a212:	f7ff fc1b 	bl	8009a4c <_free_r>
 800a216:	4625      	mov	r5, r4
 800a218:	4628      	mov	r0, r5
 800a21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a21c:	f000 f814 	bl	800a248 <_malloc_usable_size_r>
 800a220:	42a0      	cmp	r0, r4
 800a222:	d20f      	bcs.n	800a244 <_realloc_r+0x48>
 800a224:	4621      	mov	r1, r4
 800a226:	4638      	mov	r0, r7
 800a228:	f7ff fc5e 	bl	8009ae8 <_malloc_r>
 800a22c:	4605      	mov	r5, r0
 800a22e:	2800      	cmp	r0, #0
 800a230:	d0f2      	beq.n	800a218 <_realloc_r+0x1c>
 800a232:	4631      	mov	r1, r6
 800a234:	4622      	mov	r2, r4
 800a236:	f7ff ffbd 	bl	800a1b4 <memcpy>
 800a23a:	4631      	mov	r1, r6
 800a23c:	4638      	mov	r0, r7
 800a23e:	f7ff fc05 	bl	8009a4c <_free_r>
 800a242:	e7e9      	b.n	800a218 <_realloc_r+0x1c>
 800a244:	4635      	mov	r5, r6
 800a246:	e7e7      	b.n	800a218 <_realloc_r+0x1c>

0800a248 <_malloc_usable_size_r>:
 800a248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a24c:	1f18      	subs	r0, r3, #4
 800a24e:	2b00      	cmp	r3, #0
 800a250:	bfbc      	itt	lt
 800a252:	580b      	ldrlt	r3, [r1, r0]
 800a254:	18c0      	addlt	r0, r0, r3
 800a256:	4770      	bx	lr

0800a258 <_init>:
 800a258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25a:	bf00      	nop
 800a25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a25e:	bc08      	pop	{r3}
 800a260:	469e      	mov	lr, r3
 800a262:	4770      	bx	lr

0800a264 <_fini>:
 800a264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a266:	bf00      	nop
 800a268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a26a:	bc08      	pop	{r3}
 800a26c:	469e      	mov	lr, r3
 800a26e:	4770      	bx	lr
