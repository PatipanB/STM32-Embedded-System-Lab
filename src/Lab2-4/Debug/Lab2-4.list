
Lab2-4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08007fa0  08007fa0  00017fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800807c  0800807c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800807c  0800807c  0001807c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008084  08008084  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008084  08008084  00018084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008088  08008088  00018088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800808c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007fc  20000090  0800811c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000088c  0800811c  0002088c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a914  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a3b  00000000  00000000  0003a9d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001380  00000000  00000000  0003e410  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f8  00000000  00000000  0003f790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025235  00000000  00000000  00040988  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012807  00000000  00000000  00065bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ccfc7  00000000  00000000  000783c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014538b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000584c  00000000  00000000  00145408  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f88 	.word	0x08007f88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08007f88 	.word	0x08007f88

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_Init+0x40>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <HAL_Init+0x40>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <HAL_Init+0x40>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_Init+0x40>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 f94d 	bl	8000838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 f808 	bl	80005b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f006 f87c 	bl	80066a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <HAL_InitTick+0x54>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_InitTick+0x58>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f965 	bl	80008a2 <HAL_SYSTICK_Config>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005de:	2301      	movs	r3, #1
 80005e0:	e00e      	b.n	8000600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b0f      	cmp	r3, #15
 80005e6:	d80a      	bhi.n	80005fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e8:	2200      	movs	r2, #0
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	f04f 30ff 	mov.w	r0, #4294967295
 80005f0:	f000 f92d 	bl	800084e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f4:	4a06      	ldr	r2, [pc, #24]	; (8000610 <HAL_InitTick+0x5c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e000      	b.n	8000600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000028 	.word	0x20000028
 800060c:	20000004 	.word	0x20000004
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_IncTick+0x20>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_IncTick+0x24>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4413      	add	r3, r2
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <HAL_IncTick+0x24>)
 8000626:	6013      	str	r3, [r2, #0]
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000004 	.word	0x20000004
 8000638:	200000c0 	.word	0x200000c0

0800063c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return uwTick;
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <HAL_GetTick+0x14>)
 8000642:	681b      	ldr	r3, [r3, #0]
}
 8000644:	4618      	mov	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	200000c0 	.word	0x200000c0

08000654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800065c:	f7ff ffee 	bl	800063c <HAL_GetTick>
 8000660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800066c:	d005      	beq.n	800067a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_Delay+0x40>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4413      	add	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800067a:	bf00      	nop
 800067c:	f7ff ffde 	bl	800063c <HAL_GetTick>
 8000680:	4602      	mov	r2, r0
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	429a      	cmp	r2, r3
 800068a:	d8f7      	bhi.n	800067c <HAL_Delay+0x28>
  {
  }
}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000004 	.word	0x20000004

08000698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f003 0307 	and.w	r3, r3, #7
 80006a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b4:	4013      	ands	r3, r2
 80006b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ca:	4a04      	ldr	r2, [pc, #16]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	60d3      	str	r3, [r2, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <__NVIC_GetPriorityGrouping+0x18>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	f003 0307 	and.w	r3, r3, #7
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	2b00      	cmp	r3, #0
 800070c:	db0b      	blt.n	8000726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	f003 021f 	and.w	r2, r3, #31
 8000714:	4907      	ldr	r1, [pc, #28]	; (8000734 <__NVIC_EnableIRQ+0x38>)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	095b      	lsrs	r3, r3, #5
 800071c:	2001      	movs	r0, #1
 800071e:	fa00 f202 	lsl.w	r2, r0, r2
 8000722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000e100 	.word	0xe000e100

08000738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	db0a      	blt.n	8000762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	490c      	ldr	r1, [pc, #48]	; (8000784 <__NVIC_SetPriority+0x4c>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	0112      	lsls	r2, r2, #4
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	440b      	add	r3, r1
 800075c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000760:	e00a      	b.n	8000778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4908      	ldr	r1, [pc, #32]	; (8000788 <__NVIC_SetPriority+0x50>)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	f003 030f 	and.w	r3, r3, #15
 800076e:	3b04      	subs	r3, #4
 8000770:	0112      	lsls	r2, r2, #4
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	440b      	add	r3, r1
 8000776:	761a      	strb	r2, [r3, #24]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000e100 	.word	0xe000e100
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800078c:	b480      	push	{r7}
 800078e:	b089      	sub	sp, #36	; 0x24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	f1c3 0307 	rsb	r3, r3, #7
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	bf28      	it	cs
 80007aa:	2304      	movcs	r3, #4
 80007ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3304      	adds	r3, #4
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d902      	bls.n	80007bc <NVIC_EncodePriority+0x30>
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3b03      	subs	r3, #3
 80007ba:	e000      	b.n	80007be <NVIC_EncodePriority+0x32>
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	f04f 32ff 	mov.w	r2, #4294967295
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	401a      	ands	r2, r3
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d4:	f04f 31ff 	mov.w	r1, #4294967295
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43d9      	mvns	r1, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e4:	4313      	orrs	r3, r2
         );
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3724      	adds	r7, #36	; 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
	...

080007f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000804:	d301      	bcc.n	800080a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000806:	2301      	movs	r3, #1
 8000808:	e00f      	b.n	800082a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080a:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <SysTick_Config+0x40>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3b01      	subs	r3, #1
 8000810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000812:	210f      	movs	r1, #15
 8000814:	f04f 30ff 	mov.w	r0, #4294967295
 8000818:	f7ff ff8e 	bl	8000738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <SysTick_Config+0x40>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000822:	4b04      	ldr	r3, [pc, #16]	; (8000834 <SysTick_Config+0x40>)
 8000824:	2207      	movs	r2, #7
 8000826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	e000e010 	.word	0xe000e010

08000838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ff29 	bl	8000698 <__NVIC_SetPriorityGrouping>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800084e:	b580      	push	{r7, lr}
 8000850:	b086      	sub	sp, #24
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
 800085a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000860:	f7ff ff3e 	bl	80006e0 <__NVIC_GetPriorityGrouping>
 8000864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	68b9      	ldr	r1, [r7, #8]
 800086a:	6978      	ldr	r0, [r7, #20]
 800086c:	f7ff ff8e 	bl	800078c <NVIC_EncodePriority>
 8000870:	4602      	mov	r2, r0
 8000872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff5d 	bl	8000738 <__NVIC_SetPriority>
}
 800087e:	bf00      	nop
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	4603      	mov	r3, r0
 800088e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff31 	bl	80006fc <__NVIC_EnableIRQ>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffa2 	bl	80007f4 <SysTick_Config>
 80008b0:	4603      	mov	r3, r0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008bc:	b480      	push	{r7}
 80008be:	b089      	sub	sp, #36	; 0x24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
 80008d6:	e16b      	b.n	8000bb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008d8:	2201      	movs	r2, #1
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	4013      	ands	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	f040 815a 	bne.w	8000baa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d003      	beq.n	8000906 <HAL_GPIO_Init+0x4a>
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	2b12      	cmp	r3, #18
 8000904:	d123      	bne.n	800094e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	08da      	lsrs	r2, r3, #3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3208      	adds	r2, #8
 800090e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	220f      	movs	r2, #15
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43db      	mvns	r3, r3
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	4013      	ands	r3, r2
 8000928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	691a      	ldr	r2, [r3, #16]
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	f003 0307 	and.w	r3, r3, #7
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	69ba      	ldr	r2, [r7, #24]
 800093c:	4313      	orrs	r3, r2
 800093e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	08da      	lsrs	r2, r3, #3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3208      	adds	r2, #8
 8000948:	69b9      	ldr	r1, [r7, #24]
 800094a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	2203      	movs	r2, #3
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	43db      	mvns	r3, r3
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	4013      	ands	r3, r2
 8000964:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f003 0203 	and.w	r2, r3, #3
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	4313      	orrs	r3, r2
 800097a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d00b      	beq.n	80009a2 <HAL_GPIO_Init+0xe6>
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	2b02      	cmp	r3, #2
 8000990:	d007      	beq.n	80009a2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000996:	2b11      	cmp	r3, #17
 8000998:	d003      	beq.n	80009a2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	2b12      	cmp	r3, #18
 80009a0:	d130      	bne.n	8000a04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2203      	movs	r2, #3
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	4013      	ands	r3, r2
 80009b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	68da      	ldr	r2, [r3, #12]
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	69ba      	ldr	r2, [r7, #24]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	69ba      	ldr	r2, [r7, #24]
 80009d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009d8:	2201      	movs	r2, #1
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	43db      	mvns	r3, r3
 80009e2:	69ba      	ldr	r2, [r7, #24]
 80009e4:	4013      	ands	r3, r2
 80009e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	091b      	lsrs	r3, r3, #4
 80009ee:	f003 0201 	and.w	r2, r3, #1
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	2203      	movs	r2, #3
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	43db      	mvns	r3, r3
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	689a      	ldr	r2, [r3, #8]
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	69ba      	ldr	r2, [r7, #24]
 8000a32:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f000 80b4 	beq.w	8000baa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b5f      	ldr	r3, [pc, #380]	; (8000bc4 <HAL_GPIO_Init+0x308>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	4a5e      	ldr	r2, [pc, #376]	; (8000bc4 <HAL_GPIO_Init+0x308>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a50:	6453      	str	r3, [r2, #68]	; 0x44
 8000a52:	4b5c      	ldr	r3, [pc, #368]	; (8000bc4 <HAL_GPIO_Init+0x308>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a5e:	4a5a      	ldr	r2, [pc, #360]	; (8000bc8 <HAL_GPIO_Init+0x30c>)
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	089b      	lsrs	r3, r3, #2
 8000a64:	3302      	adds	r3, #2
 8000a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	f003 0303 	and.w	r3, r3, #3
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	220f      	movs	r2, #15
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a51      	ldr	r2, [pc, #324]	; (8000bcc <HAL_GPIO_Init+0x310>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d02b      	beq.n	8000ae2 <HAL_GPIO_Init+0x226>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a50      	ldr	r2, [pc, #320]	; (8000bd0 <HAL_GPIO_Init+0x314>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d025      	beq.n	8000ade <HAL_GPIO_Init+0x222>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a4f      	ldr	r2, [pc, #316]	; (8000bd4 <HAL_GPIO_Init+0x318>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d01f      	beq.n	8000ada <HAL_GPIO_Init+0x21e>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a4e      	ldr	r2, [pc, #312]	; (8000bd8 <HAL_GPIO_Init+0x31c>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d019      	beq.n	8000ad6 <HAL_GPIO_Init+0x21a>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a4d      	ldr	r2, [pc, #308]	; (8000bdc <HAL_GPIO_Init+0x320>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d013      	beq.n	8000ad2 <HAL_GPIO_Init+0x216>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a4c      	ldr	r2, [pc, #304]	; (8000be0 <HAL_GPIO_Init+0x324>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d00d      	beq.n	8000ace <HAL_GPIO_Init+0x212>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a4b      	ldr	r2, [pc, #300]	; (8000be4 <HAL_GPIO_Init+0x328>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d007      	beq.n	8000aca <HAL_GPIO_Init+0x20e>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a4a      	ldr	r2, [pc, #296]	; (8000be8 <HAL_GPIO_Init+0x32c>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d101      	bne.n	8000ac6 <HAL_GPIO_Init+0x20a>
 8000ac2:	2307      	movs	r3, #7
 8000ac4:	e00e      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ac6:	2308      	movs	r3, #8
 8000ac8:	e00c      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000aca:	2306      	movs	r3, #6
 8000acc:	e00a      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ace:	2305      	movs	r3, #5
 8000ad0:	e008      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	e006      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	e004      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ada:	2302      	movs	r3, #2
 8000adc:	e002      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e000      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	69fa      	ldr	r2, [r7, #28]
 8000ae6:	f002 0203 	and.w	r2, r2, #3
 8000aea:	0092      	lsls	r2, r2, #2
 8000aec:	4093      	lsls	r3, r2
 8000aee:	69ba      	ldr	r2, [r7, #24]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000af4:	4934      	ldr	r1, [pc, #208]	; (8000bc8 <HAL_GPIO_Init+0x30c>)
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	3302      	adds	r3, #2
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b02:	4b3a      	ldr	r3, [pc, #232]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b26:	4a31      	ldr	r2, [pc, #196]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b2c:	4b2f      	ldr	r3, [pc, #188]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	43db      	mvns	r3, r3
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d003      	beq.n	8000b50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b50:	4a26      	ldr	r2, [pc, #152]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b56:	4b25      	ldr	r3, [pc, #148]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	4013      	ands	r3, r2
 8000b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b7a:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	69ba      	ldr	r2, [r7, #24]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d003      	beq.n	8000ba4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ba4:	4a11      	ldr	r2, [pc, #68]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3301      	adds	r3, #1
 8000bae:	61fb      	str	r3, [r7, #28]
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	2b0f      	cmp	r3, #15
 8000bb4:	f67f ae90 	bls.w	80008d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000bb8:	bf00      	nop
 8000bba:	3724      	adds	r7, #36	; 0x24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40013800 	.word	0x40013800
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	40020400 	.word	0x40020400
 8000bd4:	40020800 	.word	0x40020800
 8000bd8:	40020c00 	.word	0x40020c00
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40021400 	.word	0x40021400
 8000be4:	40021800 	.word	0x40021800
 8000be8:	40021c00 	.word	0x40021c00
 8000bec:	40013c00 	.word	0x40013c00

08000bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	807b      	strh	r3, [r7, #2]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c00:	787b      	ldrb	r3, [r7, #1]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c06:	887a      	ldrh	r2, [r7, #2]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c0c:	e003      	b.n	8000c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c0e:	887b      	ldrh	r3, [r7, #2]
 8000c10:	041a      	lsls	r2, r3, #16
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	619a      	str	r2, [r3, #24]
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000c22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c24:	b08f      	sub	sp, #60	; 0x3c
 8000c26:	af0a      	add	r7, sp, #40	; 0x28
 8000c28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d101      	bne.n	8000c34 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e054      	b.n	8000cde <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d106      	bne.n	8000c54 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f005 ffea 	bl	8006c28 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2203      	movs	r2, #3
 8000c58:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d102      	bne.n	8000c6e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f003 fb74 	bl	8004360 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	687e      	ldr	r6, [r7, #4]
 8000c80:	466d      	mov	r5, sp
 8000c82:	f106 0410 	add.w	r4, r6, #16
 8000c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c92:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c96:	1d33      	adds	r3, r6, #4
 8000c98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c9a:	6838      	ldr	r0, [r7, #0]
 8000c9c:	f003 faee 	bl	800427c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f003 fb6b 	bl	8004382 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	687e      	ldr	r6, [r7, #4]
 8000cb4:	466d      	mov	r5, sp
 8000cb6:	f106 0410 	add.w	r4, r6, #16
 8000cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000cca:	1d33      	adds	r3, r6, #4
 8000ccc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cce:	6838      	ldr	r0, [r7, #0]
 8000cd0:	f003 fc7e 	bl	80045d0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ce6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000ce6:	b590      	push	{r4, r7, lr}
 8000ce8:	b089      	sub	sp, #36	; 0x24
 8000cea:	af04      	add	r7, sp, #16
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	4608      	mov	r0, r1
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	70fb      	strb	r3, [r7, #3]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	70bb      	strb	r3, [r7, #2]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d101      	bne.n	8000d0e <HAL_HCD_HC_Init+0x28>
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	e07f      	b.n	8000e0e <HAL_HCD_HC_Init+0x128>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2201      	movs	r2, #1
 8000d12:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000d16:	78fa      	ldrb	r2, [r7, #3]
 8000d18:	6879      	ldr	r1, [r7, #4]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	440b      	add	r3, r1
 8000d24:	333d      	adds	r3, #61	; 0x3d
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000d2a:	78fa      	ldrb	r2, [r7, #3]
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	440b      	add	r3, r1
 8000d38:	3338      	adds	r3, #56	; 0x38
 8000d3a:	787a      	ldrb	r2, [r7, #1]
 8000d3c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000d3e:	78fa      	ldrb	r2, [r7, #3]
 8000d40:	6879      	ldr	r1, [r7, #4]
 8000d42:	4613      	mov	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	440b      	add	r3, r1
 8000d4c:	3340      	adds	r3, #64	; 0x40
 8000d4e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000d50:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000d52:	78fa      	ldrb	r2, [r7, #3]
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	4613      	mov	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4413      	add	r3, r2
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	440b      	add	r3, r1
 8000d60:	3339      	adds	r3, #57	; 0x39
 8000d62:	78fa      	ldrb	r2, [r7, #3]
 8000d64:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000d66:	78fa      	ldrb	r2, [r7, #3]
 8000d68:	6879      	ldr	r1, [r7, #4]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4413      	add	r3, r2
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	440b      	add	r3, r1
 8000d74:	333f      	adds	r3, #63	; 0x3f
 8000d76:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000d7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000d7c:	78fa      	ldrb	r2, [r7, #3]
 8000d7e:	78bb      	ldrb	r3, [r7, #2]
 8000d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d84:	b2d8      	uxtb	r0, r3
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	440b      	add	r3, r1
 8000d92:	333a      	adds	r3, #58	; 0x3a
 8000d94:	4602      	mov	r2, r0
 8000d96:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000d98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	da0a      	bge.n	8000db6 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000da0:	78fa      	ldrb	r2, [r7, #3]
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	4613      	mov	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	440b      	add	r3, r1
 8000dae:	333b      	adds	r3, #59	; 0x3b
 8000db0:	2201      	movs	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]
 8000db4:	e009      	b.n	8000dca <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000db6:	78fa      	ldrb	r2, [r7, #3]
 8000db8:	6879      	ldr	r1, [r7, #4]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	440b      	add	r3, r1
 8000dc4:	333b      	adds	r3, #59	; 0x3b
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000dca:	78fa      	ldrb	r2, [r7, #3]
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	440b      	add	r3, r1
 8000dd8:	333c      	adds	r3, #60	; 0x3c
 8000dda:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000dde:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6818      	ldr	r0, [r3, #0]
 8000de4:	787c      	ldrb	r4, [r7, #1]
 8000de6:	78ba      	ldrb	r2, [r7, #2]
 8000de8:	78f9      	ldrb	r1, [r7, #3]
 8000dea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000dec:	9302      	str	r3, [sp, #8]
 8000dee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	f003 fd28 	bl	8004850 <USB_HC_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd90      	pop	{r4, r7, pc}

08000e16 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b084      	sub	sp, #16
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	460b      	mov	r3, r1
 8000e20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d101      	bne.n	8000e34 <HAL_HCD_HC_Halt+0x1e>
 8000e30:	2302      	movs	r3, #2
 8000e32:	e00f      	b.n	8000e54 <HAL_HCD_HC_Halt+0x3e>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2201      	movs	r2, #1
 8000e38:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	78fa      	ldrb	r2, [r7, #3]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f003 ff62 	bl	8004d0e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	4608      	mov	r0, r1
 8000e66:	4611      	mov	r1, r2
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	70fb      	strb	r3, [r7, #3]
 8000e6e:	460b      	mov	r3, r1
 8000e70:	70bb      	strb	r3, [r7, #2]
 8000e72:	4613      	mov	r3, r2
 8000e74:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000e76:	78fa      	ldrb	r2, [r7, #3]
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	440b      	add	r3, r1
 8000e84:	333b      	adds	r3, #59	; 0x3b
 8000e86:	78ba      	ldrb	r2, [r7, #2]
 8000e88:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000e8a:	78fa      	ldrb	r2, [r7, #3]
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	440b      	add	r3, r1
 8000e98:	333f      	adds	r3, #63	; 0x3f
 8000e9a:	787a      	ldrb	r2, [r7, #1]
 8000e9c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000e9e:	7c3b      	ldrb	r3, [r7, #16]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10a      	bne.n	8000eba <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000ea4:	78fa      	ldrb	r2, [r7, #3]
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	440b      	add	r3, r1
 8000eb2:	3342      	adds	r3, #66	; 0x42
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	701a      	strb	r2, [r3, #0]
 8000eb8:	e009      	b.n	8000ece <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000eba:	78fa      	ldrb	r2, [r7, #3]
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	440b      	add	r3, r1
 8000ec8:	3342      	adds	r3, #66	; 0x42
 8000eca:	2202      	movs	r2, #2
 8000ecc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000ece:	787b      	ldrb	r3, [r7, #1]
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	f200 80d6 	bhi.w	8001082 <HAL_HCD_HC_SubmitRequest+0x226>
 8000ed6:	a201      	add	r2, pc, #4	; (adr r2, 8000edc <HAL_HCD_HC_SubmitRequest+0x80>)
 8000ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000edc:	08000eed 	.word	0x08000eed
 8000ee0:	0800106d 	.word	0x0800106d
 8000ee4:	08000f59 	.word	0x08000f59
 8000ee8:	08000fe3 	.word	0x08000fe3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000eec:	7c3b      	ldrb	r3, [r7, #16]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	f040 80c9 	bne.w	8001086 <HAL_HCD_HC_SubmitRequest+0x22a>
 8000ef4:	78bb      	ldrb	r3, [r7, #2]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f040 80c5 	bne.w	8001086 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8000efc:	8b3b      	ldrh	r3, [r7, #24]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d109      	bne.n	8000f16 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000f02:	78fa      	ldrb	r2, [r7, #3]
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	4613      	mov	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	440b      	add	r3, r1
 8000f10:	3351      	adds	r3, #81	; 0x51
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f16:	78fa      	ldrb	r2, [r7, #3]
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	440b      	add	r3, r1
 8000f24:	3351      	adds	r3, #81	; 0x51
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d10a      	bne.n	8000f42 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f2c:	78fa      	ldrb	r2, [r7, #3]
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	4613      	mov	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	440b      	add	r3, r1
 8000f3a:	3342      	adds	r3, #66	; 0x42
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000f40:	e0a1      	b.n	8001086 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f42:	78fa      	ldrb	r2, [r7, #3]
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	4613      	mov	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	440b      	add	r3, r1
 8000f50:	3342      	adds	r3, #66	; 0x42
 8000f52:	2202      	movs	r2, #2
 8000f54:	701a      	strb	r2, [r3, #0]
      break;
 8000f56:	e096      	b.n	8001086 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000f58:	78bb      	ldrb	r3, [r7, #2]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d120      	bne.n	8000fa0 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f5e:	78fa      	ldrb	r2, [r7, #3]
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	440b      	add	r3, r1
 8000f6c:	3351      	adds	r3, #81	; 0x51
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10a      	bne.n	8000f8a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f74:	78fa      	ldrb	r2, [r7, #3]
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	440b      	add	r3, r1
 8000f82:	3342      	adds	r3, #66	; 0x42
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000f88:	e07e      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f8a:	78fa      	ldrb	r2, [r7, #3]
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	440b      	add	r3, r1
 8000f98:	3342      	adds	r3, #66	; 0x42
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	701a      	strb	r2, [r3, #0]
      break;
 8000f9e:	e073      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000fa0:	78fa      	ldrb	r2, [r7, #3]
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	440b      	add	r3, r1
 8000fae:	3350      	adds	r3, #80	; 0x50
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d10a      	bne.n	8000fcc <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fb6:	78fa      	ldrb	r2, [r7, #3]
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	440b      	add	r3, r1
 8000fc4:	3342      	adds	r3, #66	; 0x42
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
      break;
 8000fca:	e05d      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000fcc:	78fa      	ldrb	r2, [r7, #3]
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	440b      	add	r3, r1
 8000fda:	3342      	adds	r3, #66	; 0x42
 8000fdc:	2202      	movs	r2, #2
 8000fde:	701a      	strb	r2, [r3, #0]
      break;
 8000fe0:	e052      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8000fe2:	78bb      	ldrb	r3, [r7, #2]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d120      	bne.n	800102a <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000fe8:	78fa      	ldrb	r2, [r7, #3]
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	440b      	add	r3, r1
 8000ff6:	3351      	adds	r3, #81	; 0x51
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10a      	bne.n	8001014 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ffe:	78fa      	ldrb	r2, [r7, #3]
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	440b      	add	r3, r1
 800100c:	3342      	adds	r3, #66	; 0x42
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001012:	e039      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001014:	78fa      	ldrb	r2, [r7, #3]
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	440b      	add	r3, r1
 8001022:	3342      	adds	r3, #66	; 0x42
 8001024:	2202      	movs	r2, #2
 8001026:	701a      	strb	r2, [r3, #0]
      break;
 8001028:	e02e      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800102a:	78fa      	ldrb	r2, [r7, #3]
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	440b      	add	r3, r1
 8001038:	3350      	adds	r3, #80	; 0x50
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10a      	bne.n	8001056 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001040:	78fa      	ldrb	r2, [r7, #3]
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	4613      	mov	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	440b      	add	r3, r1
 800104e:	3342      	adds	r3, #66	; 0x42
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
      break;
 8001054:	e018      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001056:	78fa      	ldrb	r2, [r7, #3]
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	440b      	add	r3, r1
 8001064:	3342      	adds	r3, #66	; 0x42
 8001066:	2202      	movs	r2, #2
 8001068:	701a      	strb	r2, [r3, #0]
      break;
 800106a:	e00d      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800106c:	78fa      	ldrb	r2, [r7, #3]
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4613      	mov	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	440b      	add	r3, r1
 800107a:	3342      	adds	r3, #66	; 0x42
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
      break;
 8001080:	e002      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001082:	bf00      	nop
 8001084:	e000      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001086:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001088:	78fa      	ldrb	r2, [r7, #3]
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	440b      	add	r3, r1
 8001096:	3344      	adds	r3, #68	; 0x44
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800109c:	78fa      	ldrb	r2, [r7, #3]
 800109e:	8b39      	ldrh	r1, [r7, #24]
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4403      	add	r3, r0
 80010ac:	3348      	adds	r3, #72	; 0x48
 80010ae:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80010b0:	78fa      	ldrb	r2, [r7, #3]
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	440b      	add	r3, r1
 80010be:	335c      	adds	r3, #92	; 0x5c
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80010c4:	78fa      	ldrb	r2, [r7, #3]
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	440b      	add	r3, r1
 80010d2:	334c      	adds	r3, #76	; 0x4c
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80010d8:	78fa      	ldrb	r2, [r7, #3]
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	440b      	add	r3, r1
 80010e6:	3339      	adds	r3, #57	; 0x39
 80010e8:	78fa      	ldrb	r2, [r7, #3]
 80010ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80010ec:	78fa      	ldrb	r2, [r7, #3]
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	440b      	add	r3, r1
 80010fa:	335d      	adds	r3, #93	; 0x5d
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	78fa      	ldrb	r2, [r7, #3]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	3338      	adds	r3, #56	; 0x38
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	18d1      	adds	r1, r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	f003 fca2 	bl	8004a64 <USB_HC_StartXfer>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop

0800112c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f003 fa01 	bl	800454a <USB_GetMode>
 8001148:	4603      	mov	r3, r0
 800114a:	2b01      	cmp	r3, #1
 800114c:	f040 80f1 	bne.w	8001332 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f003 f9e5 	bl	8004524 <USB_ReadInterrupts>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 80e7 	beq.w	8001330 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f003 f9dc 	bl	8004524 <USB_ReadInterrupts>
 800116c:	4603      	mov	r3, r0
 800116e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001172:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001176:	d104      	bne.n	8001182 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001180:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f003 f9cc 	bl	8004524 <USB_ReadInterrupts>
 800118c:	4603      	mov	r3, r0
 800118e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001196:	d104      	bne.n	80011a2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80011a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f003 f9bc 	bl	8004524 <USB_ReadInterrupts>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80011b6:	d104      	bne.n	80011c2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f003 f9ac 	bl	8004524 <USB_ReadInterrupts>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d103      	bne.n	80011de <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2202      	movs	r2, #2
 80011dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f003 f99e 	bl	8004524 <USB_ReadInterrupts>
 80011e8:	4603      	mov	r3, r0
 80011ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011f2:	d117      	bne.n	8001224 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001202:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001206:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f005 fd8b 	bl	8006d24 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2101      	movs	r1, #1
 8001214:	4618      	mov	r0, r3
 8001216:	f003 fa97 	bl	8004748 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001222:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f003 f97b 	bl	8004524 <USB_ReadInterrupts>
 800122e:	4603      	mov	r3, r0
 8001230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001238:	d102      	bne.n	8001240 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f001 f8ac 	bl	8002398 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f003 f96d 	bl	8004524 <USB_ReadInterrupts>
 800124a:	4603      	mov	r3, r0
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	2b08      	cmp	r3, #8
 8001252:	d106      	bne.n	8001262 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f005 fd49 	bl	8006cec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2208      	movs	r2, #8
 8001260:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f003 f95c 	bl	8004524 <USB_ReadInterrupts>
 800126c:	4603      	mov	r3, r0
 800126e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001272:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001276:	d138      	bne.n	80012ea <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f003 fd35 	bl	8004cec <USB_HC_ReadInterrupt>
 8001282:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	e025      	b.n	80012d6 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	f003 030f 	and.w	r3, r3, #15
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	fa22 f303 	lsr.w	r3, r2, r3
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d018      	beq.n	80012d0 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	015a      	lsls	r2, r3, #5
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4413      	add	r3, r2
 80012a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012b4:	d106      	bne.n	80012c4 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	4619      	mov	r1, r3
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f8b3 	bl	8001428 <HCD_HC_IN_IRQHandler>
 80012c2:	e005      	b.n	80012d0 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	4619      	mov	r1, r3
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 fc43 	bl	8001b56 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	3301      	adds	r3, #1
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d3d4      	bcc.n	800128a <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f003 f918 	bl	8004524 <USB_ReadInterrupts>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	2b10      	cmp	r3, #16
 80012fc:	d101      	bne.n	8001302 <HAL_HCD_IRQHandler+0x1d6>
 80012fe:	2301      	movs	r3, #1
 8001300:	e000      	b.n	8001304 <HAL_HCD_IRQHandler+0x1d8>
 8001302:	2300      	movs	r3, #0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d014      	beq.n	8001332 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	699a      	ldr	r2, [r3, #24]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0210 	bic.w	r2, r2, #16
 8001316:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 ff91 	bl	8002240 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	699a      	ldr	r2, [r3, #24]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f042 0210 	orr.w	r2, r2, #16
 800132c:	619a      	str	r2, [r3, #24]
 800132e:	e000      	b.n	8001332 <HAL_HCD_IRQHandler+0x206>
      return;
 8001330:	bf00      	nop
    }
  }
}
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001346:	2b01      	cmp	r3, #1
 8001348:	d101      	bne.n	800134e <HAL_HCD_Start+0x16>
 800134a:	2302      	movs	r3, #2
 800134c:	e013      	b.n	8001376 <HAL_HCD_Start+0x3e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f002 ffef 	bl	800433e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2101      	movs	r1, #1
 8001366:	4618      	mov	r0, r3
 8001368:	f003 fa28 	bl	80047bc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800138c:	2b01      	cmp	r3, #1
 800138e:	d101      	bne.n	8001394 <HAL_HCD_Stop+0x16>
 8001390:	2302      	movs	r3, #2
 8001392:	e00d      	b.n	80013b0 <HAL_HCD_Stop+0x32>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 fdef 	bl	8004f84 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80013c4:	78fa      	ldrb	r2, [r7, #3]
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	440b      	add	r3, r1
 80013d2:	335c      	adds	r3, #92	; 0x5c
 80013d4:	781b      	ldrb	r3, [r3, #0]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	460b      	mov	r3, r1
 80013ec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80013ee:	78fa      	ldrb	r2, [r7, #3]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	440b      	add	r3, r1
 80013fc:	334c      	adds	r3, #76	; 0x4c
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f003 fa08 	bl	800482e <USB_GetCurrentFrame>
 800141e:	4603      	mov	r3, r0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800143e:	78fb      	ldrb	r3, [r7, #3]
 8001440:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	015a      	lsls	r2, r3, #5
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4413      	add	r3, r2
 800144a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b04      	cmp	r3, #4
 8001456:	d119      	bne.n	800148c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	015a      	lsls	r2, r3, #5
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4413      	add	r3, r2
 8001460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001464:	461a      	mov	r2, r3
 8001466:	2304      	movs	r3, #4
 8001468:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	015a      	lsls	r2, r3, #5
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4413      	add	r3, r2
 8001472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	0151      	lsls	r1, r2, #5
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	440a      	add	r2, r1
 8001480:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	60d3      	str	r3, [r2, #12]
 800148a:	e095      	b.n	80015b8 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	015a      	lsls	r2, r3, #5
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4413      	add	r3, r2
 8001494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 0320 	and.w	r3, r3, #32
 800149e:	2b20      	cmp	r3, #32
 80014a0:	d109      	bne.n	80014b6 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	015a      	lsls	r2, r3, #5
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4413      	add	r3, r2
 80014aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014ae:	461a      	mov	r2, r3
 80014b0:	2320      	movs	r3, #32
 80014b2:	6093      	str	r3, [r2, #8]
 80014b4:	e080      	b.n	80015b8 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	015a      	lsls	r2, r3, #5
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4413      	add	r3, r2
 80014be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d134      	bne.n	8001536 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	015a      	lsls	r2, r3, #5
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4413      	add	r3, r2
 80014d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	0151      	lsls	r1, r2, #5
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	440a      	add	r2, r1
 80014e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80014e6:	f043 0302 	orr.w	r3, r3, #2
 80014ea:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	440b      	add	r3, r1
 80014fa:	335d      	adds	r3, #93	; 0x5d
 80014fc:	2205      	movs	r2, #5
 80014fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	015a      	lsls	r2, r3, #5
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4413      	add	r3, r2
 8001508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800150c:	461a      	mov	r2, r3
 800150e:	2310      	movs	r3, #16
 8001510:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	015a      	lsls	r2, r3, #5
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4413      	add	r3, r2
 800151a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800151e:	461a      	mov	r2, r3
 8001520:	2308      	movs	r3, #8
 8001522:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	4611      	mov	r1, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f003 fbed 	bl	8004d0e <USB_HC_Halt>
 8001534:	e040      	b.n	80015b8 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	015a      	lsls	r2, r3, #5
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4413      	add	r3, r2
 800153e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800154c:	d134      	bne.n	80015b8 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	015a      	lsls	r2, r3, #5
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4413      	add	r3, r2
 8001556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	0151      	lsls	r1, r2, #5
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	440a      	add	r2, r1
 8001564:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f003 fbc8 	bl	8004d0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	015a      	lsls	r2, r3, #5
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4413      	add	r3, r2
 8001586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800158a:	461a      	mov	r2, r3
 800158c:	2310      	movs	r3, #16
 800158e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	440b      	add	r3, r1
 800159e:	335d      	adds	r3, #93	; 0x5d
 80015a0:	2208      	movs	r2, #8
 80015a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	015a      	lsls	r2, r3, #5
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4413      	add	r3, r2
 80015ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015b0:	461a      	mov	r2, r3
 80015b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015b6:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	015a      	lsls	r2, r3, #5
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4413      	add	r3, r2
 80015c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ce:	d122      	bne.n	8001616 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	015a      	lsls	r2, r3, #5
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4413      	add	r3, r2
 80015d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	0151      	lsls	r1, r2, #5
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	440a      	add	r2, r1
 80015e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80015ea:	f043 0302 	orr.w	r3, r3, #2
 80015ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 fb87 	bl	8004d0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	015a      	lsls	r2, r3, #5
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4413      	add	r3, r2
 8001608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800160c:	461a      	mov	r2, r3
 800160e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001612:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001614:	e29b      	b.n	8001b4e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	015a      	lsls	r2, r3, #5
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4413      	add	r3, r2
 800161e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b01      	cmp	r3, #1
 800162a:	f040 80c1 	bne.w	80017b0 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d01b      	beq.n	800166e <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	440b      	add	r3, r1
 8001644:	3348      	adds	r3, #72	; 0x48
 8001646:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	0159      	lsls	r1, r3, #5
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	440b      	add	r3, r1
 8001650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800165a:	1ad1      	subs	r1, r2, r3
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	4403      	add	r3, r0
 800166a:	334c      	adds	r3, #76	; 0x4c
 800166c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	440b      	add	r3, r1
 800167c:	335d      	adds	r3, #93	; 0x5d
 800167e:	2201      	movs	r2, #1
 8001680:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	440b      	add	r3, r1
 8001690:	3358      	adds	r3, #88	; 0x58
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	015a      	lsls	r2, r3, #5
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4413      	add	r3, r2
 800169e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016a2:	461a      	mov	r2, r3
 80016a4:	2301      	movs	r3, #1
 80016a6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	440b      	add	r3, r1
 80016b6:	333f      	adds	r3, #63	; 0x3f
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00a      	beq.n	80016d4 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	440b      	add	r3, r1
 80016cc:	333f      	adds	r3, #63	; 0x3f
 80016ce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d121      	bne.n	8001718 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	015a      	lsls	r2, r3, #5
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4413      	add	r3, r2
 80016dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	0151      	lsls	r1, r2, #5
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	440a      	add	r2, r1
 80016ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016ee:	f043 0302 	orr.w	r3, r3, #2
 80016f2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	4611      	mov	r1, r2
 80016fe:	4618      	mov	r0, r3
 8001700:	f003 fb05 	bl	8004d0e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	015a      	lsls	r2, r3, #5
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4413      	add	r3, r2
 800170c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001710:	461a      	mov	r2, r3
 8001712:	2310      	movs	r3, #16
 8001714:	6093      	str	r3, [r2, #8]
 8001716:	e034      	b.n	8001782 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	440b      	add	r3, r1
 8001726:	333f      	adds	r3, #63	; 0x3f
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b03      	cmp	r3, #3
 800172c:	d129      	bne.n	8001782 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	015a      	lsls	r2, r3, #5
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4413      	add	r3, r2
 8001736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	0151      	lsls	r1, r2, #5
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	440a      	add	r2, r1
 8001744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001748:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800174c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	440b      	add	r3, r1
 800175c:	335c      	adds	r3, #92	; 0x5c
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	b2d8      	uxtb	r0, r3
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	440b      	add	r3, r1
 8001774:	335c      	adds	r3, #92	; 0x5c
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	4601      	mov	r1, r0
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f005 fadf 	bl	8006d40 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	440b      	add	r3, r1
 8001790:	3350      	adds	r3, #80	; 0x50
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	f083 0301 	eor.w	r3, r3, #1
 8001798:	b2d8      	uxtb	r0, r3
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	440b      	add	r3, r1
 80017a8:	3350      	adds	r3, #80	; 0x50
 80017aa:	4602      	mov	r2, r0
 80017ac:	701a      	strb	r2, [r3, #0]
}
 80017ae:	e1ce      	b.n	8001b4e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	015a      	lsls	r2, r3, #5
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4413      	add	r3, r2
 80017b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	f040 80f1 	bne.w	80019aa <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	015a      	lsls	r2, r3, #5
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4413      	add	r3, r2
 80017d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	0151      	lsls	r1, r2, #5
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	440a      	add	r2, r1
 80017de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017e2:	f023 0302 	bic.w	r3, r3, #2
 80017e6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	440b      	add	r3, r1
 80017f6:	335d      	adds	r3, #93	; 0x5d
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d10a      	bne.n	8001814 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	440b      	add	r3, r1
 800180c:	335c      	adds	r3, #92	; 0x5c
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	e0b0      	b.n	8001976 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	440b      	add	r3, r1
 8001822:	335d      	adds	r3, #93	; 0x5d
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b05      	cmp	r3, #5
 8001828:	d10a      	bne.n	8001840 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
 8001838:	335c      	adds	r3, #92	; 0x5c
 800183a:	2205      	movs	r2, #5
 800183c:	701a      	strb	r2, [r3, #0]
 800183e:	e09a      	b.n	8001976 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	440b      	add	r3, r1
 800184e:	335d      	adds	r3, #93	; 0x5d
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b06      	cmp	r3, #6
 8001854:	d00a      	beq.n	800186c <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	440b      	add	r3, r1
 8001864:	335d      	adds	r3, #93	; 0x5d
 8001866:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001868:	2b08      	cmp	r3, #8
 800186a:	d156      	bne.n	800191a <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	440b      	add	r3, r1
 800187a:	3358      	adds	r3, #88	; 0x58
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	1c59      	adds	r1, r3, #1
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4403      	add	r3, r0
 800188e:	3358      	adds	r3, #88	; 0x58
 8001890:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	440b      	add	r3, r1
 80018a0:	3358      	adds	r3, #88	; 0x58
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d914      	bls.n	80018d2 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	440b      	add	r3, r1
 80018b6:	3358      	adds	r3, #88	; 0x58
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	440b      	add	r3, r1
 80018ca:	335c      	adds	r3, #92	; 0x5c
 80018cc:	2204      	movs	r2, #4
 80018ce:	701a      	strb	r2, [r3, #0]
 80018d0:	e009      	b.n	80018e6 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	440b      	add	r3, r1
 80018e0:	335c      	adds	r3, #92	; 0x5c
 80018e2:	2202      	movs	r2, #2
 80018e4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	015a      	lsls	r2, r3, #5
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4413      	add	r3, r2
 80018ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80018fc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001904:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	015a      	lsls	r2, r3, #5
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4413      	add	r3, r2
 800190e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001912:	461a      	mov	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	e02d      	b.n	8001976 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	440b      	add	r3, r1
 8001928:	335d      	adds	r3, #93	; 0x5d
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b03      	cmp	r3, #3
 800192e:	d122      	bne.n	8001976 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	440b      	add	r3, r1
 800193e:	335c      	adds	r3, #92	; 0x5c
 8001940:	2202      	movs	r2, #2
 8001942:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	015a      	lsls	r2, r3, #5
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4413      	add	r3, r2
 800194c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800195a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001962:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	015a      	lsls	r2, r3, #5
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	4413      	add	r3, r2
 800196c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001970:	461a      	mov	r2, r3
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	015a      	lsls	r2, r3, #5
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4413      	add	r3, r2
 800197e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001982:	461a      	mov	r2, r3
 8001984:	2302      	movs	r3, #2
 8001986:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	b2d8      	uxtb	r0, r3
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	440b      	add	r3, r1
 800199a:	335c      	adds	r3, #92	; 0x5c
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	4601      	mov	r1, r0
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f005 f9cc 	bl	8006d40 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80019a8:	e0d1      	b.n	8001b4e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	015a      	lsls	r2, r3, #5
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019bc:	2b80      	cmp	r3, #128	; 0x80
 80019be:	d13e      	bne.n	8001a3e <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	015a      	lsls	r2, r3, #5
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4413      	add	r3, r2
 80019c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	0151      	lsls	r1, r2, #5
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	440a      	add	r2, r1
 80019d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019da:	f043 0302 	orr.w	r3, r3, #2
 80019de:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	440b      	add	r3, r1
 80019ee:	3358      	adds	r3, #88	; 0x58
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	1c59      	adds	r1, r3, #1
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4403      	add	r3, r0
 8001a02:	3358      	adds	r3, #88	; 0x58
 8001a04:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	440b      	add	r3, r1
 8001a14:	335d      	adds	r3, #93	; 0x5d
 8001a16:	2206      	movs	r2, #6
 8001a18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f003 f972 	bl	8004d0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	015a      	lsls	r2, r3, #5
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4413      	add	r3, r2
 8001a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a36:	461a      	mov	r2, r3
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	6093      	str	r3, [r2, #8]
}
 8001a3c:	e087      	b.n	8001b4e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	015a      	lsls	r2, r3, #5
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4413      	add	r3, r2
 8001a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 0310 	and.w	r3, r3, #16
 8001a50:	2b10      	cmp	r3, #16
 8001a52:	d17c      	bne.n	8001b4e <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	440b      	add	r3, r1
 8001a62:	333f      	adds	r3, #63	; 0x3f
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d122      	bne.n	8001ab0 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	440b      	add	r3, r1
 8001a78:	3358      	adds	r3, #88	; 0x58
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	015a      	lsls	r2, r3, #5
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4413      	add	r3, r2
 8001a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	0151      	lsls	r1, r2, #5
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	440a      	add	r2, r1
 8001a94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f003 f930 	bl	8004d0e <USB_HC_Halt>
 8001aae:	e045      	b.n	8001b3c <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	440b      	add	r3, r1
 8001abe:	333f      	adds	r3, #63	; 0x3f
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00a      	beq.n	8001adc <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	440b      	add	r3, r1
 8001ad4:	333f      	adds	r3, #63	; 0x3f
 8001ad6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d12f      	bne.n	8001b3c <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	440b      	add	r3, r1
 8001aea:	3358      	adds	r3, #88	; 0x58
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d121      	bne.n	8001b3c <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	440b      	add	r3, r1
 8001b06:	335d      	adds	r3, #93	; 0x5d
 8001b08:	2203      	movs	r2, #3
 8001b0a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	015a      	lsls	r2, r3, #5
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4413      	add	r3, r2
 8001b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	0151      	lsls	r1, r2, #5
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	440a      	add	r2, r1
 8001b22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b26:	f043 0302 	orr.w	r3, r3, #2
 8001b2a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 f8e9 	bl	8004d0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	015a      	lsls	r2, r3, #5
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4413      	add	r3, r2
 8001b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b48:	461a      	mov	r2, r3
 8001b4a:	2310      	movs	r3, #16
 8001b4c:	6093      	str	r3, [r2, #8]
}
 8001b4e:	bf00      	nop
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	015a      	lsls	r2, r3, #5
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4413      	add	r3, r2
 8001b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d119      	bne.n	8001bba <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	015a      	lsls	r2, r3, #5
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b92:	461a      	mov	r2, r3
 8001b94:	2304      	movs	r3, #4
 8001b96:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	015a      	lsls	r2, r3, #5
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	0151      	lsls	r1, r2, #5
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	440a      	add	r2, r1
 8001bae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bb2:	f043 0302 	orr.w	r3, r3, #2
 8001bb6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001bb8:	e33e      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	015a      	lsls	r2, r3, #5
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0320 	and.w	r3, r3, #32
 8001bcc:	2b20      	cmp	r3, #32
 8001bce:	d141      	bne.n	8001c54 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	015a      	lsls	r2, r3, #5
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bdc:	461a      	mov	r2, r3
 8001bde:	2320      	movs	r3, #32
 8001be0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	440b      	add	r3, r1
 8001bf0:	333d      	adds	r3, #61	; 0x3d
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	f040 831f 	bne.w	8002238 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	333d      	adds	r3, #61	; 0x3d
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	440b      	add	r3, r1
 8001c1c:	335c      	adds	r3, #92	; 0x5c
 8001c1e:	2202      	movs	r2, #2
 8001c20:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	015a      	lsls	r2, r3, #5
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	0151      	lsls	r1, r2, #5
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	440a      	add	r2, r1
 8001c38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 f85e 	bl	8004d0e <USB_HC_Halt>
}
 8001c52:	e2f1      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	015a      	lsls	r2, r3, #5
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c66:	2b40      	cmp	r3, #64	; 0x40
 8001c68:	d13f      	bne.n	8001cea <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	440b      	add	r3, r1
 8001c78:	335d      	adds	r3, #93	; 0x5d
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	440b      	add	r3, r1
 8001c8c:	333d      	adds	r3, #61	; 0x3d
 8001c8e:	2201      	movs	r2, #1
 8001c90:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	440b      	add	r3, r1
 8001ca0:	3358      	adds	r3, #88	; 0x58
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	015a      	lsls	r2, r3, #5
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	0151      	lsls	r1, r2, #5
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	440a      	add	r2, r1
 8001cbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f003 f81c 	bl	8004d0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	015a      	lsls	r2, r3, #5
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4413      	add	r3, r2
 8001cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	2340      	movs	r3, #64	; 0x40
 8001ce6:	6093      	str	r3, [r2, #8]
}
 8001ce8:	e2a6      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	015a      	lsls	r2, r3, #5
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d00:	d122      	bne.n	8001d48 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	015a      	lsls	r2, r3, #5
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	0151      	lsls	r1, r2, #5
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	440a      	add	r2, r1
 8001d18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f002 ffee 	bl	8004d0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	015a      	lsls	r2, r3, #5
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4413      	add	r3, r2
 8001d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3e:	461a      	mov	r2, r3
 8001d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d44:	6093      	str	r3, [r2, #8]
}
 8001d46:	e277      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	015a      	lsls	r2, r3, #5
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4413      	add	r3, r2
 8001d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d135      	bne.n	8001dca <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	440b      	add	r3, r1
 8001d6c:	3358      	adds	r3, #88	; 0x58
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	015a      	lsls	r2, r3, #5
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	0151      	lsls	r1, r2, #5
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	440a      	add	r2, r1
 8001d88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f002 ffb6 	bl	8004d0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dae:	461a      	mov	r2, r3
 8001db0:	2301      	movs	r3, #1
 8001db2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	440b      	add	r3, r1
 8001dc2:	335d      	adds	r3, #93	; 0x5d
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]
}
 8001dc8:	e236      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d12b      	bne.n	8001e38 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	015a      	lsls	r2, r3, #5
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4413      	add	r3, r2
 8001de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dec:	461a      	mov	r2, r3
 8001dee:	2308      	movs	r3, #8
 8001df0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	015a      	lsls	r2, r3, #5
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	0151      	lsls	r1, r2, #5
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	440a      	add	r2, r1
 8001e08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f002 ff76 	bl	8004d0e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	440b      	add	r3, r1
 8001e30:	335d      	adds	r3, #93	; 0x5d
 8001e32:	2205      	movs	r2, #5
 8001e34:	701a      	strb	r2, [r3, #0]
}
 8001e36:	e1ff      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	015a      	lsls	r2, r3, #5
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 0310 	and.w	r3, r3, #16
 8001e4a:	2b10      	cmp	r3, #16
 8001e4c:	d155      	bne.n	8001efa <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	440b      	add	r3, r1
 8001e5c:	3358      	adds	r3, #88	; 0x58
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	440b      	add	r3, r1
 8001e70:	335d      	adds	r3, #93	; 0x5d
 8001e72:	2203      	movs	r2, #3
 8001e74:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	440b      	add	r3, r1
 8001e84:	333d      	adds	r3, #61	; 0x3d
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d114      	bne.n	8001eb6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	440b      	add	r3, r1
 8001e9a:	333c      	adds	r3, #60	; 0x3c
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d109      	bne.n	8001eb6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	440b      	add	r3, r1
 8001eb0:	333d      	adds	r3, #61	; 0x3d
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	0151      	lsls	r1, r2, #5
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	440a      	add	r2, r1
 8001ecc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f002 ff14 	bl	8004d0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	015a      	lsls	r2, r3, #5
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2310      	movs	r3, #16
 8001ef6:	6093      	str	r3, [r2, #8]
}
 8001ef8:	e19e      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0c:	2b80      	cmp	r3, #128	; 0x80
 8001f0e:	d12b      	bne.n	8001f68 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	0151      	lsls	r1, r2, #5
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	440a      	add	r2, r1
 8001f26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f2a:	f043 0302 	orr.w	r3, r3, #2
 8001f2e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f002 fee7 	bl	8004d0e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	440b      	add	r3, r1
 8001f4e:	335d      	adds	r3, #93	; 0x5d
 8001f50:	2206      	movs	r2, #6
 8001f52:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f60:	461a      	mov	r2, r3
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	6093      	str	r3, [r2, #8]
}
 8001f66:	e167      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f7e:	d135      	bne.n	8001fec <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	0151      	lsls	r1, r2, #5
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	440a      	add	r2, r1
 8001f96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f9a:	f043 0302 	orr.w	r3, r3, #2
 8001f9e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	4611      	mov	r1, r2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f002 feaf 	bl	8004d0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	015a      	lsls	r2, r3, #5
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	2310      	movs	r3, #16
 8001fc0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	015a      	lsls	r2, r3, #5
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fd4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	440b      	add	r3, r1
 8001fe4:	335d      	adds	r3, #93	; 0x5d
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	701a      	strb	r2, [r3, #0]
}
 8001fea:	e125      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	f040 811a 	bne.w	8002238 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	015a      	lsls	r2, r3, #5
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4413      	add	r3, r2
 800200c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	0151      	lsls	r1, r2, #5
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	440a      	add	r2, r1
 800201a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800201e:	f023 0302 	bic.w	r3, r3, #2
 8002022:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	440b      	add	r3, r1
 8002032:	335d      	adds	r3, #93	; 0x5d
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d137      	bne.n	80020aa <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	440b      	add	r3, r1
 8002048:	335c      	adds	r3, #92	; 0x5c
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	440b      	add	r3, r1
 800205c:	333f      	adds	r3, #63	; 0x3f
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d00b      	beq.n	800207c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	440b      	add	r3, r1
 8002072:	333f      	adds	r3, #63	; 0x3f
 8002074:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002076:	2b03      	cmp	r3, #3
 8002078:	f040 80c5 	bne.w	8002206 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	440b      	add	r3, r1
 800208a:	3351      	adds	r3, #81	; 0x51
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	f083 0301 	eor.w	r3, r3, #1
 8002092:	b2d8      	uxtb	r0, r3
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	440b      	add	r3, r1
 80020a2:	3351      	adds	r3, #81	; 0x51
 80020a4:	4602      	mov	r2, r0
 80020a6:	701a      	strb	r2, [r3, #0]
 80020a8:	e0ad      	b.n	8002206 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	440b      	add	r3, r1
 80020b8:	335d      	adds	r3, #93	; 0x5d
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d10a      	bne.n	80020d6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	440b      	add	r3, r1
 80020ce:	335c      	adds	r3, #92	; 0x5c
 80020d0:	2202      	movs	r2, #2
 80020d2:	701a      	strb	r2, [r3, #0]
 80020d4:	e097      	b.n	8002206 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	440b      	add	r3, r1
 80020e4:	335d      	adds	r3, #93	; 0x5d
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d10a      	bne.n	8002102 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	440b      	add	r3, r1
 80020fa:	335c      	adds	r3, #92	; 0x5c
 80020fc:	2202      	movs	r2, #2
 80020fe:	701a      	strb	r2, [r3, #0]
 8002100:	e081      	b.n	8002206 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	440b      	add	r3, r1
 8002110:	335d      	adds	r3, #93	; 0x5d
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b05      	cmp	r3, #5
 8002116:	d10a      	bne.n	800212e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	440b      	add	r3, r1
 8002126:	335c      	adds	r3, #92	; 0x5c
 8002128:	2205      	movs	r2, #5
 800212a:	701a      	strb	r2, [r3, #0]
 800212c:	e06b      	b.n	8002206 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	440b      	add	r3, r1
 800213c:	335d      	adds	r3, #93	; 0x5d
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b06      	cmp	r3, #6
 8002142:	d00a      	beq.n	800215a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	440b      	add	r3, r1
 8002152:	335d      	adds	r3, #93	; 0x5d
 8002154:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002156:	2b08      	cmp	r3, #8
 8002158:	d155      	bne.n	8002206 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	440b      	add	r3, r1
 8002168:	3358      	adds	r3, #88	; 0x58
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	1c59      	adds	r1, r3, #1
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4403      	add	r3, r0
 800217c:	3358      	adds	r3, #88	; 0x58
 800217e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	440b      	add	r3, r1
 800218e:	3358      	adds	r3, #88	; 0x58
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b03      	cmp	r3, #3
 8002194:	d914      	bls.n	80021c0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	440b      	add	r3, r1
 80021a4:	3358      	adds	r3, #88	; 0x58
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	440b      	add	r3, r1
 80021b8:	335c      	adds	r3, #92	; 0x5c
 80021ba:	2204      	movs	r2, #4
 80021bc:	701a      	strb	r2, [r3, #0]
 80021be:	e009      	b.n	80021d4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	440b      	add	r3, r1
 80021ce:	335c      	adds	r3, #92	; 0x5c
 80021d0:	2202      	movs	r2, #2
 80021d2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	015a      	lsls	r2, r3, #5
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4413      	add	r3, r2
 80021dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021ea:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021f2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002200:	461a      	mov	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4413      	add	r3, r2
 800220e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002212:	461a      	mov	r2, r3
 8002214:	2302      	movs	r3, #2
 8002216:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	b2d8      	uxtb	r0, r3
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	440b      	add	r3, r1
 800222a:	335c      	adds	r3, #92	; 0x5c
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	4601      	mov	r1, r0
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f004 fd84 	bl	8006d40 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002238:	bf00      	nop
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	; 0x28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	0c5b      	lsrs	r3, r3, #17
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	091b      	lsrs	r3, r3, #4
 8002270:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002274:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2b02      	cmp	r3, #2
 800227a:	d003      	beq.n	8002284 <HCD_RXQLVL_IRQHandler+0x44>
 800227c:	2b05      	cmp	r3, #5
 800227e:	f000 8082 	beq.w	8002386 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002282:	e083      	b.n	800238c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d07f      	beq.n	800238a <HCD_RXQLVL_IRQHandler+0x14a>
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	440b      	add	r3, r1
 8002298:	3344      	adds	r3, #68	; 0x44
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d074      	beq.n	800238a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	3344      	adds	r3, #68	; 0x44
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	b292      	uxth	r2, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	f002 f909 	bl	80044d2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	440b      	add	r3, r1
 80022ce:	3344      	adds	r3, #68	; 0x44
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	18d1      	adds	r1, r2, r3
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4403      	add	r3, r0
 80022e4:	3344      	adds	r3, #68	; 0x44
 80022e6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	440b      	add	r3, r1
 80022f6:	334c      	adds	r3, #76	; 0x4c
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	18d1      	adds	r1, r2, r3
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4403      	add	r3, r0
 800230c:	334c      	adds	r3, #76	; 0x4c
 800230e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	015a      	lsls	r2, r3, #5
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	4413      	add	r3, r2
 8002318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231c:	691a      	ldr	r2, [r3, #16]
 800231e:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <HCD_RXQLVL_IRQHandler+0x154>)
 8002320:	4013      	ands	r3, r2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d031      	beq.n	800238a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	4413      	add	r3, r2
 800232e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800233c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002344:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	015a      	lsls	r2, r3, #5
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	4413      	add	r3, r2
 800234e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	440b      	add	r3, r1
 8002366:	3350      	adds	r3, #80	; 0x50
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	f083 0301 	eor.w	r3, r3, #1
 800236e:	b2d8      	uxtb	r0, r3
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	440b      	add	r3, r1
 800237e:	3350      	adds	r3, #80	; 0x50
 8002380:	4602      	mov	r2, r0
 8002382:	701a      	strb	r2, [r3, #0]
      break;
 8002384:	e001      	b.n	800238a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002386:	bf00      	nop
 8002388:	e000      	b.n	800238c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800238a:	bf00      	nop
  }
}
 800238c:	bf00      	nop
 800238e:	3728      	adds	r7, #40	; 0x28
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	1ff80000 	.word	0x1ff80000

08002398 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80023c4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d113      	bne.n	80023f8 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d10a      	bne.n	80023f0 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699a      	ldr	r2, [r3, #24]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80023e8:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f004 fc8c 	bl	8006d08 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f043 0302 	orr.w	r3, r3, #2
 80023f6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d147      	bne.n	8002492 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	f043 0308 	orr.w	r3, r3, #8
 8002408:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b04      	cmp	r3, #4
 8002412:	d129      	bne.n	8002468 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d113      	bne.n	8002444 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002422:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002426:	d106      	bne.n	8002436 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2102      	movs	r1, #2
 800242e:	4618      	mov	r0, r3
 8002430:	f002 f98a 	bl	8004748 <USB_InitFSLSPClkSel>
 8002434:	e011      	b.n	800245a <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2101      	movs	r1, #1
 800243c:	4618      	mov	r0, r3
 800243e:	f002 f983 	bl	8004748 <USB_InitFSLSPClkSel>
 8002442:	e00a      	b.n	800245a <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d106      	bne.n	800245a <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002452:	461a      	mov	r2, r3
 8002454:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002458:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f004 fc7e 	bl	8006d5c <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f004 fc51 	bl	8006d08 <HAL_HCD_Connect_Callback>
 8002466:	e014      	b.n	8002492 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f004 fc85 	bl	8006d78 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800247c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002480:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699a      	ldr	r2, [r3, #24]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002490:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f003 0320 	and.w	r3, r3, #32
 8002498:	2b20      	cmp	r3, #32
 800249a:	d103      	bne.n	80024a4 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f043 0320 	orr.w	r3, r3, #32
 80024a2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80024aa:	461a      	mov	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	6013      	str	r3, [r2, #0]
}
 80024b0:	bf00      	nop
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e10f      	b.n	80026ea <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f004 f906 	bl	80066f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2224      	movs	r2, #36	; 0x24
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024fc:	f001 f9ac 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8002500:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4a7b      	ldr	r2, [pc, #492]	; (80026f4 <HAL_I2C_Init+0x23c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d807      	bhi.n	800251c <HAL_I2C_Init+0x64>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4a7a      	ldr	r2, [pc, #488]	; (80026f8 <HAL_I2C_Init+0x240>)
 8002510:	4293      	cmp	r3, r2
 8002512:	bf94      	ite	ls
 8002514:	2301      	movls	r3, #1
 8002516:	2300      	movhi	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	e006      	b.n	800252a <HAL_I2C_Init+0x72>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4a77      	ldr	r2, [pc, #476]	; (80026fc <HAL_I2C_Init+0x244>)
 8002520:	4293      	cmp	r3, r2
 8002522:	bf94      	ite	ls
 8002524:	2301      	movls	r3, #1
 8002526:	2300      	movhi	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e0db      	b.n	80026ea <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4a72      	ldr	r2, [pc, #456]	; (8002700 <HAL_I2C_Init+0x248>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	0c9b      	lsrs	r3, r3, #18
 800253c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	430a      	orrs	r2, r1
 8002550:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4a64      	ldr	r2, [pc, #400]	; (80026f4 <HAL_I2C_Init+0x23c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d802      	bhi.n	800256c <HAL_I2C_Init+0xb4>
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	3301      	adds	r3, #1
 800256a:	e009      	b.n	8002580 <HAL_I2C_Init+0xc8>
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002572:	fb02 f303 	mul.w	r3, r2, r3
 8002576:	4a63      	ldr	r2, [pc, #396]	; (8002704 <HAL_I2C_Init+0x24c>)
 8002578:	fba2 2303 	umull	r2, r3, r2, r3
 800257c:	099b      	lsrs	r3, r3, #6
 800257e:	3301      	adds	r3, #1
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	430b      	orrs	r3, r1
 8002586:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002592:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	4956      	ldr	r1, [pc, #344]	; (80026f4 <HAL_I2C_Init+0x23c>)
 800259c:	428b      	cmp	r3, r1
 800259e:	d80d      	bhi.n	80025bc <HAL_I2C_Init+0x104>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	1e59      	subs	r1, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	bf38      	it	cc
 80025b8:	2304      	movcc	r3, #4
 80025ba:	e04f      	b.n	800265c <HAL_I2C_Init+0x1a4>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d111      	bne.n	80025e8 <HAL_I2C_Init+0x130>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	1e58      	subs	r0, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6859      	ldr	r1, [r3, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	440b      	add	r3, r1
 80025d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025d6:	3301      	adds	r3, #1
 80025d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf0c      	ite	eq
 80025e0:	2301      	moveq	r3, #1
 80025e2:	2300      	movne	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	e012      	b.n	800260e <HAL_I2C_Init+0x156>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	1e58      	subs	r0, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6859      	ldr	r1, [r3, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	0099      	lsls	r1, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fe:	3301      	adds	r3, #1
 8002600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002604:	2b00      	cmp	r3, #0
 8002606:	bf0c      	ite	eq
 8002608:	2301      	moveq	r3, #1
 800260a:	2300      	movne	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_I2C_Init+0x15e>
 8002612:	2301      	movs	r3, #1
 8002614:	e022      	b.n	800265c <HAL_I2C_Init+0x1a4>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10e      	bne.n	800263c <HAL_I2C_Init+0x184>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1e58      	subs	r0, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6859      	ldr	r1, [r3, #4]
 8002626:	460b      	mov	r3, r1
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	440b      	add	r3, r1
 800262c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002630:	3301      	adds	r3, #1
 8002632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800263a:	e00f      	b.n	800265c <HAL_I2C_Init+0x1a4>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1e58      	subs	r0, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	0099      	lsls	r1, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002652:	3301      	adds	r3, #1
 8002654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002658:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	6809      	ldr	r1, [r1, #0]
 8002660:	4313      	orrs	r3, r2
 8002662:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69da      	ldr	r2, [r3, #28]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800268a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6911      	ldr	r1, [r2, #16]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68d2      	ldr	r2, [r2, #12]
 8002696:	4311      	orrs	r1, r2
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	430b      	orrs	r3, r1
 800269e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695a      	ldr	r2, [r3, #20]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	000186a0 	.word	0x000186a0
 80026f8:	001e847f 	.word	0x001e847f
 80026fc:	003d08ff 	.word	0x003d08ff
 8002700:	431bde83 	.word	0x431bde83
 8002704:	10624dd3 	.word	0x10624dd3

08002708 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e128      	b.n	800296c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a90      	ldr	r2, [pc, #576]	; (8002974 <HAL_I2S_Init+0x26c>)
 8002732:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f004 f823 	bl	8006780 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2202      	movs	r2, #2
 800273e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002750:	f023 030f 	bic.w	r3, r3, #15
 8002754:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2202      	movs	r2, #2
 800275c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d060      	beq.n	8002828 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d102      	bne.n	8002774 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800276e:	2310      	movs	r3, #16
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	e001      	b.n	8002778 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002774:	2320      	movs	r3, #32
 8002776:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b20      	cmp	r3, #32
 800277e:	d802      	bhi.n	8002786 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002786:	2001      	movs	r0, #1
 8002788:	f001 f970 	bl	8003a6c <HAL_RCCEx_GetPeriphCLKFreq>
 800278c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002796:	d125      	bne.n	80027e4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d010      	beq.n	80027c2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	461a      	mov	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027bc:	3305      	adds	r3, #5
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	e01f      	b.n	8002802 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	461a      	mov	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	fbb2 f3f3 	udiv	r3, r2, r3
 80027de:	3305      	adds	r3, #5
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	e00e      	b.n	8002802 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	461a      	mov	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fe:	3305      	adds	r3, #5
 8002800:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4a5c      	ldr	r2, [pc, #368]	; (8002978 <HAL_I2S_Init+0x270>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	08db      	lsrs	r3, r3, #3
 800280c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	085b      	lsrs	r3, r3, #1
 800281e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	e003      	b.n	8002830 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002828:	2302      	movs	r3, #2
 800282a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d902      	bls.n	800283c <HAL_I2S_Init+0x134>
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	2bff      	cmp	r3, #255	; 0xff
 800283a:	d907      	bls.n	800284c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002840:	f043 0210 	orr.w	r2, r3, #16
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e08f      	b.n	800296c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	ea42 0103 	orr.w	r1, r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	430a      	orrs	r2, r1
 800285e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800286a:	f023 030f 	bic.w	r3, r3, #15
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6851      	ldr	r1, [r2, #4]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6892      	ldr	r2, [r2, #8]
 8002876:	4311      	orrs	r1, r2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	68d2      	ldr	r2, [r2, #12]
 800287c:	4311      	orrs	r1, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6992      	ldr	r2, [r2, #24]
 8002882:	430a      	orrs	r2, r1
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800288e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d161      	bne.n	800295c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a38      	ldr	r2, [pc, #224]	; (800297c <HAL_I2S_Init+0x274>)
 800289c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a37      	ldr	r2, [pc, #220]	; (8002980 <HAL_I2S_Init+0x278>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d101      	bne.n	80028ac <HAL_I2S_Init+0x1a4>
 80028a8:	4b36      	ldr	r3, [pc, #216]	; (8002984 <HAL_I2S_Init+0x27c>)
 80028aa:	e001      	b.n	80028b0 <HAL_I2S_Init+0x1a8>
 80028ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	4932      	ldr	r1, [pc, #200]	; (8002980 <HAL_I2S_Init+0x278>)
 80028b8:	428a      	cmp	r2, r1
 80028ba:	d101      	bne.n	80028c0 <HAL_I2S_Init+0x1b8>
 80028bc:	4a31      	ldr	r2, [pc, #196]	; (8002984 <HAL_I2S_Init+0x27c>)
 80028be:	e001      	b.n	80028c4 <HAL_I2S_Init+0x1bc>
 80028c0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80028c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028c8:	f023 030f 	bic.w	r3, r3, #15
 80028cc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a2b      	ldr	r2, [pc, #172]	; (8002980 <HAL_I2S_Init+0x278>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d101      	bne.n	80028dc <HAL_I2S_Init+0x1d4>
 80028d8:	4b2a      	ldr	r3, [pc, #168]	; (8002984 <HAL_I2S_Init+0x27c>)
 80028da:	e001      	b.n	80028e0 <HAL_I2S_Init+0x1d8>
 80028dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028e0:	2202      	movs	r2, #2
 80028e2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a25      	ldr	r2, [pc, #148]	; (8002980 <HAL_I2S_Init+0x278>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d101      	bne.n	80028f2 <HAL_I2S_Init+0x1ea>
 80028ee:	4b25      	ldr	r3, [pc, #148]	; (8002984 <HAL_I2S_Init+0x27c>)
 80028f0:	e001      	b.n	80028f6 <HAL_I2S_Init+0x1ee>
 80028f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002902:	d003      	beq.n	800290c <HAL_I2S_Init+0x204>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d103      	bne.n	8002914 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800290c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	e001      	b.n	8002918 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002914:	2300      	movs	r3, #0
 8002916:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	b299      	uxth	r1, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800292e:	4303      	orrs	r3, r0
 8002930:	b29b      	uxth	r3, r3
 8002932:	430b      	orrs	r3, r1
 8002934:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002936:	4313      	orrs	r3, r2
 8002938:	b29a      	uxth	r2, r3
 800293a:	897b      	ldrh	r3, [r7, #10]
 800293c:	4313      	orrs	r3, r2
 800293e:	b29b      	uxth	r3, r3
 8002940:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002944:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a0d      	ldr	r2, [pc, #52]	; (8002980 <HAL_I2S_Init+0x278>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d101      	bne.n	8002954 <HAL_I2S_Init+0x24c>
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <HAL_I2S_Init+0x27c>)
 8002952:	e001      	b.n	8002958 <HAL_I2S_Init+0x250>
 8002954:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002958:	897a      	ldrh	r2, [r7, #10]
 800295a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3720      	adds	r7, #32
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	08002a7f 	.word	0x08002a7f
 8002978:	cccccccd 	.word	0xcccccccd
 800297c:	08002b95 	.word	0x08002b95
 8002980:	40003800 	.word	0x40003800
 8002984:	40003400 	.word	0x40003400

08002988 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	881a      	ldrh	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	1c9a      	adds	r2, r3, #2
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10e      	bne.n	8002a18 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a08:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff ffb8 	bl	8002988 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a18:	bf00      	nop
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	b292      	uxth	r2, r2
 8002a34:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	1c9a      	adds	r2, r3, #2
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10e      	bne.n	8002a76 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a66:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff ff93 	bl	800299c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d13a      	bne.n	8002b10 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d109      	bne.n	8002ab8 <I2S_IRQHandler+0x3a>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aae:	2b40      	cmp	r3, #64	; 0x40
 8002ab0:	d102      	bne.n	8002ab8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff ffb4 	bl	8002a20 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d126      	bne.n	8002b10 <I2S_IRQHandler+0x92>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d11f      	bne.n	8002b10 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ade:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	f043 0202 	orr.w	r2, r3, #2
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff ff50 	bl	80029b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d136      	bne.n	8002b8a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d109      	bne.n	8002b3a <I2S_IRQHandler+0xbc>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b30:	2b80      	cmp	r3, #128	; 0x80
 8002b32:	d102      	bne.n	8002b3a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff ff45 	bl	80029c4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d122      	bne.n	8002b8a <I2S_IRQHandler+0x10c>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d11b      	bne.n	8002b8a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b60:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7c:	f043 0204 	orr.w	r2, r3, #4
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff ff13 	bl	80029b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b8a:	bf00      	nop
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4aa2      	ldr	r2, [pc, #648]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d101      	bne.n	8002bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002bae:	4ba2      	ldr	r3, [pc, #648]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bb0:	e001      	b.n	8002bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002bb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a9b      	ldr	r2, [pc, #620]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d101      	bne.n	8002bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002bcc:	4b9a      	ldr	r3, [pc, #616]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bce:	e001      	b.n	8002bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002bd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be0:	d004      	beq.n	8002bec <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f040 8099 	bne.w	8002d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d107      	bne.n	8002c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f925 	bl	8002e50 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d107      	bne.n	8002c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f9c8 	bl	8002fb0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c26:	2b40      	cmp	r3, #64	; 0x40
 8002c28:	d13a      	bne.n	8002ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d035      	beq.n	8002ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a7e      	ldr	r2, [pc, #504]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d101      	bne.n	8002c42 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c3e:	4b7e      	ldr	r3, [pc, #504]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c40:	e001      	b.n	8002c46 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4979      	ldr	r1, [pc, #484]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c4e:	428b      	cmp	r3, r1
 8002c50:	d101      	bne.n	8002c56 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002c52:	4b79      	ldr	r3, [pc, #484]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c54:	e001      	b.n	8002c5a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002c56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c5e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c6e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	f043 0202 	orr.w	r2, r3, #2
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff fe88 	bl	80029b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	f040 80be 	bne.w	8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 80b8 	beq.w	8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cc6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a59      	ldr	r2, [pc, #356]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002cd2:	4b59      	ldr	r3, [pc, #356]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002cd4:	e001      	b.n	8002cda <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002cd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4954      	ldr	r1, [pc, #336]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ce2:	428b      	cmp	r3, r1
 8002ce4:	d101      	bne.n	8002cea <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002ce6:	4b54      	ldr	r3, [pc, #336]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ce8:	e001      	b.n	8002cee <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002cea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cf2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	f043 0204 	orr.w	r2, r3, #4
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff fe4a 	bl	80029b0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d1c:	e084      	b.n	8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d107      	bne.n	8002d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f8be 	bl	8002eb4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d107      	bne.n	8002d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f8fd 	bl	8002f4c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d58:	2b40      	cmp	r3, #64	; 0x40
 8002d5a:	d12f      	bne.n	8002dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d02a      	beq.n	8002dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d74:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a2e      	ldr	r2, [pc, #184]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d101      	bne.n	8002d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002d80:	4b2d      	ldr	r3, [pc, #180]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d82:	e001      	b.n	8002d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002d84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4929      	ldr	r1, [pc, #164]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d90:	428b      	cmp	r3, r1
 8002d92:	d101      	bne.n	8002d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002d94:	4b28      	ldr	r3, [pc, #160]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d96:	e001      	b.n	8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002d98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002da0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	f043 0202 	orr.w	r2, r3, #2
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff fdfa 	bl	80029b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d131      	bne.n	8002e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f003 0320 	and.w	r3, r3, #32
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d02c      	beq.n	8002e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a17      	ldr	r2, [pc, #92]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d101      	bne.n	8002dde <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002dda:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ddc:	e001      	b.n	8002de2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002dde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4912      	ldr	r1, [pc, #72]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dea:	428b      	cmp	r3, r1
 8002dec:	d101      	bne.n	8002df2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002dee:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002df0:	e001      	b.n	8002df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002df2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002df6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002dfa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e0a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e18:	f043 0204 	orr.w	r2, r3, #4
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff fdc5 	bl	80029b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e26:	e000      	b.n	8002e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e28:	bf00      	nop
}
 8002e2a:	bf00      	nop
 8002e2c:	3720      	adds	r7, #32
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40003800 	.word	0x40003800
 8002e38:	40003400 	.word	0x40003400

08002e3c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	1c99      	adds	r1, r3, #2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6251      	str	r1, [r2, #36]	; 0x24
 8002e62:	881a      	ldrh	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d113      	bne.n	8002eaa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e90:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d106      	bne.n	8002eaa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ffc9 	bl	8002e3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	1c99      	adds	r1, r3, #2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6251      	str	r1, [r2, #36]	; 0x24
 8002ec6:	8819      	ldrh	r1, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a1d      	ldr	r2, [pc, #116]	; (8002f44 <I2SEx_TxISR_I2SExt+0x90>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d101      	bne.n	8002ed6 <I2SEx_TxISR_I2SExt+0x22>
 8002ed2:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <I2SEx_TxISR_I2SExt+0x94>)
 8002ed4:	e001      	b.n	8002eda <I2SEx_TxISR_I2SExt+0x26>
 8002ed6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eda:	460a      	mov	r2, r1
 8002edc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d121      	bne.n	8002f3a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a12      	ldr	r2, [pc, #72]	; (8002f44 <I2SEx_TxISR_I2SExt+0x90>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d101      	bne.n	8002f04 <I2SEx_TxISR_I2SExt+0x50>
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <I2SEx_TxISR_I2SExt+0x94>)
 8002f02:	e001      	b.n	8002f08 <I2SEx_TxISR_I2SExt+0x54>
 8002f04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	490d      	ldr	r1, [pc, #52]	; (8002f44 <I2SEx_TxISR_I2SExt+0x90>)
 8002f10:	428b      	cmp	r3, r1
 8002f12:	d101      	bne.n	8002f18 <I2SEx_TxISR_I2SExt+0x64>
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <I2SEx_TxISR_I2SExt+0x94>)
 8002f16:	e001      	b.n	8002f1c <I2SEx_TxISR_I2SExt+0x68>
 8002f18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f20:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d106      	bne.n	8002f3a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff ff81 	bl	8002e3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40003800 	.word	0x40003800
 8002f48:	40003400 	.word	0x40003400

08002f4c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68d8      	ldr	r0, [r3, #12]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	1c99      	adds	r1, r3, #2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f64:	b282      	uxth	r2, r0
 8002f66:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d113      	bne.n	8002fa8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f8e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff ff4a 	bl	8002e3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fa8:	bf00      	nop
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a20      	ldr	r2, [pc, #128]	; (8003040 <I2SEx_RxISR_I2SExt+0x90>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d101      	bne.n	8002fc6 <I2SEx_RxISR_I2SExt+0x16>
 8002fc2:	4b20      	ldr	r3, [pc, #128]	; (8003044 <I2SEx_RxISR_I2SExt+0x94>)
 8002fc4:	e001      	b.n	8002fca <I2SEx_RxISR_I2SExt+0x1a>
 8002fc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fca:	68d8      	ldr	r0, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	1c99      	adds	r1, r3, #2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002fd6:	b282      	uxth	r2, r0
 8002fd8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d121      	bne.n	8003036 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a12      	ldr	r2, [pc, #72]	; (8003040 <I2SEx_RxISR_I2SExt+0x90>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d101      	bne.n	8003000 <I2SEx_RxISR_I2SExt+0x50>
 8002ffc:	4b11      	ldr	r3, [pc, #68]	; (8003044 <I2SEx_RxISR_I2SExt+0x94>)
 8002ffe:	e001      	b.n	8003004 <I2SEx_RxISR_I2SExt+0x54>
 8003000:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	490d      	ldr	r1, [pc, #52]	; (8003040 <I2SEx_RxISR_I2SExt+0x90>)
 800300c:	428b      	cmp	r3, r1
 800300e:	d101      	bne.n	8003014 <I2SEx_RxISR_I2SExt+0x64>
 8003010:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <I2SEx_RxISR_I2SExt+0x94>)
 8003012:	e001      	b.n	8003018 <I2SEx_RxISR_I2SExt+0x68>
 8003014:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003018:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800301c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d106      	bne.n	8003036 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ff03 	bl	8002e3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40003800 	.word	0x40003800
 8003044:	40003400 	.word	0x40003400

08003048 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e22d      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d075      	beq.n	8003152 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003066:	4ba3      	ldr	r3, [pc, #652]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b04      	cmp	r3, #4
 8003070:	d00c      	beq.n	800308c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003072:	4ba0      	ldr	r3, [pc, #640]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800307a:	2b08      	cmp	r3, #8
 800307c:	d112      	bne.n	80030a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800307e:	4b9d      	ldr	r3, [pc, #628]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003086:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800308a:	d10b      	bne.n	80030a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308c:	4b99      	ldr	r3, [pc, #612]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d05b      	beq.n	8003150 <HAL_RCC_OscConfig+0x108>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d157      	bne.n	8003150 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e208      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ac:	d106      	bne.n	80030bc <HAL_RCC_OscConfig+0x74>
 80030ae:	4b91      	ldr	r3, [pc, #580]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a90      	ldr	r2, [pc, #576]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	e01d      	b.n	80030f8 <HAL_RCC_OscConfig+0xb0>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030c4:	d10c      	bne.n	80030e0 <HAL_RCC_OscConfig+0x98>
 80030c6:	4b8b      	ldr	r3, [pc, #556]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a8a      	ldr	r2, [pc, #552]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	4b88      	ldr	r3, [pc, #544]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a87      	ldr	r2, [pc, #540]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e00b      	b.n	80030f8 <HAL_RCC_OscConfig+0xb0>
 80030e0:	4b84      	ldr	r3, [pc, #528]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a83      	ldr	r2, [pc, #524]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	4b81      	ldr	r3, [pc, #516]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a80      	ldr	r2, [pc, #512]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d013      	beq.n	8003128 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fd fa9c 	bl	800063c <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003108:	f7fd fa98 	bl	800063c <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b64      	cmp	r3, #100	; 0x64
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e1cd      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311a:	4b76      	ldr	r3, [pc, #472]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0xc0>
 8003126:	e014      	b.n	8003152 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7fd fa88 	bl	800063c <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003130:	f7fd fa84 	bl	800063c <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b64      	cmp	r3, #100	; 0x64
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e1b9      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003142:	4b6c      	ldr	r3, [pc, #432]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0xe8>
 800314e:	e000      	b.n	8003152 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d063      	beq.n	8003226 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800315e:	4b65      	ldr	r3, [pc, #404]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00b      	beq.n	8003182 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800316a:	4b62      	ldr	r3, [pc, #392]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003172:	2b08      	cmp	r3, #8
 8003174:	d11c      	bne.n	80031b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003176:	4b5f      	ldr	r3, [pc, #380]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d116      	bne.n	80031b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003182:	4b5c      	ldr	r3, [pc, #368]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <HAL_RCC_OscConfig+0x152>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d001      	beq.n	800319a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e18d      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319a:	4b56      	ldr	r3, [pc, #344]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4952      	ldr	r1, [pc, #328]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ae:	e03a      	b.n	8003226 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d020      	beq.n	80031fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b8:	4b4f      	ldr	r3, [pc, #316]	; (80032f8 <HAL_RCC_OscConfig+0x2b0>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031be:	f7fd fa3d 	bl	800063c <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031c6:	f7fd fa39 	bl	800063c <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e16e      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d8:	4b46      	ldr	r3, [pc, #280]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e4:	4b43      	ldr	r3, [pc, #268]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4940      	ldr	r1, [pc, #256]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	600b      	str	r3, [r1, #0]
 80031f8:	e015      	b.n	8003226 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031fa:	4b3f      	ldr	r3, [pc, #252]	; (80032f8 <HAL_RCC_OscConfig+0x2b0>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fd fa1c 	bl	800063c <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003208:	f7fd fa18 	bl	800063c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e14d      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321a:	4b36      	ldr	r3, [pc, #216]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d030      	beq.n	8003294 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d016      	beq.n	8003268 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800323a:	4b30      	ldr	r3, [pc, #192]	; (80032fc <HAL_RCC_OscConfig+0x2b4>)
 800323c:	2201      	movs	r2, #1
 800323e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003240:	f7fd f9fc 	bl	800063c <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003248:	f7fd f9f8 	bl	800063c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e12d      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325a:	4b26      	ldr	r3, [pc, #152]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 800325c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x200>
 8003266:	e015      	b.n	8003294 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003268:	4b24      	ldr	r3, [pc, #144]	; (80032fc <HAL_RCC_OscConfig+0x2b4>)
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800326e:	f7fd f9e5 	bl	800063c <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003276:	f7fd f9e1 	bl	800063c <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e116      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003288:	4b1a      	ldr	r3, [pc, #104]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 800328a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1f0      	bne.n	8003276 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80a0 	beq.w	80033e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a2:	2300      	movs	r3, #0
 80032a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a6:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10f      	bne.n	80032d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	4a0e      	ldr	r2, [pc, #56]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80032bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c0:	6413      	str	r3, [r2, #64]	; 0x40
 80032c2:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80032ce:	2301      	movs	r3, #1
 80032d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d2:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_RCC_OscConfig+0x2b8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d121      	bne.n	8003322 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032de:	4b08      	ldr	r3, [pc, #32]	; (8003300 <HAL_RCC_OscConfig+0x2b8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a07      	ldr	r2, [pc, #28]	; (8003300 <HAL_RCC_OscConfig+0x2b8>)
 80032e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ea:	f7fd f9a7 	bl	800063c <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	e011      	b.n	8003316 <HAL_RCC_OscConfig+0x2ce>
 80032f2:	bf00      	nop
 80032f4:	40023800 	.word	0x40023800
 80032f8:	42470000 	.word	0x42470000
 80032fc:	42470e80 	.word	0x42470e80
 8003300:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003304:	f7fd f99a 	bl	800063c <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e0cf      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003316:	4b6a      	ldr	r3, [pc, #424]	; (80034c0 <HAL_RCC_OscConfig+0x478>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d106      	bne.n	8003338 <HAL_RCC_OscConfig+0x2f0>
 800332a:	4b66      	ldr	r3, [pc, #408]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	4a65      	ldr	r2, [pc, #404]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	6713      	str	r3, [r2, #112]	; 0x70
 8003336:	e01c      	b.n	8003372 <HAL_RCC_OscConfig+0x32a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b05      	cmp	r3, #5
 800333e:	d10c      	bne.n	800335a <HAL_RCC_OscConfig+0x312>
 8003340:	4b60      	ldr	r3, [pc, #384]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 8003342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003344:	4a5f      	ldr	r2, [pc, #380]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 8003346:	f043 0304 	orr.w	r3, r3, #4
 800334a:	6713      	str	r3, [r2, #112]	; 0x70
 800334c:	4b5d      	ldr	r3, [pc, #372]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003350:	4a5c      	ldr	r2, [pc, #368]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	6713      	str	r3, [r2, #112]	; 0x70
 8003358:	e00b      	b.n	8003372 <HAL_RCC_OscConfig+0x32a>
 800335a:	4b5a      	ldr	r3, [pc, #360]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 800335c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335e:	4a59      	ldr	r2, [pc, #356]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	6713      	str	r3, [r2, #112]	; 0x70
 8003366:	4b57      	ldr	r3, [pc, #348]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	4a56      	ldr	r2, [pc, #344]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 800336c:	f023 0304 	bic.w	r3, r3, #4
 8003370:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d015      	beq.n	80033a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337a:	f7fd f95f 	bl	800063c <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003380:	e00a      	b.n	8003398 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003382:	f7fd f95b 	bl	800063c <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e08e      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003398:	4b4a      	ldr	r3, [pc, #296]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0ee      	beq.n	8003382 <HAL_RCC_OscConfig+0x33a>
 80033a4:	e014      	b.n	80033d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a6:	f7fd f949 	bl	800063c <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ac:	e00a      	b.n	80033c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ae:	f7fd f945 	bl	800063c <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033bc:	4293      	cmp	r3, r2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e078      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c4:	4b3f      	ldr	r3, [pc, #252]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 80033c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1ee      	bne.n	80033ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033d0:	7dfb      	ldrb	r3, [r7, #23]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d105      	bne.n	80033e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d6:	4b3b      	ldr	r3, [pc, #236]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	4a3a      	ldr	r2, [pc, #232]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 80033dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d064      	beq.n	80034b4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033ea:	4b36      	ldr	r3, [pc, #216]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 030c 	and.w	r3, r3, #12
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d05c      	beq.n	80034b0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d141      	bne.n	8003482 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fe:	4b32      	ldr	r3, [pc, #200]	; (80034c8 <HAL_RCC_OscConfig+0x480>)
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7fd f91a 	bl	800063c <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800340c:	f7fd f916 	bl	800063c <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e04b      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341e:	4b29      	ldr	r3, [pc, #164]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69da      	ldr	r2, [r3, #28]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	019b      	lsls	r3, r3, #6
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	085b      	lsrs	r3, r3, #1
 8003442:	3b01      	subs	r3, #1
 8003444:	041b      	lsls	r3, r3, #16
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344c:	061b      	lsls	r3, r3, #24
 800344e:	491d      	ldr	r1, [pc, #116]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 8003450:	4313      	orrs	r3, r2
 8003452:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003454:	4b1c      	ldr	r3, [pc, #112]	; (80034c8 <HAL_RCC_OscConfig+0x480>)
 8003456:	2201      	movs	r2, #1
 8003458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345a:	f7fd f8ef 	bl	800063c <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003462:	f7fd f8eb 	bl	800063c <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e020      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003474:	4b13      	ldr	r3, [pc, #76]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x41a>
 8003480:	e018      	b.n	80034b4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003482:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <HAL_RCC_OscConfig+0x480>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7fd f8d8 	bl	800063c <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003490:	f7fd f8d4 	bl	800063c <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e009      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a2:	4b08      	ldr	r3, [pc, #32]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x448>
 80034ae:	e001      	b.n	80034b4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40007000 	.word	0x40007000
 80034c4:	40023800 	.word	0x40023800
 80034c8:	42470060 	.word	0x42470060

080034cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0ca      	b.n	8003676 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034e0:	4b67      	ldr	r3, [pc, #412]	; (8003680 <HAL_RCC_ClockConfig+0x1b4>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d90c      	bls.n	8003508 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ee:	4b64      	ldr	r3, [pc, #400]	; (8003680 <HAL_RCC_ClockConfig+0x1b4>)
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f6:	4b62      	ldr	r3, [pc, #392]	; (8003680 <HAL_RCC_ClockConfig+0x1b4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d001      	beq.n	8003508 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e0b6      	b.n	8003676 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d020      	beq.n	8003556 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003520:	4b58      	ldr	r3, [pc, #352]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	4a57      	ldr	r2, [pc, #348]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 8003526:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800352a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003538:	4b52      	ldr	r3, [pc, #328]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4a51      	ldr	r2, [pc, #324]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 800353e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003542:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003544:	4b4f      	ldr	r3, [pc, #316]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	494c      	ldr	r1, [pc, #304]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 8003552:	4313      	orrs	r3, r2
 8003554:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d044      	beq.n	80035ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d107      	bne.n	800357a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356a:	4b46      	ldr	r3, [pc, #280]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d119      	bne.n	80035aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e07d      	b.n	8003676 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d003      	beq.n	800358a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003586:	2b03      	cmp	r3, #3
 8003588:	d107      	bne.n	800359a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358a:	4b3e      	ldr	r3, [pc, #248]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e06d      	b.n	8003676 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359a:	4b3a      	ldr	r3, [pc, #232]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e065      	b.n	8003676 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035aa:	4b36      	ldr	r3, [pc, #216]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f023 0203 	bic.w	r2, r3, #3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	4933      	ldr	r1, [pc, #204]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035bc:	f7fd f83e 	bl	800063c <HAL_GetTick>
 80035c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c2:	e00a      	b.n	80035da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c4:	f7fd f83a 	bl	800063c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e04d      	b.n	8003676 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035da:	4b2a      	ldr	r3, [pc, #168]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 020c 	and.w	r2, r3, #12
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d1eb      	bne.n	80035c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035ec:	4b24      	ldr	r3, [pc, #144]	; (8003680 <HAL_RCC_ClockConfig+0x1b4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d20c      	bcs.n	8003614 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fa:	4b21      	ldr	r3, [pc, #132]	; (8003680 <HAL_RCC_ClockConfig+0x1b4>)
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003602:	4b1f      	ldr	r3, [pc, #124]	; (8003680 <HAL_RCC_ClockConfig+0x1b4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e030      	b.n	8003676 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003620:	4b18      	ldr	r3, [pc, #96]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4915      	ldr	r1, [pc, #84]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d009      	beq.n	8003652 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800363e:	4b11      	ldr	r3, [pc, #68]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	490d      	ldr	r1, [pc, #52]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 800364e:	4313      	orrs	r3, r2
 8003650:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003652:	f000 f81d 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 8003656:	4601      	mov	r1, r0
 8003658:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	091b      	lsrs	r3, r3, #4
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	4a09      	ldr	r2, [pc, #36]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	5cd3      	ldrb	r3, [r2, r3]
 8003666:	fa21 f303 	lsr.w	r3, r1, r3
 800366a:	4a08      	ldr	r2, [pc, #32]	; (800368c <HAL_RCC_ClockConfig+0x1c0>)
 800366c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800366e:	2000      	movs	r0, #0
 8003670:	f7fc ffa0 	bl	80005b4 <HAL_InitTick>

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40023c00 	.word	0x40023c00
 8003684:	40023800 	.word	0x40023800
 8003688:	08007fcc 	.word	0x08007fcc
 800368c:	20000028 	.word	0x20000028

08003690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	607b      	str	r3, [r7, #4]
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	2300      	movs	r3, #0
 80036a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036a6:	4b63      	ldr	r3, [pc, #396]	; (8003834 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d007      	beq.n	80036c2 <HAL_RCC_GetSysClockFreq+0x32>
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d008      	beq.n	80036c8 <HAL_RCC_GetSysClockFreq+0x38>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f040 80b4 	bne.w	8003824 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036bc:	4b5e      	ldr	r3, [pc, #376]	; (8003838 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036be:	60bb      	str	r3, [r7, #8]
       break;
 80036c0:	e0b3      	b.n	800382a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036c2:	4b5e      	ldr	r3, [pc, #376]	; (800383c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80036c4:	60bb      	str	r3, [r7, #8]
      break;
 80036c6:	e0b0      	b.n	800382a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036c8:	4b5a      	ldr	r3, [pc, #360]	; (8003834 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036d2:	4b58      	ldr	r3, [pc, #352]	; (8003834 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d04a      	beq.n	8003774 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036de:	4b55      	ldr	r3, [pc, #340]	; (8003834 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	099b      	lsrs	r3, r3, #6
 80036e4:	f04f 0400 	mov.w	r4, #0
 80036e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	ea03 0501 	and.w	r5, r3, r1
 80036f4:	ea04 0602 	and.w	r6, r4, r2
 80036f8:	4629      	mov	r1, r5
 80036fa:	4632      	mov	r2, r6
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	f04f 0400 	mov.w	r4, #0
 8003704:	0154      	lsls	r4, r2, #5
 8003706:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800370a:	014b      	lsls	r3, r1, #5
 800370c:	4619      	mov	r1, r3
 800370e:	4622      	mov	r2, r4
 8003710:	1b49      	subs	r1, r1, r5
 8003712:	eb62 0206 	sbc.w	r2, r2, r6
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	f04f 0400 	mov.w	r4, #0
 800371e:	0194      	lsls	r4, r2, #6
 8003720:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003724:	018b      	lsls	r3, r1, #6
 8003726:	1a5b      	subs	r3, r3, r1
 8003728:	eb64 0402 	sbc.w	r4, r4, r2
 800372c:	f04f 0100 	mov.w	r1, #0
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	00e2      	lsls	r2, r4, #3
 8003736:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800373a:	00d9      	lsls	r1, r3, #3
 800373c:	460b      	mov	r3, r1
 800373e:	4614      	mov	r4, r2
 8003740:	195b      	adds	r3, r3, r5
 8003742:	eb44 0406 	adc.w	r4, r4, r6
 8003746:	f04f 0100 	mov.w	r1, #0
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	0262      	lsls	r2, r4, #9
 8003750:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003754:	0259      	lsls	r1, r3, #9
 8003756:	460b      	mov	r3, r1
 8003758:	4614      	mov	r4, r2
 800375a:	4618      	mov	r0, r3
 800375c:	4621      	mov	r1, r4
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f04f 0400 	mov.w	r4, #0
 8003764:	461a      	mov	r2, r3
 8003766:	4623      	mov	r3, r4
 8003768:	f7fc fd82 	bl	8000270 <__aeabi_uldivmod>
 800376c:	4603      	mov	r3, r0
 800376e:	460c      	mov	r4, r1
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	e049      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003774:	4b2f      	ldr	r3, [pc, #188]	; (8003834 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	099b      	lsrs	r3, r3, #6
 800377a:	f04f 0400 	mov.w	r4, #0
 800377e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	ea03 0501 	and.w	r5, r3, r1
 800378a:	ea04 0602 	and.w	r6, r4, r2
 800378e:	4629      	mov	r1, r5
 8003790:	4632      	mov	r2, r6
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	f04f 0400 	mov.w	r4, #0
 800379a:	0154      	lsls	r4, r2, #5
 800379c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037a0:	014b      	lsls	r3, r1, #5
 80037a2:	4619      	mov	r1, r3
 80037a4:	4622      	mov	r2, r4
 80037a6:	1b49      	subs	r1, r1, r5
 80037a8:	eb62 0206 	sbc.w	r2, r2, r6
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	f04f 0400 	mov.w	r4, #0
 80037b4:	0194      	lsls	r4, r2, #6
 80037b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037ba:	018b      	lsls	r3, r1, #6
 80037bc:	1a5b      	subs	r3, r3, r1
 80037be:	eb64 0402 	sbc.w	r4, r4, r2
 80037c2:	f04f 0100 	mov.w	r1, #0
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	00e2      	lsls	r2, r4, #3
 80037cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037d0:	00d9      	lsls	r1, r3, #3
 80037d2:	460b      	mov	r3, r1
 80037d4:	4614      	mov	r4, r2
 80037d6:	195b      	adds	r3, r3, r5
 80037d8:	eb44 0406 	adc.w	r4, r4, r6
 80037dc:	f04f 0100 	mov.w	r1, #0
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	02a2      	lsls	r2, r4, #10
 80037e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80037ea:	0299      	lsls	r1, r3, #10
 80037ec:	460b      	mov	r3, r1
 80037ee:	4614      	mov	r4, r2
 80037f0:	4618      	mov	r0, r3
 80037f2:	4621      	mov	r1, r4
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f04f 0400 	mov.w	r4, #0
 80037fa:	461a      	mov	r2, r3
 80037fc:	4623      	mov	r3, r4
 80037fe:	f7fc fd37 	bl	8000270 <__aeabi_uldivmod>
 8003802:	4603      	mov	r3, r0
 8003804:	460c      	mov	r4, r1
 8003806:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003808:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	0c1b      	lsrs	r3, r3, #16
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	3301      	adds	r3, #1
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003820:	60bb      	str	r3, [r7, #8]
      break;
 8003822:	e002      	b.n	800382a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003824:	4b04      	ldr	r3, [pc, #16]	; (8003838 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003826:	60bb      	str	r3, [r7, #8]
      break;
 8003828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800382a:	68bb      	ldr	r3, [r7, #8]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003834:	40023800 	.word	0x40023800
 8003838:	00f42400 	.word	0x00f42400
 800383c:	007a1200 	.word	0x007a1200

08003840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003844:	4b03      	ldr	r3, [pc, #12]	; (8003854 <HAL_RCC_GetHCLKFreq+0x14>)
 8003846:	681b      	ldr	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	20000028 	.word	0x20000028

08003858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800385c:	f7ff fff0 	bl	8003840 <HAL_RCC_GetHCLKFreq>
 8003860:	4601      	mov	r1, r0
 8003862:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	0a9b      	lsrs	r3, r3, #10
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	4a03      	ldr	r2, [pc, #12]	; (800387c <HAL_RCC_GetPCLK1Freq+0x24>)
 800386e:	5cd3      	ldrb	r3, [r2, r3]
 8003870:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003874:	4618      	mov	r0, r3
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40023800 	.word	0x40023800
 800387c:	08007fdc 	.word	0x08007fdc

08003880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003884:	f7ff ffdc 	bl	8003840 <HAL_RCC_GetHCLKFreq>
 8003888:	4601      	mov	r1, r0
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	0b5b      	lsrs	r3, r3, #13
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	4a03      	ldr	r2, [pc, #12]	; (80038a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003896:	5cd3      	ldrb	r3, [r2, r3]
 8003898:	fa21 f303 	lsr.w	r3, r1, r3
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40023800 	.word	0x40023800
 80038a4:	08007fdc 	.word	0x08007fdc

080038a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d105      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d035      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038d0:	4b62      	ldr	r3, [pc, #392]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038d6:	f7fc feb1 	bl	800063c <HAL_GetTick>
 80038da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038de:	f7fc fead 	bl	800063c <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e0b0      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038f0:	4b5b      	ldr	r3, [pc, #364]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1f0      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	019a      	lsls	r2, r3, #6
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	071b      	lsls	r3, r3, #28
 8003908:	4955      	ldr	r1, [pc, #340]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003910:	4b52      	ldr	r3, [pc, #328]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003916:	f7fc fe91 	bl	800063c <HAL_GetTick>
 800391a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800391c:	e008      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800391e:	f7fc fe8d 	bl	800063c <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e090      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003930:	4b4b      	ldr	r3, [pc, #300]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0f0      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 8083 	beq.w	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	4b44      	ldr	r3, [pc, #272]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	4a43      	ldr	r2, [pc, #268]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003958:	6413      	str	r3, [r2, #64]	; 0x40
 800395a:	4b41      	ldr	r3, [pc, #260]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003966:	4b3f      	ldr	r3, [pc, #252]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a3e      	ldr	r2, [pc, #248]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800396c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003970:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003972:	f7fc fe63 	bl	800063c <HAL_GetTick>
 8003976:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003978:	e008      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800397a:	f7fc fe5f 	bl	800063c <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e062      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800398c:	4b35      	ldr	r3, [pc, #212]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0f0      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003998:	4b31      	ldr	r3, [pc, #196]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800399a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d02f      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d028      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039b6:	4b2a      	ldr	r3, [pc, #168]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039c0:	4b29      	ldr	r3, [pc, #164]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039c6:	4b28      	ldr	r3, [pc, #160]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80039cc:	4a24      	ldr	r2, [pc, #144]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039d2:	4b23      	ldr	r3, [pc, #140]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d114      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80039de:	f7fc fe2d 	bl	800063c <HAL_GetTick>
 80039e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e4:	e00a      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e6:	f7fc fe29 	bl	800063c <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d901      	bls.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e02a      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fc:	4b18      	ldr	r3, [pc, #96]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0ee      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a14:	d10d      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003a16:	4b12      	ldr	r3, [pc, #72]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a2a:	490d      	ldr	r1, [pc, #52]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	608b      	str	r3, [r1, #8]
 8003a30:	e005      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a32:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	4a0a      	ldr	r2, [pc, #40]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a38:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a3c:	6093      	str	r3, [r2, #8]
 8003a3e:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a4a:	4905      	ldr	r1, [pc, #20]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	42470068 	.word	0x42470068
 8003a60:	40023800 	.word	0x40023800
 8003a64:	40007000 	.word	0x40007000
 8003a68:	42470e40 	.word	0x42470e40

08003a6c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d13d      	bne.n	8003b06 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003a8a:	4b22      	ldr	r3, [pc, #136]	; (8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a92:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d12f      	bne.n	8003afe <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003a9e:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003aa0:	617b      	str	r3, [r7, #20]
          break;
 8003aa2:	e02f      	b.n	8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003aa4:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ab0:	d108      	bne.n	8003ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ab2:	4b18      	ldr	r3, [pc, #96]	; (8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aba:	4a18      	ldr	r2, [pc, #96]	; (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	e007      	b.n	8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ac4:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003acc:	4a14      	ldr	r2, [pc, #80]	; (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003ad4:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ada:	099b      	lsrs	r3, r3, #6
 8003adc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	fb02 f303 	mul.w	r3, r2, r3
 8003ae6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003ae8:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aee:	0f1b      	lsrs	r3, r3, #28
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afa:	617b      	str	r3, [r7, #20]
          break;
 8003afc:	e002      	b.n	8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]
          break;
 8003b02:	bf00      	nop
        }
      }
      break;
 8003b04:	bf00      	nop
    }
  }
  return frequency;
 8003b06:	697b      	ldr	r3, [r7, #20]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	40023800 	.word	0x40023800
 8003b18:	00bb8000 	.word	0x00bb8000
 8003b1c:	007a1200 	.word	0x007a1200
 8003b20:	00f42400 	.word	0x00f42400

08003b24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e056      	b.n	8003be4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f002 fe7d 	bl	8006850 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b6c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	ea42 0103 	orr.w	r1, r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	0c1b      	lsrs	r3, r3, #16
 8003bb4:	f003 0104 	and.w	r1, r3, #4
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69da      	ldr	r2, [r3, #28]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e03f      	b.n	8003c7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f002 fe64 	bl	80068e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2224      	movs	r2, #36	; 0x24
 8003c1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f919 	bl	8003e68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695a      	ldr	r2, [r3, #20]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b088      	sub	sp, #32
 8003c8a:	af02      	add	r7, sp, #8
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	603b      	str	r3, [r7, #0]
 8003c92:	4613      	mov	r3, r2
 8003c94:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	f040 8090 	bne.w	8003dc8 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <HAL_UART_Receive+0x2e>
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e088      	b.n	8003dca <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <HAL_UART_Receive+0x40>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e081      	b.n	8003dca <HAL_UART_Receive+0x144>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2222      	movs	r2, #34	; 0x22
 8003cd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003cdc:	f7fc fcae 	bl	800063c <HAL_GetTick>
 8003ce0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	88fa      	ldrh	r2, [r7, #6]
 8003ce6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	88fa      	ldrh	r2, [r7, #6]
 8003cec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003cee:	e05c      	b.n	8003daa <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d06:	d12b      	bne.n	8003d60 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2120      	movs	r1, #32
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f85d 	bl	8003dd2 <UART_WaitOnFlagUntilTimeout>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e053      	b.n	8003dca <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10c      	bne.n	8003d48 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	3302      	adds	r3, #2
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	e030      	b.n	8003daa <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	e024      	b.n	8003daa <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2200      	movs	r2, #0
 8003d68:	2120      	movs	r1, #32
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 f831 	bl	8003dd2 <UART_WaitOnFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e027      	b.n	8003dca <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d108      	bne.n	8003d94 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6859      	ldr	r1, [r3, #4]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	60ba      	str	r2, [r7, #8]
 8003d8e:	b2ca      	uxtb	r2, r1
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	e00a      	b.n	8003daa <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	1c59      	adds	r1, r3, #1
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d19d      	bne.n	8003cf0 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	e000      	b.n	8003dca <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003dc8:	2302      	movs	r3, #2
  }
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b084      	sub	sp, #16
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	60f8      	str	r0, [r7, #12]
 8003dda:	60b9      	str	r1, [r7, #8]
 8003ddc:	603b      	str	r3, [r7, #0]
 8003dde:	4613      	mov	r3, r2
 8003de0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003de2:	e02c      	b.n	8003e3e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dea:	d028      	beq.n	8003e3e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d007      	beq.n	8003e02 <UART_WaitOnFlagUntilTimeout+0x30>
 8003df2:	f7fc fc23 	bl	800063c <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d21d      	bcs.n	8003e3e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e10:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695a      	ldr	r2, [r3, #20]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0201 	bic.w	r2, r2, #1
 8003e20:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e00f      	b.n	8003e5e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	4013      	ands	r3, r2
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	bf0c      	ite	eq
 8003e4e:	2301      	moveq	r3, #1
 8003e50:	2300      	movne	r3, #0
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	461a      	mov	r2, r3
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d0c3      	beq.n	8003de4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e68:	b5b0      	push	{r4, r5, r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ea8:	f023 030c 	bic.w	r3, r3, #12
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6812      	ldr	r2, [r2, #0]
 8003eb0:	68f9      	ldr	r1, [r7, #12]
 8003eb2:	430b      	orrs	r3, r1
 8003eb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699a      	ldr	r2, [r3, #24]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed4:	f040 80e4 	bne.w	80040a0 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4aab      	ldr	r2, [pc, #684]	; (800418c <UART_SetConfig+0x324>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d004      	beq.n	8003eec <UART_SetConfig+0x84>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4aaa      	ldr	r2, [pc, #680]	; (8004190 <UART_SetConfig+0x328>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d16c      	bne.n	8003fc6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003eec:	f7ff fcc8 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009a      	lsls	r2, r3, #2
 8003efa:	441a      	add	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f06:	4aa3      	ldr	r2, [pc, #652]	; (8004194 <UART_SetConfig+0x32c>)
 8003f08:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	011c      	lsls	r4, r3, #4
 8003f10:	f7ff fcb6 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 8003f14:	4602      	mov	r2, r0
 8003f16:	4613      	mov	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009a      	lsls	r2, r3, #2
 8003f1e:	441a      	add	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	fbb2 f5f3 	udiv	r5, r2, r3
 8003f2a:	f7ff fca9 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	009a      	lsls	r2, r3, #2
 8003f38:	441a      	add	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f44:	4a93      	ldr	r2, [pc, #588]	; (8004194 <UART_SetConfig+0x32c>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	2264      	movs	r2, #100	; 0x64
 8003f4e:	fb02 f303 	mul.w	r3, r2, r3
 8003f52:	1aeb      	subs	r3, r5, r3
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	3332      	adds	r3, #50	; 0x32
 8003f58:	4a8e      	ldr	r2, [pc, #568]	; (8004194 <UART_SetConfig+0x32c>)
 8003f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f66:	441c      	add	r4, r3
 8003f68:	f7ff fc8a 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	4613      	mov	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	009a      	lsls	r2, r3, #2
 8003f76:	441a      	add	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003f82:	f7ff fc7d 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 8003f86:	4602      	mov	r2, r0
 8003f88:	4613      	mov	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009a      	lsls	r2, r3, #2
 8003f90:	441a      	add	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9c:	4a7d      	ldr	r2, [pc, #500]	; (8004194 <UART_SetConfig+0x32c>)
 8003f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	2264      	movs	r2, #100	; 0x64
 8003fa6:	fb02 f303 	mul.w	r3, r2, r3
 8003faa:	1aeb      	subs	r3, r5, r3
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	3332      	adds	r3, #50	; 0x32
 8003fb0:	4a78      	ldr	r2, [pc, #480]	; (8004194 <UART_SetConfig+0x32c>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	f003 0207 	and.w	r2, r3, #7
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4422      	add	r2, r4
 8003fc2:	609a      	str	r2, [r3, #8]
 8003fc4:	e154      	b.n	8004270 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003fc6:	f7ff fc47 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009a      	lsls	r2, r3, #2
 8003fd4:	441a      	add	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe0:	4a6c      	ldr	r2, [pc, #432]	; (8004194 <UART_SetConfig+0x32c>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	011c      	lsls	r4, r3, #4
 8003fea:	f7ff fc35 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009a      	lsls	r2, r3, #2
 8003ff8:	441a      	add	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	fbb2 f5f3 	udiv	r5, r2, r3
 8004004:	f7ff fc28 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8004008:	4602      	mov	r2, r0
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	009a      	lsls	r2, r3, #2
 8004012:	441a      	add	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	fbb2 f3f3 	udiv	r3, r2, r3
 800401e:	4a5d      	ldr	r2, [pc, #372]	; (8004194 <UART_SetConfig+0x32c>)
 8004020:	fba2 2303 	umull	r2, r3, r2, r3
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	2264      	movs	r2, #100	; 0x64
 8004028:	fb02 f303 	mul.w	r3, r2, r3
 800402c:	1aeb      	subs	r3, r5, r3
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	3332      	adds	r3, #50	; 0x32
 8004032:	4a58      	ldr	r2, [pc, #352]	; (8004194 <UART_SetConfig+0x32c>)
 8004034:	fba2 2303 	umull	r2, r3, r2, r3
 8004038:	095b      	lsrs	r3, r3, #5
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004040:	441c      	add	r4, r3
 8004042:	f7ff fc09 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8004046:	4602      	mov	r2, r0
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	009a      	lsls	r2, r3, #2
 8004050:	441a      	add	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	fbb2 f5f3 	udiv	r5, r2, r3
 800405c:	f7ff fbfc 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8004060:	4602      	mov	r2, r0
 8004062:	4613      	mov	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4413      	add	r3, r2
 8004068:	009a      	lsls	r2, r3, #2
 800406a:	441a      	add	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	fbb2 f3f3 	udiv	r3, r2, r3
 8004076:	4a47      	ldr	r2, [pc, #284]	; (8004194 <UART_SetConfig+0x32c>)
 8004078:	fba2 2303 	umull	r2, r3, r2, r3
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	2264      	movs	r2, #100	; 0x64
 8004080:	fb02 f303 	mul.w	r3, r2, r3
 8004084:	1aeb      	subs	r3, r5, r3
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	3332      	adds	r3, #50	; 0x32
 800408a:	4a42      	ldr	r2, [pc, #264]	; (8004194 <UART_SetConfig+0x32c>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	f003 0207 	and.w	r2, r3, #7
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4422      	add	r2, r4
 800409c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800409e:	e0e7      	b.n	8004270 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a39      	ldr	r2, [pc, #228]	; (800418c <UART_SetConfig+0x324>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d004      	beq.n	80040b4 <UART_SetConfig+0x24c>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a38      	ldr	r2, [pc, #224]	; (8004190 <UART_SetConfig+0x328>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d171      	bne.n	8004198 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80040b4:	f7ff fbe4 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 80040b8:	4602      	mov	r2, r0
 80040ba:	4613      	mov	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	009a      	lsls	r2, r3, #2
 80040c2:	441a      	add	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ce:	4a31      	ldr	r2, [pc, #196]	; (8004194 <UART_SetConfig+0x32c>)
 80040d0:	fba2 2303 	umull	r2, r3, r2, r3
 80040d4:	095b      	lsrs	r3, r3, #5
 80040d6:	011c      	lsls	r4, r3, #4
 80040d8:	f7ff fbd2 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 80040dc:	4602      	mov	r2, r0
 80040de:	4613      	mov	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	009a      	lsls	r2, r3, #2
 80040e6:	441a      	add	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	fbb2 f5f3 	udiv	r5, r2, r3
 80040f2:	f7ff fbc5 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 80040f6:	4602      	mov	r2, r0
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	009a      	lsls	r2, r3, #2
 8004100:	441a      	add	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	fbb2 f3f3 	udiv	r3, r2, r3
 800410c:	4a21      	ldr	r2, [pc, #132]	; (8004194 <UART_SetConfig+0x32c>)
 800410e:	fba2 2303 	umull	r2, r3, r2, r3
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	2264      	movs	r2, #100	; 0x64
 8004116:	fb02 f303 	mul.w	r3, r2, r3
 800411a:	1aeb      	subs	r3, r5, r3
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	3332      	adds	r3, #50	; 0x32
 8004120:	4a1c      	ldr	r2, [pc, #112]	; (8004194 <UART_SetConfig+0x32c>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800412c:	441c      	add	r4, r3
 800412e:	f7ff fba7 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 8004132:	4602      	mov	r2, r0
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	009a      	lsls	r2, r3, #2
 800413c:	441a      	add	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	fbb2 f5f3 	udiv	r5, r2, r3
 8004148:	f7ff fb9a 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 800414c:	4602      	mov	r2, r0
 800414e:	4613      	mov	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	009a      	lsls	r2, r3, #2
 8004156:	441a      	add	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004162:	4a0c      	ldr	r2, [pc, #48]	; (8004194 <UART_SetConfig+0x32c>)
 8004164:	fba2 2303 	umull	r2, r3, r2, r3
 8004168:	095b      	lsrs	r3, r3, #5
 800416a:	2264      	movs	r2, #100	; 0x64
 800416c:	fb02 f303 	mul.w	r3, r2, r3
 8004170:	1aeb      	subs	r3, r5, r3
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	3332      	adds	r3, #50	; 0x32
 8004176:	4a07      	ldr	r2, [pc, #28]	; (8004194 <UART_SetConfig+0x32c>)
 8004178:	fba2 2303 	umull	r2, r3, r2, r3
 800417c:	095b      	lsrs	r3, r3, #5
 800417e:	f003 020f 	and.w	r2, r3, #15
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4422      	add	r2, r4
 8004188:	609a      	str	r2, [r3, #8]
 800418a:	e071      	b.n	8004270 <UART_SetConfig+0x408>
 800418c:	40011000 	.word	0x40011000
 8004190:	40011400 	.word	0x40011400
 8004194:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004198:	f7ff fb5e 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 800419c:	4602      	mov	r2, r0
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	009a      	lsls	r2, r3, #2
 80041a6:	441a      	add	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b2:	4a31      	ldr	r2, [pc, #196]	; (8004278 <UART_SetConfig+0x410>)
 80041b4:	fba2 2303 	umull	r2, r3, r2, r3
 80041b8:	095b      	lsrs	r3, r3, #5
 80041ba:	011c      	lsls	r4, r3, #4
 80041bc:	f7ff fb4c 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 80041c0:	4602      	mov	r2, r0
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	009a      	lsls	r2, r3, #2
 80041ca:	441a      	add	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	fbb2 f5f3 	udiv	r5, r2, r3
 80041d6:	f7ff fb3f 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 80041da:	4602      	mov	r2, r0
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	009a      	lsls	r2, r3, #2
 80041e4:	441a      	add	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f0:	4a21      	ldr	r2, [pc, #132]	; (8004278 <UART_SetConfig+0x410>)
 80041f2:	fba2 2303 	umull	r2, r3, r2, r3
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	2264      	movs	r2, #100	; 0x64
 80041fa:	fb02 f303 	mul.w	r3, r2, r3
 80041fe:	1aeb      	subs	r3, r5, r3
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	3332      	adds	r3, #50	; 0x32
 8004204:	4a1c      	ldr	r2, [pc, #112]	; (8004278 <UART_SetConfig+0x410>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004210:	441c      	add	r4, r3
 8004212:	f7ff fb21 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8004216:	4602      	mov	r2, r0
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	009a      	lsls	r2, r3, #2
 8004220:	441a      	add	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	fbb2 f5f3 	udiv	r5, r2, r3
 800422c:	f7ff fb14 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8004230:	4602      	mov	r2, r0
 8004232:	4613      	mov	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	009a      	lsls	r2, r3, #2
 800423a:	441a      	add	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	fbb2 f3f3 	udiv	r3, r2, r3
 8004246:	4a0c      	ldr	r2, [pc, #48]	; (8004278 <UART_SetConfig+0x410>)
 8004248:	fba2 2303 	umull	r2, r3, r2, r3
 800424c:	095b      	lsrs	r3, r3, #5
 800424e:	2264      	movs	r2, #100	; 0x64
 8004250:	fb02 f303 	mul.w	r3, r2, r3
 8004254:	1aeb      	subs	r3, r5, r3
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	3332      	adds	r3, #50	; 0x32
 800425a:	4a07      	ldr	r2, [pc, #28]	; (8004278 <UART_SetConfig+0x410>)
 800425c:	fba2 2303 	umull	r2, r3, r2, r3
 8004260:	095b      	lsrs	r3, r3, #5
 8004262:	f003 020f 	and.w	r2, r3, #15
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4422      	add	r2, r4
 800426c:	609a      	str	r2, [r3, #8]
}
 800426e:	e7ff      	b.n	8004270 <UART_SetConfig+0x408>
 8004270:	bf00      	nop
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bdb0      	pop	{r4, r5, r7, pc}
 8004278:	51eb851f 	.word	0x51eb851f

0800427c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800427c:	b084      	sub	sp, #16
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	f107 001c 	add.w	r0, r7, #28
 800428a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	2b01      	cmp	r3, #1
 8004292:	d122      	bne.n	80042da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80042a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d105      	bne.n	80042ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f94a 	bl	8004568 <USB_CoreReset>
 80042d4:	4603      	mov	r3, r0
 80042d6:	73fb      	strb	r3, [r7, #15]
 80042d8:	e01a      	b.n	8004310 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f93e 	bl	8004568 <USB_CoreReset>
 80042ec:	4603      	mov	r3, r0
 80042ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80042f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	639a      	str	r2, [r3, #56]	; 0x38
 8004302:	e005      	b.n	8004310 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004312:	2b01      	cmp	r3, #1
 8004314:	d10b      	bne.n	800432e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f043 0206 	orr.w	r2, r3, #6
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f043 0220 	orr.w	r2, r3, #32
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800432e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800433a:	b004      	add	sp, #16
 800433c:	4770      	bx	lr

0800433e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f043 0201 	orr.w	r2, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f023 0201 	bic.w	r2, r3, #1
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
 800438a:	460b      	mov	r3, r1
 800438c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800439a:	78fb      	ldrb	r3, [r7, #3]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d106      	bne.n	80043ae <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	60da      	str	r2, [r3, #12]
 80043ac:	e00b      	b.n	80043c6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80043ae:	78fb      	ldrb	r3, [r7, #3]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d106      	bne.n	80043c2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	60da      	str	r2, [r3, #12]
 80043c0:	e001      	b.n	80043c6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e003      	b.n	80043ce <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80043c6:	2032      	movs	r0, #50	; 0x32
 80043c8:	f7fc f944 	bl	8000654 <HAL_Delay>

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	019b      	lsls	r3, r3, #6
 80043ea:	f043 0220 	orr.w	r2, r3, #32
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	3301      	adds	r3, #1
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4a09      	ldr	r2, [pc, #36]	; (8004420 <USB_FlushTxFifo+0x48>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d901      	bls.n	8004404 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e006      	b.n	8004412 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b20      	cmp	r3, #32
 800440e:	d0f0      	beq.n	80043f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	00030d40 	.word	0x00030d40

08004424 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800442c:	2300      	movs	r3, #0
 800442e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2210      	movs	r2, #16
 8004434:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	3301      	adds	r3, #1
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4a09      	ldr	r2, [pc, #36]	; (8004464 <USB_FlushRxFifo+0x40>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d901      	bls.n	8004448 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e006      	b.n	8004456 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f003 0310 	and.w	r3, r3, #16
 8004450:	2b10      	cmp	r3, #16
 8004452:	d0f0      	beq.n	8004436 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	00030d40 	.word	0x00030d40

08004468 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004468:	b480      	push	{r7}
 800446a:	b089      	sub	sp, #36	; 0x24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	4611      	mov	r1, r2
 8004474:	461a      	mov	r2, r3
 8004476:	460b      	mov	r3, r1
 8004478:	71fb      	strb	r3, [r7, #7]
 800447a:	4613      	mov	r3, r2
 800447c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004486:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800448a:	2b00      	cmp	r3, #0
 800448c:	d11a      	bne.n	80044c4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800448e:	88bb      	ldrh	r3, [r7, #4]
 8004490:	3303      	adds	r3, #3
 8004492:	089b      	lsrs	r3, r3, #2
 8004494:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004496:	2300      	movs	r3, #0
 8004498:	61bb      	str	r3, [r7, #24]
 800449a:	e00f      	b.n	80044bc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800449c:	79fb      	ldrb	r3, [r7, #7]
 800449e:	031a      	lsls	r2, r3, #12
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044a8:	461a      	mov	r2, r3
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	3304      	adds	r3, #4
 80044b4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	3301      	adds	r3, #1
 80044ba:	61bb      	str	r3, [r7, #24]
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d3eb      	bcc.n	800449c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3724      	adds	r7, #36	; 0x24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b089      	sub	sp, #36	; 0x24
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	4613      	mov	r3, r2
 80044de:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80044e8:	88fb      	ldrh	r3, [r7, #6]
 80044ea:	3303      	adds	r3, #3
 80044ec:	089b      	lsrs	r3, r3, #2
 80044ee:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80044f0:	2300      	movs	r3, #0
 80044f2:	61bb      	str	r3, [r7, #24]
 80044f4:	e00b      	b.n	800450e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	601a      	str	r2, [r3, #0]
    pDest++;
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	3304      	adds	r3, #4
 8004506:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	3301      	adds	r3, #1
 800450c:	61bb      	str	r3, [r7, #24]
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	429a      	cmp	r2, r3
 8004514:	d3ef      	bcc.n	80044f6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004516:	69fb      	ldr	r3, [r7, #28]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3724      	adds	r7, #36	; 0x24
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4013      	ands	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800453c:	68fb      	ldr	r3, [r7, #12]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f003 0301 	and.w	r3, r3, #1
}
 800455a:	4618      	mov	r0, r3
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
	...

08004568 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	3301      	adds	r3, #1
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4a13      	ldr	r2, [pc, #76]	; (80045cc <USB_CoreReset+0x64>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d901      	bls.n	8004586 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e01b      	b.n	80045be <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	daf2      	bge.n	8004574 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f043 0201 	orr.w	r2, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3301      	adds	r3, #1
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4a09      	ldr	r2, [pc, #36]	; (80045cc <USB_CoreReset+0x64>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d901      	bls.n	80045b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e006      	b.n	80045be <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d0f0      	beq.n	800459e <USB_CoreReset+0x36>

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	00030d40 	.word	0x00030d40

080045d0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045d0:	b084      	sub	sp, #16
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b084      	sub	sp, #16
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	f107 001c 	add.w	r0, r7, #28
 80045de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045ec:	461a      	mov	r2, r3
 80045ee:	2300      	movs	r3, #0
 80045f0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004602:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461e:	2b00      	cmp	r3, #0
 8004620:	d018      	beq.n	8004654 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	2b03      	cmp	r3, #3
 8004626:	d10a      	bne.n	800463e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004636:	f043 0304 	orr.w	r3, r3, #4
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	e014      	b.n	8004668 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800464c:	f023 0304 	bic.w	r3, r3, #4
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	e009      	b.n	8004668 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004662:	f023 0304 	bic.w	r3, r3, #4
 8004666:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004668:	2110      	movs	r1, #16
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7ff feb4 	bl	80043d8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7ff fed7 	bl	8004424 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	e015      	b.n	80046a8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4413      	add	r3, r2
 8004684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004688:	461a      	mov	r2, r3
 800468a:	f04f 33ff 	mov.w	r3, #4294967295
 800468e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	4413      	add	r3, r2
 8004698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800469c:	461a      	mov	r2, r3
 800469e:	2300      	movs	r3, #0
 80046a0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	3301      	adds	r3, #1
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d3e5      	bcc.n	800467c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80046b0:	2101      	movs	r1, #1
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f882 	bl	80047bc <USB_DriveVbus>

  HAL_Delay(200U);
 80046b8:	20c8      	movs	r0, #200	; 0xc8
 80046ba:	f7fb ffcb 	bl	8000654 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f04f 32ff 	mov.w	r2, #4294967295
 80046ca:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00b      	beq.n	80046f0 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046de:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a14      	ldr	r2, [pc, #80]	; (8004734 <USB_HostInit+0x164>)
 80046e4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a13      	ldr	r2, [pc, #76]	; (8004738 <USB_HostInit+0x168>)
 80046ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80046ee:	e009      	b.n	8004704 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2280      	movs	r2, #128	; 0x80
 80046f4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a10      	ldr	r2, [pc, #64]	; (800473c <USB_HostInit+0x16c>)
 80046fa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a10      	ldr	r2, [pc, #64]	; (8004740 <USB_HostInit+0x170>)
 8004700:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004706:	2b00      	cmp	r3, #0
 8004708:	d105      	bne.n	8004716 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	f043 0210 	orr.w	r2, r3, #16
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <USB_HostInit+0x174>)
 800471c:	4313      	orrs	r3, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800472e:	b004      	add	sp, #16
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	01000200 	.word	0x01000200
 8004738:	00e00300 	.word	0x00e00300
 800473c:	00600080 	.word	0x00600080
 8004740:	004000e0 	.word	0x004000e0
 8004744:	a3200008 	.word	0xa3200008

08004748 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	460b      	mov	r3, r1
 8004752:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004766:	f023 0303 	bic.w	r3, r3, #3
 800476a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	78fb      	ldrb	r3, [r7, #3]
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	68f9      	ldr	r1, [r7, #12]
 800477c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004780:	4313      	orrs	r3, r2
 8004782:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d107      	bne.n	800479a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004790:	461a      	mov	r2, r3
 8004792:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004796:	6053      	str	r3, [r2, #4]
 8004798:	e009      	b.n	80047ae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800479a:	78fb      	ldrb	r3, [r7, #3]
 800479c:	2b02      	cmp	r3, #2
 800479e:	d106      	bne.n	80047ae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047a6:	461a      	mov	r2, r3
 80047a8:	f241 7370 	movw	r3, #6000	; 0x1770
 80047ac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80047e0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d109      	bne.n	8004800 <USB_DriveVbus+0x44>
 80047ec:	78fb      	ldrb	r3, [r7, #3]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d106      	bne.n	8004800 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80047fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80047fe:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480a:	d109      	bne.n	8004820 <USB_DriveVbus+0x64>
 800480c:	78fb      	ldrb	r3, [r7, #3]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800481a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800481e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800482e:	b480      	push	{r7}
 8004830:	b085      	sub	sp, #20
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	b29b      	uxth	r3, r3
}
 8004844:	4618      	mov	r0, r3
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	4608      	mov	r0, r1
 800485a:	4611      	mov	r1, r2
 800485c:	461a      	mov	r2, r3
 800485e:	4603      	mov	r3, r0
 8004860:	70fb      	strb	r3, [r7, #3]
 8004862:	460b      	mov	r3, r1
 8004864:	70bb      	strb	r3, [r7, #2]
 8004866:	4613      	mov	r3, r2
 8004868:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004872:	78fb      	ldrb	r3, [r7, #3]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	4413      	add	r3, r2
 800487a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800487e:	461a      	mov	r2, r3
 8004880:	f04f 33ff 	mov.w	r3, #4294967295
 8004884:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004886:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800488a:	2b03      	cmp	r3, #3
 800488c:	d87e      	bhi.n	800498c <USB_HC_Init+0x13c>
 800488e:	a201      	add	r2, pc, #4	; (adr r2, 8004894 <USB_HC_Init+0x44>)
 8004890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004894:	080048a5 	.word	0x080048a5
 8004898:	0800494f 	.word	0x0800494f
 800489c:	080048a5 	.word	0x080048a5
 80048a0:	08004911 	.word	0x08004911
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80048a4:	78fb      	ldrb	r3, [r7, #3]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b0:	461a      	mov	r2, r3
 80048b2:	f240 439d 	movw	r3, #1181	; 0x49d
 80048b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80048b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	da10      	bge.n	80048e2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	78fa      	ldrb	r2, [r7, #3]
 80048d0:	0151      	lsls	r1, r2, #5
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	440a      	add	r2, r1
 80048d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048de:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80048e0:	e057      	b.n	8004992 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d051      	beq.n	8004992 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80048ee:	78fb      	ldrb	r3, [r7, #3]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	78fa      	ldrb	r2, [r7, #3]
 80048fe:	0151      	lsls	r1, r2, #5
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	440a      	add	r2, r1
 8004904:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004908:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800490c:	60d3      	str	r3, [r2, #12]
      break;
 800490e:	e040      	b.n	8004992 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004910:	78fb      	ldrb	r3, [r7, #3]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	4413      	add	r3, r2
 8004918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800491c:	461a      	mov	r2, r3
 800491e:	f240 639d 	movw	r3, #1693	; 0x69d
 8004922:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004924:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004928:	2b00      	cmp	r3, #0
 800492a:	da34      	bge.n	8004996 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4413      	add	r3, r2
 8004934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	78fa      	ldrb	r2, [r7, #3]
 800493c:	0151      	lsls	r1, r2, #5
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	440a      	add	r2, r1
 8004942:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800494a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800494c:	e023      	b.n	8004996 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800494e:	78fb      	ldrb	r3, [r7, #3]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	4413      	add	r3, r2
 8004956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800495a:	461a      	mov	r2, r3
 800495c:	f240 2325 	movw	r3, #549	; 0x225
 8004960:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004962:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004966:	2b00      	cmp	r3, #0
 8004968:	da17      	bge.n	800499a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800496a:	78fb      	ldrb	r3, [r7, #3]
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	4413      	add	r3, r2
 8004972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	78fa      	ldrb	r2, [r7, #3]
 800497a:	0151      	lsls	r1, r2, #5
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	440a      	add	r2, r1
 8004980:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004984:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004988:	60d3      	str	r3, [r2, #12]
      }
      break;
 800498a:	e006      	b.n	800499a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	75fb      	strb	r3, [r7, #23]
      break;
 8004990:	e004      	b.n	800499c <USB_HC_Init+0x14c>
      break;
 8004992:	bf00      	nop
 8004994:	e002      	b.n	800499c <USB_HC_Init+0x14c>
      break;
 8004996:	bf00      	nop
 8004998:	e000      	b.n	800499c <USB_HC_Init+0x14c>
      break;
 800499a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049a2:	699a      	ldr	r2, [r3, #24]
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	2101      	movs	r1, #1
 80049ac:	fa01 f303 	lsl.w	r3, r1, r3
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049b6:	4313      	orrs	r3, r2
 80049b8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80049c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	da03      	bge.n	80049d6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80049ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049d2:	613b      	str	r3, [r7, #16]
 80049d4:	e001      	b.n	80049da <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80049da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d103      	bne.n	80049ea <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80049e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	e001      	b.n	80049ee <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80049ee:	787b      	ldrb	r3, [r7, #1]
 80049f0:	059b      	lsls	r3, r3, #22
 80049f2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80049f6:	78bb      	ldrb	r3, [r7, #2]
 80049f8:	02db      	lsls	r3, r3, #11
 80049fa:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80049fe:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004a00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a04:	049b      	lsls	r3, r3, #18
 8004a06:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004a0a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004a0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004a12:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004a18:	78fb      	ldrb	r3, [r7, #3]
 8004a1a:	0159      	lsls	r1, r3, #5
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	440b      	add	r3, r1
 8004a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a24:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004a2a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004a2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d10f      	bne.n	8004a54 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	78fa      	ldrb	r2, [r7, #3]
 8004a44:	0151      	lsls	r1, r2, #5
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	440a      	add	r2, r1
 8004a4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a52:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	371c      	adds	r7, #28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop

08004a64 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b08c      	sub	sp, #48	; 0x30
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	785b      	ldrb	r3, [r3, #1]
 8004a7a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004a7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a80:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d028      	beq.n	8004ae0 <USB_HC_StartXfer+0x7c>
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	791b      	ldrb	r3, [r3, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d124      	bne.n	8004ae0 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10b      	bne.n	8004ab4 <USB_HC_StartXfer+0x50>
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	795b      	ldrb	r3, [r3, #5]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d107      	bne.n	8004ab4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	785b      	ldrb	r3, [r3, #1]
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 fa2e 	bl	8004f0c <USB_DoPing>
      return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	e112      	b.n	8004cda <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d112      	bne.n	8004ae0 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	69fa      	ldr	r2, [r7, #28]
 8004aca:	0151      	lsls	r1, r2, #5
 8004acc:	6a3a      	ldr	r2, [r7, #32]
 8004ace:	440a      	add	r2, r1
 8004ad0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ad4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004ad8:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2200      	movs	r2, #0
 8004ade:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d018      	beq.n	8004b1a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	8912      	ldrh	r2, [r2, #8]
 8004af0:	4413      	add	r3, r2
 8004af2:	3b01      	subs	r3, #1
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	8912      	ldrh	r2, [r2, #8]
 8004af8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004afc:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004afe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004b00:	8b7b      	ldrh	r3, [r7, #26]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d90b      	bls.n	8004b1e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004b06:	8b7b      	ldrh	r3, [r7, #26]
 8004b08:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004b0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	8912      	ldrh	r2, [r2, #8]
 8004b10:	fb02 f203 	mul.w	r2, r2, r3
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	611a      	str	r2, [r3, #16]
 8004b18:	e001      	b.n	8004b1e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	78db      	ldrb	r3, [r3, #3]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d006      	beq.n	8004b34 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004b26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	8912      	ldrh	r2, [r2, #8]
 8004b2c:	fb02 f203 	mul.w	r2, r2, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004b3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b3e:	04d9      	lsls	r1, r3, #19
 8004b40:	4b68      	ldr	r3, [pc, #416]	; (8004ce4 <USB_HC_StartXfer+0x280>)
 8004b42:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004b44:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	7a9b      	ldrb	r3, [r3, #10]
 8004b4a:	075b      	lsls	r3, r3, #29
 8004b4c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004b50:	69f9      	ldr	r1, [r7, #28]
 8004b52:	0148      	lsls	r0, r1, #5
 8004b54:	6a39      	ldr	r1, [r7, #32]
 8004b56:	4401      	add	r1, r0
 8004b58:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004b5c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004b5e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004b60:	79fb      	ldrb	r3, [r7, #7]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d009      	beq.n	8004b7a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	68d9      	ldr	r1, [r3, #12]
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b76:	460a      	mov	r2, r1
 8004b78:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	bf0c      	ite	eq
 8004b8a:	2301      	moveq	r3, #1
 8004b8c:	2300      	movne	r3, #0
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	0151      	lsls	r1, r2, #5
 8004ba4:	6a3a      	ldr	r2, [r7, #32]
 8004ba6:	440a      	add	r2, r1
 8004ba8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004bb0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	7e7b      	ldrb	r3, [r7, #25]
 8004bc2:	075b      	lsls	r3, r3, #29
 8004bc4:	69f9      	ldr	r1, [r7, #28]
 8004bc6:	0148      	lsls	r0, r1, #5
 8004bc8:	6a39      	ldr	r1, [r7, #32]
 8004bca:	4401      	add	r1, r0
 8004bcc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a41      	ldr	r2, [pc, #260]	; (8004ce8 <USB_HC_StartXfer+0x284>)
 8004be4:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004be6:	4b40      	ldr	r3, [pc, #256]	; (8004ce8 <USB_HC_StartXfer+0x284>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004bee:	4a3e      	ldr	r2, [pc, #248]	; (8004ce8 <USB_HC_StartXfer+0x284>)
 8004bf0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	78db      	ldrb	r3, [r3, #3]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d006      	beq.n	8004c08 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004bfa:	4b3b      	ldr	r3, [pc, #236]	; (8004ce8 <USB_HC_StartXfer+0x284>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c02:	4a39      	ldr	r2, [pc, #228]	; (8004ce8 <USB_HC_StartXfer+0x284>)
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	e005      	b.n	8004c14 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004c08:	4b37      	ldr	r3, [pc, #220]	; (8004ce8 <USB_HC_StartXfer+0x284>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c10:	4a35      	ldr	r2, [pc, #212]	; (8004ce8 <USB_HC_StartXfer+0x284>)
 8004c12:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c14:	4b34      	ldr	r3, [pc, #208]	; (8004ce8 <USB_HC_StartXfer+0x284>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c1c:	4a32      	ldr	r2, [pc, #200]	; (8004ce8 <USB_HC_StartXfer+0x284>)
 8004c1e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	4b2e      	ldr	r3, [pc, #184]	; (8004ce8 <USB_HC_StartXfer+0x284>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d14e      	bne.n	8004cd8 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	78db      	ldrb	r3, [r3, #3]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d14a      	bne.n	8004cd8 <USB_HC_StartXfer+0x274>
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d046      	beq.n	8004cd8 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	79db      	ldrb	r3, [r3, #7]
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d830      	bhi.n	8004cb4 <USB_HC_StartXfer+0x250>
 8004c52:	a201      	add	r2, pc, #4	; (adr r2, 8004c58 <USB_HC_StartXfer+0x1f4>)
 8004c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c58:	08004c69 	.word	0x08004c69
 8004c5c:	08004c8d 	.word	0x08004c8d
 8004c60:	08004c69 	.word	0x08004c69
 8004c64:	08004c8d 	.word	0x08004c8d
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	3303      	adds	r3, #3
 8004c6e:	089b      	lsrs	r3, r3, #2
 8004c70:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004c72:	8afa      	ldrh	r2, [r7, #22]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d91c      	bls.n	8004cb8 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	f043 0220 	orr.w	r2, r3, #32
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	619a      	str	r2, [r3, #24]
          }
          break;
 8004c8a:	e015      	b.n	8004cb8 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	3303      	adds	r3, #3
 8004c92:	089b      	lsrs	r3, r3, #2
 8004c94:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004c96:	8afa      	ldrh	r2, [r7, #22]
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d90a      	bls.n	8004cbc <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	619a      	str	r2, [r3, #24]
          }
          break;
 8004cb2:	e003      	b.n	8004cbc <USB_HC_StartXfer+0x258>

        default:
          break;
 8004cb4:	bf00      	nop
 8004cb6:	e002      	b.n	8004cbe <USB_HC_StartXfer+0x25a>
          break;
 8004cb8:	bf00      	nop
 8004cba:	e000      	b.n	8004cbe <USB_HC_StartXfer+0x25a>
          break;
 8004cbc:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	68d9      	ldr	r1, [r3, #12]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	785a      	ldrb	r2, [r3, #1]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	b298      	uxth	r0, r3
 8004ccc:	2300      	movs	r3, #0
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f7ff fbc8 	bl	8004468 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3728      	adds	r7, #40	; 0x28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	1ff80000 	.word	0x1ff80000
 8004ce8:	200000ac 	.word	0x200000ac

08004cec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	b29b      	uxth	r3, r3
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b087      	sub	sp, #28
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	460b      	mov	r3, r1
 8004d18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004d1e:	78fb      	ldrb	r3, [r7, #3]
 8004d20:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	0c9b      	lsrs	r3, r3, #18
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <USB_HC_Halt+0x3a>
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d16c      	bne.n	8004e22 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	0151      	lsls	r1, r2, #5
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	440a      	add	r2, r1
 8004d5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d66:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d143      	bne.n	8004dfc <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	0151      	lsls	r1, r2, #5
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	440a      	add	r2, r1
 8004d8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d92:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	0151      	lsls	r1, r2, #5
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	440a      	add	r2, r1
 8004daa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004db2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	0151      	lsls	r1, r2, #5
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	440a      	add	r2, r1
 8004dca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004dd2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004de0:	d81d      	bhi.n	8004e1e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004df4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004df8:	d0ec      	beq.n	8004dd4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004dfa:	e080      	b.n	8004efe <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	0151      	lsls	r1, r2, #5
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	440a      	add	r2, r1
 8004e12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e1a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004e1c:	e06f      	b.n	8004efe <USB_HC_Halt+0x1f0>
          break;
 8004e1e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004e20:	e06d      	b.n	8004efe <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	0151      	lsls	r1, r2, #5
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	440a      	add	r2, r1
 8004e38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e40:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d143      	bne.n	8004eda <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	0151      	lsls	r1, r2, #5
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	440a      	add	r2, r1
 8004e68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e70:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	0151      	lsls	r1, r2, #5
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	440a      	add	r2, r1
 8004e88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e90:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	0151      	lsls	r1, r2, #5
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	440a      	add	r2, r1
 8004ea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004eb0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ebe:	d81d      	bhi.n	8004efc <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ed6:	d0ec      	beq.n	8004eb2 <USB_HC_Halt+0x1a4>
 8004ed8:	e011      	b.n	8004efe <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	0151      	lsls	r1, r2, #5
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	440a      	add	r2, r1
 8004ef0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ef4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ef8:	6013      	str	r3, [r2, #0]
 8004efa:	e000      	b.n	8004efe <USB_HC_Halt+0x1f0>
          break;
 8004efc:	bf00      	nop
    }
  }

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004f1c:	78fb      	ldrb	r3, [r7, #3]
 8004f1e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004f20:	2301      	movs	r3, #1
 8004f22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	04da      	lsls	r2, r3, #19
 8004f28:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <USB_DoPing+0x74>)
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	0151      	lsls	r1, r2, #5
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	440a      	add	r2, r1
 8004f34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f3c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f54:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f5c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	371c      	adds	r7, #28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	1ff80000 	.word	0x1ff80000

08004f84 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7ff f9e3 	bl	8004360 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004f9a:	2110      	movs	r1, #16
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff fa1b 	bl	80043d8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7ff fa3e 	bl	8004424 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004fa8:	2300      	movs	r3, #0
 8004faa:	613b      	str	r3, [r7, #16]
 8004fac:	e01f      	b.n	8004fee <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fc4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fcc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fd4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	3301      	adds	r3, #1
 8004fec:	613b      	str	r3, [r7, #16]
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	2b0f      	cmp	r3, #15
 8004ff2:	d9dc      	bls.n	8004fae <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	613b      	str	r3, [r7, #16]
 8004ff8:	e034      	b.n	8005064 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	4413      	add	r3, r2
 8005002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005010:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005018:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005020:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4413      	add	r3, r2
 800502a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800502e:	461a      	mov	r2, r3
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	3301      	adds	r3, #1
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005040:	d80c      	bhi.n	800505c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4413      	add	r3, r2
 800504a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005058:	d0ec      	beq.n	8005034 <USB_StopHost+0xb0>
 800505a:	e000      	b.n	800505e <USB_StopHost+0xda>
        break;
 800505c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	3301      	adds	r3, #1
 8005062:	613b      	str	r3, [r7, #16]
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2b0f      	cmp	r3, #15
 8005068:	d9c7      	bls.n	8004ffa <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005070:	461a      	mov	r2, r3
 8005072:	f04f 33ff 	mov.w	r3, #4294967295
 8005076:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f04f 32ff 	mov.w	r2, #4294967295
 800507e:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7ff f95c 	bl	800433e <USB_EnableGlobalInt>

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005090:	b590      	push	{r4, r7, lr}
 8005092:	b089      	sub	sp, #36	; 0x24
 8005094:	af04      	add	r7, sp, #16
 8005096:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8005098:	2302      	movs	r3, #2
 800509a:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 800509c:	2301      	movs	r3, #1
 800509e:	2202      	movs	r2, #2
 80050a0:	2102      	movs	r1, #2
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fc3a 	bl	800591c <USBH_FindInterface>
 80050a8:	4603      	mov	r3, r0
 80050aa:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 80050ac:	7bbb      	ldrb	r3, [r7, #14]
 80050ae:	2bff      	cmp	r3, #255	; 0xff
 80050b0:	f000 812a 	beq.w	8005308 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 80050b4:	7bbb      	ldrb	r3, [r7, #14]
 80050b6:	4619      	mov	r1, r3
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 fc13 	bl	80058e4 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80050c4:	2050      	movs	r0, #80	; 0x50
 80050c6:	f002 f863 	bl	8007190 <malloc>
 80050ca:	4603      	mov	r3, r0
 80050cc:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80050d8:	7bbb      	ldrb	r3, [r7, #14]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	211a      	movs	r1, #26
 80050de:	fb01 f303 	mul.w	r3, r1, r3
 80050e2:	4413      	add	r3, r2
 80050e4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	b25b      	sxtb	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	da15      	bge.n	800511c <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80050f0:	7bbb      	ldrb	r3, [r7, #14]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	211a      	movs	r1, #26
 80050f6:	fb01 f303 	mul.w	r3, r1, r3
 80050fa:	4413      	add	r3, r2
 80050fc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005100:	781a      	ldrb	r2, [r3, #0]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005106:	7bbb      	ldrb	r3, [r7, #14]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	211a      	movs	r1, #26
 800510c:	fb01 f303 	mul.w	r3, r1, r3
 8005110:	4413      	add	r3, r2
 8005112:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005116:	881a      	ldrh	r2, [r3, #0]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	785b      	ldrb	r3, [r3, #1]
 8005120:	4619      	mov	r1, r3
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 ff9f 	bl	8006066 <USBH_AllocPipe>
 8005128:	4603      	mov	r3, r0
 800512a:	461a      	mov	r2, r3
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	7819      	ldrb	r1, [r3, #0]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	7858      	ldrb	r0, [r3, #1]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	8952      	ldrh	r2, [r2, #10]
 8005148:	9202      	str	r2, [sp, #8]
 800514a:	2203      	movs	r2, #3
 800514c:	9201      	str	r2, [sp, #4]
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	4623      	mov	r3, r4
 8005152:	4602      	mov	r2, r0
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 ff57 	bl	8006008 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2200      	movs	r2, #0
 8005160:	4619      	mov	r1, r3
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f001 ff44 	bl	8006ff0 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8005168:	2300      	movs	r3, #0
 800516a:	2200      	movs	r2, #0
 800516c:	210a      	movs	r1, #10
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 fbd4 	bl	800591c <USBH_FindInterface>
 8005174:	4603      	mov	r3, r0
 8005176:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8005178:	7bbb      	ldrb	r3, [r7, #14]
 800517a:	2bff      	cmp	r3, #255	; 0xff
 800517c:	f000 80c4 	beq.w	8005308 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005180:	7bbb      	ldrb	r3, [r7, #14]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	211a      	movs	r1, #26
 8005186:	fb01 f303 	mul.w	r3, r1, r3
 800518a:	4413      	add	r3, r2
 800518c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	b25b      	sxtb	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	da16      	bge.n	80051c6 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005198:	7bbb      	ldrb	r3, [r7, #14]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	211a      	movs	r1, #26
 800519e:	fb01 f303 	mul.w	r3, r1, r3
 80051a2:	4413      	add	r3, r2
 80051a4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80051a8:	781a      	ldrb	r2, [r3, #0]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80051ae:	7bbb      	ldrb	r3, [r7, #14]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	211a      	movs	r1, #26
 80051b4:	fb01 f303 	mul.w	r3, r1, r3
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80051be:	881a      	ldrh	r2, [r3, #0]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	835a      	strh	r2, [r3, #26]
 80051c4:	e015      	b.n	80051f2 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80051c6:	7bbb      	ldrb	r3, [r7, #14]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	211a      	movs	r1, #26
 80051cc:	fb01 f303 	mul.w	r3, r1, r3
 80051d0:	4413      	add	r3, r2
 80051d2:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80051d6:	781a      	ldrb	r2, [r3, #0]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80051dc:	7bbb      	ldrb	r3, [r7, #14]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	211a      	movs	r1, #26
 80051e2:	fb01 f303 	mul.w	r3, r1, r3
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80051ec:	881a      	ldrh	r2, [r3, #0]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80051f2:	7bbb      	ldrb	r3, [r7, #14]
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	211a      	movs	r1, #26
 80051f8:	fb01 f303 	mul.w	r3, r1, r3
 80051fc:	4413      	add	r3, r2
 80051fe:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	b25b      	sxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	da16      	bge.n	8005238 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800520a:	7bbb      	ldrb	r3, [r7, #14]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	211a      	movs	r1, #26
 8005210:	fb01 f303 	mul.w	r3, r1, r3
 8005214:	4413      	add	r3, r2
 8005216:	f203 3352 	addw	r3, r3, #850	; 0x352
 800521a:	781a      	ldrb	r2, [r3, #0]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005220:	7bbb      	ldrb	r3, [r7, #14]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	211a      	movs	r1, #26
 8005226:	fb01 f303 	mul.w	r3, r1, r3
 800522a:	4413      	add	r3, r2
 800522c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005230:	881a      	ldrh	r2, [r3, #0]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	835a      	strh	r2, [r3, #26]
 8005236:	e015      	b.n	8005264 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005238:	7bbb      	ldrb	r3, [r7, #14]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	211a      	movs	r1, #26
 800523e:	fb01 f303 	mul.w	r3, r1, r3
 8005242:	4413      	add	r3, r2
 8005244:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005248:	781a      	ldrb	r2, [r3, #0]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800524e:	7bbb      	ldrb	r3, [r7, #14]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	211a      	movs	r1, #26
 8005254:	fb01 f303 	mul.w	r3, r1, r3
 8005258:	4413      	add	r3, r2
 800525a:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800525e:	881a      	ldrh	r2, [r3, #0]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	7b9b      	ldrb	r3, [r3, #14]
 8005268:	4619      	mov	r1, r3
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fefb 	bl	8006066 <USBH_AllocPipe>
 8005270:	4603      	mov	r3, r0
 8005272:	461a      	mov	r2, r3
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	7bdb      	ldrb	r3, [r3, #15]
 800527c:	4619      	mov	r1, r3
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fef1 	bl	8006066 <USBH_AllocPipe>
 8005284:	4603      	mov	r3, r0
 8005286:	461a      	mov	r2, r3
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	7b59      	ldrb	r1, [r3, #13]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	7b98      	ldrb	r0, [r3, #14]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	8b12      	ldrh	r2, [r2, #24]
 80052a4:	9202      	str	r2, [sp, #8]
 80052a6:	2202      	movs	r2, #2
 80052a8:	9201      	str	r2, [sp, #4]
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	4623      	mov	r3, r4
 80052ae:	4602      	mov	r2, r0
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 fea9 	bl	8006008 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	7b19      	ldrb	r1, [r3, #12]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	7bd8      	ldrb	r0, [r3, #15]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	8b52      	ldrh	r2, [r2, #26]
 80052ce:	9202      	str	r2, [sp, #8]
 80052d0:	2202      	movs	r2, #2
 80052d2:	9201      	str	r2, [sp, #4]
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	4623      	mov	r3, r4
 80052d8:	4602      	mov	r2, r0
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fe94 	bl	8006008 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	7b5b      	ldrb	r3, [r3, #13]
 80052ec:	2200      	movs	r2, #0
 80052ee:	4619      	mov	r1, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f001 fe7d 	bl	8006ff0 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	7b1b      	ldrb	r3, [r3, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	4619      	mov	r1, r3
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f001 fe76 	bl	8006ff0 <USBH_LL_SetToggle>
      status = USBH_OK;
 8005304:	2300      	movs	r3, #0
 8005306:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8005308:	7bfb      	ldrb	r3, [r7, #15]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	bd90      	pop	{r4, r7, pc}

08005312 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00e      	beq.n	800534a <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	4619      	mov	r1, r3
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fe87 	bl	8006046 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	4619      	mov	r1, r3
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 feaf 	bl	80060a2 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	7b1b      	ldrb	r3, [r3, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00e      	beq.n	8005370 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	7b1b      	ldrb	r3, [r3, #12]
 8005356:	4619      	mov	r1, r3
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fe74 	bl	8006046 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	7b1b      	ldrb	r3, [r3, #12]
 8005362:	4619      	mov	r1, r3
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 fe9c 	bl	80060a2 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	7b5b      	ldrb	r3, [r3, #13]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00e      	beq.n	8005396 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	7b5b      	ldrb	r3, [r3, #13]
 800537c:	4619      	mov	r1, r3
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fe61 	bl	8006046 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	7b5b      	ldrb	r3, [r3, #13]
 8005388:	4619      	mov	r1, r3
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fe89 	bl	80060a2 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00b      	beq.n	80053ba <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f001 fef8 	bl	80071a0 <free>
    phost->pActiveClass->pData = 0U;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80053b6:	2200      	movs	r2, #0
 80053b8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80053cc:	2302      	movs	r3, #2
 80053ce:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	3340      	adds	r3, #64	; 0x40
 80053de:	4619      	mov	r1, r3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f8b2 	bl	800554a <GetLineCoding>
 80053e6:	4603      	mov	r3, r0
 80053e8:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d105      	bne.n	80053fc <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80053f6:	2102      	movs	r1, #2
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	4798      	blx	r3
  }
  return status;
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005410:	2301      	movs	r3, #1
 8005412:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005414:	2300      	movs	r3, #0
 8005416:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005428:	2b04      	cmp	r3, #4
 800542a:	d877      	bhi.n	800551c <USBH_CDC_Process+0x114>
 800542c:	a201      	add	r2, pc, #4	; (adr r2, 8005434 <USBH_CDC_Process+0x2c>)
 800542e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005432:	bf00      	nop
 8005434:	08005449 	.word	0x08005449
 8005438:	0800544f 	.word	0x0800544f
 800543c:	0800547f 	.word	0x0800547f
 8005440:	080054f3 	.word	0x080054f3
 8005444:	08005501 	.word	0x08005501
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8005448:	2300      	movs	r3, #0
 800544a:	73fb      	strb	r3, [r7, #15]
    break;
 800544c:	e06d      	b.n	800552a <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005452:	4619      	mov	r1, r3
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f897 	bl	8005588 <SetLineCoding>
 800545a:	4603      	mov	r3, r0
 800545c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800545e:	7bbb      	ldrb	r3, [r7, #14]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d104      	bne.n	800546e <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800546c:	e058      	b.n	8005520 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800546e:	7bbb      	ldrb	r3, [r7, #14]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d055      	beq.n	8005520 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2204      	movs	r2, #4
 8005478:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800547c:	e050      	b.n	8005520 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	3340      	adds	r3, #64	; 0x40
 8005482:	4619      	mov	r1, r3
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f860 	bl	800554a <GetLineCoding>
 800548a:	4603      	mov	r3, r0
 800548c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800548e:	7bbb      	ldrb	r3, [r7, #14]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d126      	bne.n	80054e2 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a6:	791b      	ldrb	r3, [r3, #4]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d13b      	bne.n	8005524 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b6:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d133      	bne.n	8005524 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054c6:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d12b      	bne.n	8005524 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054d4:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d124      	bne.n	8005524 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f95a 	bl	8005794 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80054e0:	e020      	b.n	8005524 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 80054e2:	7bbb      	ldrb	r3, [r7, #14]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d01d      	beq.n	8005524 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2204      	movs	r2, #4
 80054ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80054f0:	e018      	b.n	8005524 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f867 	bl	80055c6 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f8dc 	bl	80056b6 <CDC_ProcessReception>
    break;
 80054fe:	e014      	b.n	800552a <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8005500:	2100      	movs	r1, #0
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fb08 	bl	8005b18 <USBH_ClrFeature>
 8005508:	4603      	mov	r3, r0
 800550a:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800550c:	7bbb      	ldrb	r3, [r7, #14]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10a      	bne.n	8005528 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800551a:	e005      	b.n	8005528 <USBH_CDC_Process+0x120>

  default:
    break;
 800551c:	bf00      	nop
 800551e:	e004      	b.n	800552a <USBH_CDC_Process+0x122>
    break;
 8005520:	bf00      	nop
 8005522:	e002      	b.n	800552a <USBH_CDC_Process+0x122>
    break;
 8005524:	bf00      	nop
 8005526:	e000      	b.n	800552a <USBH_CDC_Process+0x122>
    break;
 8005528:	bf00      	nop

  }

  return status;
 800552a:	7bfb      	ldrb	r3, [r7, #15]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b082      	sub	sp, #8
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	22a1      	movs	r2, #161	; 0xa1
 8005558:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2221      	movs	r2, #33	; 0x21
 800555e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2207      	movs	r2, #7
 8005570:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2207      	movs	r2, #7
 8005576:	4619      	mov	r1, r3
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 faf1 	bl	8005b60 <USBH_CtlReq>
 800557e:	4603      	mov	r3, r0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3708      	adds	r7, #8
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2221      	movs	r2, #33	; 0x21
 8005596:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2220      	movs	r2, #32
 800559c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2207      	movs	r2, #7
 80055ae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2207      	movs	r2, #7
 80055b4:	4619      	mov	r1, r3
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fad2 	bl	8005b60 <USBH_CtlReq>
 80055bc:	4603      	mov	r3, r0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b086      	sub	sp, #24
 80055ca:	af02      	add	r7, sp, #8
 80055cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80055d8:	2300      	movs	r3, #0
 80055da:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d002      	beq.n	80055ec <CDC_ProcessTransmission+0x26>
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d025      	beq.n	8005636 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 80055ea:	e060      	b.n	80056ae <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	8b12      	ldrh	r2, [r2, #24]
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d90c      	bls.n	8005612 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	69d9      	ldr	r1, [r3, #28]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8b1a      	ldrh	r2, [r3, #24]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	7b58      	ldrb	r0, [r3, #13]
 8005604:	2301      	movs	r3, #1
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	4603      	mov	r3, r0
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fcb9 	bl	8005f82 <USBH_BulkSendData>
 8005610:	e00c      	b.n	800562c <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800561a:	b29a      	uxth	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	7b58      	ldrb	r0, [r3, #13]
 8005620:	2301      	movs	r3, #1
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	4603      	mov	r3, r0
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fcab 	bl	8005f82 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005634:	e03b      	b.n	80056ae <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	7b5b      	ldrb	r3, [r3, #13]
 800563a:	4619      	mov	r1, r3
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f001 fcad 	bl	8006f9c <USBH_LL_GetURBState>
 8005642:	4603      	mov	r3, r0
 8005644:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8005646:	7afb      	ldrb	r3, [r7, #11]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d128      	bne.n	800569e <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	8b12      	ldrh	r2, [r2, #24]
 8005654:	4293      	cmp	r3, r2
 8005656:	d90e      	bls.n	8005676 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	8b12      	ldrh	r2, [r2, #24]
 8005660:	1a9a      	subs	r2, r3, r2
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	8b12      	ldrh	r2, [r2, #24]
 800566e:	441a      	add	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	61da      	str	r2, [r3, #28]
 8005674:	e002      	b.n	800567c <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	2b00      	cmp	r3, #0
 8005682:	d004      	beq.n	800568e <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800568c:	e00e      	b.n	80056ac <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f868 	bl	800576c <USBH_CDC_TransmitCallback>
    break;
 800569c:	e006      	b.n	80056ac <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 800569e:	7afb      	ldrb	r3, [r7, #11]
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d103      	bne.n	80056ac <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80056ac:	bf00      	nop
  }
}
 80056ae:	bf00      	nop
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b086      	sub	sp, #24
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80056c8:	2300      	movs	r3, #0
 80056ca:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80056d2:	2b03      	cmp	r3, #3
 80056d4:	d002      	beq.n	80056dc <CDC_ProcessReception+0x26>
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d00e      	beq.n	80056f8 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 80056da:	e043      	b.n	8005764 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	6a19      	ldr	r1, [r3, #32]
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	8b5a      	ldrh	r2, [r3, #26]
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	7b1b      	ldrb	r3, [r3, #12]
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fc6f 	bl	8005fcc <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2204      	movs	r2, #4
 80056f2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80056f6:	e035      	b.n	8005764 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	7b1b      	ldrb	r3, [r3, #12]
 80056fc:	4619      	mov	r1, r3
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f001 fc4c 	bl	8006f9c <USBH_LL_GetURBState>
 8005704:	4603      	mov	r3, r0
 8005706:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8005708:	7cfb      	ldrb	r3, [r7, #19]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d129      	bne.n	8005762 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	7b1b      	ldrb	r3, [r3, #12]
 8005712:	4619      	mov	r1, r3
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f001 fbaf 	bl	8006e78 <USBH_LL_GetLastXferSize>
 800571a:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	429a      	cmp	r2, r3
 8005724:	d016      	beq.n	8005754 <CDC_ProcessReception+0x9e>
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	8b5b      	ldrh	r3, [r3, #26]
 800572a:	461a      	mov	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4293      	cmp	r3, r2
 8005730:	d910      	bls.n	8005754 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	1ad2      	subs	r2, r2, r3
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	6a1a      	ldr	r2, [r3, #32]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	441a      	add	r2, r3
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2203      	movs	r2, #3
 800574e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005752:	e006      	b.n	8005762 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f80f 	bl	8005780 <USBH_CDC_ReceiveCallback>
    break;
 8005762:	bf00      	nop
  }
}
 8005764:	bf00      	nop
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]

}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]

}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]

}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	4613      	mov	r3, r2
 80057b4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80057bc:	2302      	movs	r3, #2
 80057be:	e019      	b.n	80057f4 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	79fa      	ldrb	r2, [r7, #7]
 80057c4:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 f80f 	bl	80057fc <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f001 fad1 	bl	8006d94 <USBH_LL_Init>

  return USBH_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005808:	e008      	b.n	800581c <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	32e0      	adds	r2, #224	; 0xe0
 8005810:	2100      	movs	r1, #0
 8005812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	3301      	adds	r3, #1
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2b0e      	cmp	r3, #14
 8005820:	d9f3      	bls.n	800580a <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005822:	2300      	movs	r3, #0
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	e009      	b.n	800583c <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4413      	add	r3, r2
 800582e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005832:	2200      	movs	r2, #0
 8005834:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	3301      	adds	r3, #1
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005842:	d3f1      	bcc.n	8005828 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2240      	movs	r2, #64	; 0x40
 8005868:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800588e:	b480      	push	{r7}
 8005890:	b085      	sub	sp, #20
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8005898:	2300      	movs	r3, #0
 800589a:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d017      	beq.n	80058d2 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10f      	bne.n	80058cc <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058b2:	1c59      	adds	r1, r3, #1
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	33dc      	adds	r3, #220	; 0xdc
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	73fb      	strb	r3, [r7, #15]
 80058ca:	e004      	b.n	80058d6 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80058cc:	2302      	movs	r3, #2
 80058ce:	73fb      	strb	r3, [r7, #15]
 80058d0:	e001      	b.n	80058d6 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80058d2:	2302      	movs	r3, #2
 80058d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 80058f0:	2300      	movs	r3, #0
 80058f2:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 80058fa:	78fa      	ldrb	r2, [r7, #3]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d204      	bcs.n	800590a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	78fa      	ldrb	r2, [r7, #3]
 8005904:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005908:	e001      	b.n	800590e <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800590a:	2302      	movs	r3, #2
 800590c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800590e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	4608      	mov	r0, r1
 8005926:	4611      	mov	r1, r2
 8005928:	461a      	mov	r2, r3
 800592a:	4603      	mov	r3, r0
 800592c:	70fb      	strb	r3, [r7, #3]
 800592e:	460b      	mov	r3, r1
 8005930:	70bb      	strb	r3, [r7, #2]
 8005932:	4613      	mov	r3, r2
 8005934:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8005936:	2300      	movs	r3, #0
 8005938:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800593a:	2300      	movs	r3, #0
 800593c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8005944:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005946:	e025      	b.n	8005994 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005948:	7dfb      	ldrb	r3, [r7, #23]
 800594a:	221a      	movs	r2, #26
 800594c:	fb02 f303 	mul.w	r3, r2, r3
 8005950:	3308      	adds	r3, #8
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4413      	add	r3, r2
 8005956:	3302      	adds	r3, #2
 8005958:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	795b      	ldrb	r3, [r3, #5]
 800595e:	78fa      	ldrb	r2, [r7, #3]
 8005960:	429a      	cmp	r2, r3
 8005962:	d002      	beq.n	800596a <USBH_FindInterface+0x4e>
 8005964:	78fb      	ldrb	r3, [r7, #3]
 8005966:	2bff      	cmp	r3, #255	; 0xff
 8005968:	d111      	bne.n	800598e <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800596e:	78ba      	ldrb	r2, [r7, #2]
 8005970:	429a      	cmp	r2, r3
 8005972:	d002      	beq.n	800597a <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005974:	78bb      	ldrb	r3, [r7, #2]
 8005976:	2bff      	cmp	r3, #255	; 0xff
 8005978:	d109      	bne.n	800598e <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800597e:	787a      	ldrb	r2, [r7, #1]
 8005980:	429a      	cmp	r2, r3
 8005982:	d002      	beq.n	800598a <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005984:	787b      	ldrb	r3, [r7, #1]
 8005986:	2bff      	cmp	r3, #255	; 0xff
 8005988:	d101      	bne.n	800598e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800598a:	7dfb      	ldrb	r3, [r7, #23]
 800598c:	e006      	b.n	800599c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800598e:	7dfb      	ldrb	r3, [r7, #23]
 8005990:	3301      	adds	r3, #1
 8005992:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005994:	7dfb      	ldrb	r3, [r7, #23]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d9d6      	bls.n	8005948 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800599a:	23ff      	movs	r3, #255	; 0xff
}
 800599c:	4618      	mov	r0, r3
 800599e:	371c      	adds	r7, #28
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f001 fa2b 	bl	8006e0c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80059b6:	2101      	movs	r1, #1
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f001 fb02 	bl	8006fc2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 80059da:	bf00      	nop
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b082      	sub	sp, #8
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f804 	bl	8005a0a <USBH_HandleSof>
}
 8005a02:	bf00      	nop
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b082      	sub	sp, #8
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b0b      	cmp	r3, #11
 8005a1a:	d10a      	bne.n	8005a32 <USBH_HandleSof+0x28>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d005      	beq.n	8005a32 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	4798      	blx	r3
  }
}
 8005a32:	bf00      	nop
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8005a4a:	bf00      	nop
}
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8005a66:	bf00      	nop
}
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b082      	sub	sp, #8
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10f      	bne.n	8005aa4 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00e      	beq.n	8005ab4 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005a9c:	2104      	movs	r1, #4
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	4798      	blx	r3
 8005aa2:	e007      	b.n	8005ab4 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d102      	bne.n	8005ab4 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b082      	sub	sp, #8
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f001 f9bb 	bl	8006e42 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	791b      	ldrb	r3, [r3, #4]
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fae5 	bl	80060a2 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	795b      	ldrb	r3, [r3, #5]
 8005adc:	4619      	mov	r1, r3
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fadf 	bl	80060a2 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d005      	beq.n	8005b02 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005afc:	2105      	movs	r1, #5
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f001 f982 	bl	8006e0c <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2203      	movs	r2, #3
 8005b0c:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	460b      	mov	r3, r1
 8005b22:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	789b      	ldrb	r3, [r3, #2]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d10f      	bne.n	8005b4c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8005b3e:	78fb      	ldrb	r3, [r7, #3]
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2100      	movs	r1, #0
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f805 	bl	8005b60 <USBH_CtlReq>
 8005b56:	4603      	mov	r3, r0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	789b      	ldrb	r3, [r3, #2]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d002      	beq.n	8005b80 <USBH_CtlReq+0x20>
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d00f      	beq.n	8005b9e <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8005b7e:	e034      	b.n	8005bea <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	88fa      	ldrh	r2, [r7, #6]
 8005b8a:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2202      	movs	r2, #2
 8005b96:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	75fb      	strb	r3, [r7, #23]
    break;
 8005b9c:	e025      	b.n	8005bea <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f000 f828 	bl	8005bf4 <USBH_HandleControl>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8005ba8:	7dfb      	ldrb	r3, [r7, #23]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d108      	bne.n	8005bc0 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	75fb      	strb	r3, [r7, #23]
    break;
 8005bbe:	e013      	b.n	8005be8 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8005bc0:	7dfb      	ldrb	r3, [r7, #23]
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d108      	bne.n	8005bd8 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	75fb      	strb	r3, [r7, #23]
    break;
 8005bd6:	e007      	b.n	8005be8 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8005bd8:	7dfb      	ldrb	r3, [r7, #23]
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d104      	bne.n	8005be8 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2201      	movs	r2, #1
 8005be2:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8005be4:	2302      	movs	r3, #2
 8005be6:	75fb      	strb	r3, [r7, #23]
    break;
 8005be8:	bf00      	nop
  }
  return status;
 8005bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af02      	add	r7, sp, #8
 8005bfa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005c00:	2300      	movs	r3, #0
 8005c02:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	7e1b      	ldrb	r3, [r3, #24]
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	2b0a      	cmp	r3, #10
 8005c0c:	f200 814c 	bhi.w	8005ea8 <USBH_HandleControl+0x2b4>
 8005c10:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <USBH_HandleControl+0x24>)
 8005c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c16:	bf00      	nop
 8005c18:	08005c45 	.word	0x08005c45
 8005c1c:	08005c5f 	.word	0x08005c5f
 8005c20:	08005cc9 	.word	0x08005cc9
 8005c24:	08005cef 	.word	0x08005cef
 8005c28:	08005d27 	.word	0x08005d27
 8005c2c:	08005d53 	.word	0x08005d53
 8005c30:	08005da5 	.word	0x08005da5
 8005c34:	08005dc7 	.word	0x08005dc7
 8005c38:	08005e03 	.word	0x08005e03
 8005c3c:	08005e2b 	.word	0x08005e2b
 8005c40:	08005e69 	.word	0x08005e69
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f103 0110 	add.w	r1, r3, #16
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	795b      	ldrb	r3, [r3, #5]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f939 	bl	8005ec8 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2202      	movs	r2, #2
 8005c5a:	761a      	strb	r2, [r3, #24]
    break;
 8005c5c:	e12f      	b.n	8005ebe <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	795b      	ldrb	r3, [r3, #5]
 8005c62:	4619      	mov	r1, r3
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f001 f999 	bl	8006f9c <USBH_LL_GetURBState>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8005c6e:	7bbb      	ldrb	r3, [r7, #14]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d11e      	bne.n	8005cb2 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	7c1b      	ldrb	r3, [r3, #16]
 8005c78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c7c:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	8adb      	ldrh	r3, [r3, #22]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8005c86:	7b7b      	ldrb	r3, [r7, #13]
 8005c88:	2b80      	cmp	r3, #128	; 0x80
 8005c8a:	d103      	bne.n	8005c94 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2203      	movs	r2, #3
 8005c90:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005c92:	e10b      	b.n	8005eac <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2205      	movs	r2, #5
 8005c98:	761a      	strb	r2, [r3, #24]
    break;
 8005c9a:	e107      	b.n	8005eac <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8005c9c:	7b7b      	ldrb	r3, [r7, #13]
 8005c9e:	2b80      	cmp	r3, #128	; 0x80
 8005ca0:	d103      	bne.n	8005caa <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2209      	movs	r2, #9
 8005ca6:	761a      	strb	r2, [r3, #24]
    break;
 8005ca8:	e100      	b.n	8005eac <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2207      	movs	r2, #7
 8005cae:	761a      	strb	r2, [r3, #24]
    break;
 8005cb0:	e0fc      	b.n	8005eac <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8005cb2:	7bbb      	ldrb	r3, [r7, #14]
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	d003      	beq.n	8005cc0 <USBH_HandleControl+0xcc>
 8005cb8:	7bbb      	ldrb	r3, [r7, #14]
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	f040 80f6 	bne.w	8005eac <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	220b      	movs	r2, #11
 8005cc4:	761a      	strb	r2, [r3, #24]
    break;
 8005cc6:	e0f1      	b.n	8005eac <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6899      	ldr	r1, [r3, #8]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	899a      	ldrh	r2, [r3, #12]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	791b      	ldrb	r3, [r3, #4]
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f930 	bl	8005f46 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2204      	movs	r2, #4
 8005cea:	761a      	strb	r2, [r3, #24]
    break;
 8005cec:	e0e7      	b.n	8005ebe <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	791b      	ldrb	r3, [r3, #4]
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f001 f951 	bl	8006f9c <USBH_LL_GetURBState>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8005cfe:	7bbb      	ldrb	r3, [r7, #14]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d102      	bne.n	8005d0a <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2209      	movs	r2, #9
 8005d08:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8005d0a:	7bbb      	ldrb	r3, [r7, #14]
 8005d0c:	2b05      	cmp	r3, #5
 8005d0e:	d102      	bne.n	8005d16 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8005d10:	2303      	movs	r3, #3
 8005d12:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005d14:	e0cc      	b.n	8005eb0 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8005d16:	7bbb      	ldrb	r3, [r7, #14]
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	f040 80c9 	bne.w	8005eb0 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	220b      	movs	r2, #11
 8005d22:	761a      	strb	r2, [r3, #24]
    break;
 8005d24:	e0c4      	b.n	8005eb0 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6899      	ldr	r1, [r3, #8]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	899a      	ldrh	r2, [r3, #12]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	7958      	ldrb	r0, [r3, #5]
 8005d32:	2301      	movs	r3, #1
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	4603      	mov	r3, r0
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f8df 	bl	8005efc <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2206      	movs	r2, #6
 8005d4e:	761a      	strb	r2, [r3, #24]
    break;
 8005d50:	e0b5      	b.n	8005ebe <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	795b      	ldrb	r3, [r3, #5]
 8005d56:	4619      	mov	r1, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f001 f91f 	bl	8006f9c <USBH_LL_GetURBState>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8005d62:	7bbb      	ldrb	r3, [r7, #14]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d103      	bne.n	8005d70 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2207      	movs	r2, #7
 8005d6c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005d6e:	e0a1      	b.n	8005eb4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8005d70:	7bbb      	ldrb	r3, [r7, #14]
 8005d72:	2b05      	cmp	r3, #5
 8005d74:	d105      	bne.n	8005d82 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	220c      	movs	r2, #12
 8005d7a:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	73fb      	strb	r3, [r7, #15]
    break;
 8005d80:	e098      	b.n	8005eb4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8005d82:	7bbb      	ldrb	r3, [r7, #14]
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d103      	bne.n	8005d90 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2205      	movs	r2, #5
 8005d8c:	761a      	strb	r2, [r3, #24]
    break;
 8005d8e:	e091      	b.n	8005eb4 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8005d90:	7bbb      	ldrb	r3, [r7, #14]
 8005d92:	2b04      	cmp	r3, #4
 8005d94:	f040 808e 	bne.w	8005eb4 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	220b      	movs	r2, #11
 8005d9c:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8005d9e:	2302      	movs	r3, #2
 8005da0:	73fb      	strb	r3, [r7, #15]
    break;
 8005da2:	e087      	b.n	8005eb4 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	791b      	ldrb	r3, [r3, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	2100      	movs	r1, #0
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f8ca 	bl	8005f46 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2208      	movs	r2, #8
 8005dc2:	761a      	strb	r2, [r3, #24]

    break;
 8005dc4:	e07b      	b.n	8005ebe <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	791b      	ldrb	r3, [r3, #4]
 8005dca:	4619      	mov	r1, r3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f001 f8e5 	bl	8006f9c <USBH_LL_GetURBState>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8005dd6:	7bbb      	ldrb	r3, [r7, #14]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d105      	bne.n	8005de8 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	220d      	movs	r2, #13
 8005de0:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005de6:	e067      	b.n	8005eb8 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8005de8:	7bbb      	ldrb	r3, [r7, #14]
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d103      	bne.n	8005df6 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	220b      	movs	r2, #11
 8005df2:	761a      	strb	r2, [r3, #24]
    break;
 8005df4:	e060      	b.n	8005eb8 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8005df6:	7bbb      	ldrb	r3, [r7, #14]
 8005df8:	2b05      	cmp	r3, #5
 8005dfa:	d15d      	bne.n	8005eb8 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	73fb      	strb	r3, [r7, #15]
    break;
 8005e00:	e05a      	b.n	8005eb8 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	795a      	ldrb	r2, [r3, #5]
 8005e06:	2301      	movs	r3, #1
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	2100      	movs	r1, #0
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f873 	bl	8005efc <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	220a      	movs	r2, #10
 8005e26:	761a      	strb	r2, [r3, #24]
    break;
 8005e28:	e049      	b.n	8005ebe <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	795b      	ldrb	r3, [r3, #5]
 8005e2e:	4619      	mov	r1, r3
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f001 f8b3 	bl	8006f9c <USBH_LL_GetURBState>
 8005e36:	4603      	mov	r3, r0
 8005e38:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8005e3a:	7bbb      	ldrb	r3, [r7, #14]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d105      	bne.n	8005e4c <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8005e40:	2300      	movs	r3, #0
 8005e42:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	220d      	movs	r2, #13
 8005e48:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8005e4a:	e037      	b.n	8005ebc <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8005e4c:	7bbb      	ldrb	r3, [r7, #14]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d103      	bne.n	8005e5a <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2209      	movs	r2, #9
 8005e56:	761a      	strb	r2, [r3, #24]
    break;
 8005e58:	e030      	b.n	8005ebc <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8005e5a:	7bbb      	ldrb	r3, [r7, #14]
 8005e5c:	2b04      	cmp	r3, #4
 8005e5e:	d12d      	bne.n	8005ebc <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	220b      	movs	r2, #11
 8005e64:	761a      	strb	r2, [r3, #24]
    break;
 8005e66:	e029      	b.n	8005ebc <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	7e5b      	ldrb	r3, [r3, #25]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	765a      	strb	r2, [r3, #25]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	7e5b      	ldrb	r3, [r3, #25]
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d809      	bhi.n	8005e90 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 ffe0 	bl	8006e42 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8005e8e:	e016      	b.n	8005ebe <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005e96:	2106      	movs	r1, #6
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	73fb      	strb	r3, [r7, #15]
    break;
 8005ea6:	e00a      	b.n	8005ebe <USBH_HandleControl+0x2ca>

  default:
    break;
 8005ea8:	bf00      	nop
 8005eaa:	e008      	b.n	8005ebe <USBH_HandleControl+0x2ca>
    break;
 8005eac:	bf00      	nop
 8005eae:	e006      	b.n	8005ebe <USBH_HandleControl+0x2ca>
    break;
 8005eb0:	bf00      	nop
 8005eb2:	e004      	b.n	8005ebe <USBH_HandleControl+0x2ca>
    break;
 8005eb4:	bf00      	nop
 8005eb6:	e002      	b.n	8005ebe <USBH_HandleControl+0x2ca>
    break;
 8005eb8:	bf00      	nop
 8005eba:	e000      	b.n	8005ebe <USBH_HandleControl+0x2ca>
    break;
 8005ebc:	bf00      	nop
  }
  return status;
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af04      	add	r7, sp, #16
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005ed6:	79f9      	ldrb	r1, [r7, #7]
 8005ed8:	2300      	movs	r3, #0
 8005eda:	9303      	str	r3, [sp, #12]
 8005edc:	2308      	movs	r3, #8
 8005ede:	9302      	str	r3, [sp, #8]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	9301      	str	r3, [sp, #4]
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	2300      	movs	r3, #0
 8005eea:	2200      	movs	r2, #0
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f001 f824 	bl	8006f3a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b088      	sub	sp, #32
 8005f00:	af04      	add	r7, sp, #16
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	4611      	mov	r1, r2
 8005f08:	461a      	mov	r2, r3
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	80fb      	strh	r3, [r7, #6]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005f20:	7979      	ldrb	r1, [r7, #5]
 8005f22:	7e3b      	ldrb	r3, [r7, #24]
 8005f24:	9303      	str	r3, [sp, #12]
 8005f26:	88fb      	ldrh	r3, [r7, #6]
 8005f28:	9302      	str	r3, [sp, #8]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	9301      	str	r3, [sp, #4]
 8005f2e:	2301      	movs	r3, #1
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	2300      	movs	r3, #0
 8005f34:	2200      	movs	r2, #0
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 ffff 	bl	8006f3a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b088      	sub	sp, #32
 8005f4a:	af04      	add	r7, sp, #16
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	4611      	mov	r1, r2
 8005f52:	461a      	mov	r2, r3
 8005f54:	460b      	mov	r3, r1
 8005f56:	80fb      	strh	r3, [r7, #6]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005f5c:	7979      	ldrb	r1, [r7, #5]
 8005f5e:	2300      	movs	r3, #0
 8005f60:	9303      	str	r3, [sp, #12]
 8005f62:	88fb      	ldrh	r3, [r7, #6]
 8005f64:	9302      	str	r3, [sp, #8]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	9301      	str	r3, [sp, #4]
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	2201      	movs	r2, #1
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f000 ffe1 	bl	8006f3a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8005f78:	2300      	movs	r3, #0

}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b088      	sub	sp, #32
 8005f86:	af04      	add	r7, sp, #16
 8005f88:	60f8      	str	r0, [r7, #12]
 8005f8a:	60b9      	str	r1, [r7, #8]
 8005f8c:	4611      	mov	r1, r2
 8005f8e:	461a      	mov	r2, r3
 8005f90:	460b      	mov	r3, r1
 8005f92:	80fb      	strh	r3, [r7, #6]
 8005f94:	4613      	mov	r3, r2
 8005f96:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005fa6:	7979      	ldrb	r1, [r7, #5]
 8005fa8:	7e3b      	ldrb	r3, [r7, #24]
 8005faa:	9303      	str	r3, [sp, #12]
 8005fac:	88fb      	ldrh	r3, [r7, #6]
 8005fae:	9302      	str	r3, [sp, #8]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	9301      	str	r3, [sp, #4]
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	2302      	movs	r3, #2
 8005fba:	2200      	movs	r2, #0
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 ffbc 	bl	8006f3a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b088      	sub	sp, #32
 8005fd0:	af04      	add	r7, sp, #16
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	461a      	mov	r2, r3
 8005fda:	460b      	mov	r3, r1
 8005fdc:	80fb      	strh	r3, [r7, #6]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005fe2:	7979      	ldrb	r1, [r7, #5]
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	9303      	str	r3, [sp, #12]
 8005fe8:	88fb      	ldrh	r3, [r7, #6]
 8005fea:	9302      	str	r3, [sp, #8]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	9301      	str	r3, [sp, #4]
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 ff9e 	bl	8006f3a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af04      	add	r7, sp, #16
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	4608      	mov	r0, r1
 8006012:	4611      	mov	r1, r2
 8006014:	461a      	mov	r2, r3
 8006016:	4603      	mov	r3, r0
 8006018:	70fb      	strb	r3, [r7, #3]
 800601a:	460b      	mov	r3, r1
 800601c:	70bb      	strb	r3, [r7, #2]
 800601e:	4613      	mov	r3, r2
 8006020:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8006022:	7878      	ldrb	r0, [r7, #1]
 8006024:	78ba      	ldrb	r2, [r7, #2]
 8006026:	78f9      	ldrb	r1, [r7, #3]
 8006028:	8b3b      	ldrh	r3, [r7, #24]
 800602a:	9302      	str	r3, [sp, #8]
 800602c:	7d3b      	ldrb	r3, [r7, #20]
 800602e:	9301      	str	r3, [sp, #4]
 8006030:	7c3b      	ldrb	r3, [r7, #16]
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	4603      	mov	r3, r0
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 ff31 	bl	8006e9e <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800603c:	2300      	movs	r3, #0

}
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b082      	sub	sp, #8
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	460b      	mov	r3, r1
 8006050:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8006052:	78fb      	ldrb	r3, [r7, #3]
 8006054:	4619      	mov	r1, r3
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 ff50 	bl	8006efc <USBH_LL_ClosePipe>

  return USBH_OK;
 800605c:	2300      	movs	r3, #0

}
 800605e:	4618      	mov	r0, r3
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	460b      	mov	r3, r1
 8006070:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f831 	bl	80060da <USBH_GetFreePipe>
 8006078:	4603      	mov	r3, r0
 800607a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800607c:	89fb      	ldrh	r3, [r7, #14]
 800607e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006082:	4293      	cmp	r3, r2
 8006084:	d007      	beq.n	8006096 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8006086:	78fb      	ldrb	r3, [r7, #3]
 8006088:	89fa      	ldrh	r2, [r7, #14]
 800608a:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	32e0      	adds	r2, #224	; 0xe0
 8006092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8006096:	89fb      	ldrh	r3, [r7, #14]
 8006098:	b2db      	uxtb	r3, r3
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b083      	sub	sp, #12
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
 80060aa:	460b      	mov	r3, r1
 80060ac:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 80060ae:	78fb      	ldrb	r3, [r7, #3]
 80060b0:	2b0a      	cmp	r3, #10
 80060b2:	d80b      	bhi.n	80060cc <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 80060b4:	78fa      	ldrb	r2, [r7, #3]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	32e0      	adds	r2, #224	; 0xe0
 80060ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060be:	78fa      	ldrb	r2, [r7, #3]
 80060c0:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	32e0      	adds	r2, #224	; 0xe0
 80060c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80060da:	b480      	push	{r7}
 80060dc:	b085      	sub	sp, #20
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80060e6:	2300      	movs	r3, #0
 80060e8:	73fb      	strb	r3, [r7, #15]
 80060ea:	e00e      	b.n	800610a <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80060ec:	7bfa      	ldrb	r2, [r7, #15]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	32e0      	adds	r2, #224	; 0xe0
 80060f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d102      	bne.n	8006104 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 80060fe:	7bfb      	ldrb	r3, [r7, #15]
 8006100:	b29b      	uxth	r3, r3
 8006102:	e007      	b.n	8006114 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8006104:	7bfb      	ldrb	r3, [r7, #15]
 8006106:	3301      	adds	r3, #1
 8006108:	73fb      	strb	r3, [r7, #15]
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	2b0a      	cmp	r3, #10
 800610e:	d9ed      	bls.n	80060ec <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8006110:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006126:	f7fa fa23 	bl	8000570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800612a:	f000 f873 	bl	8006214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800612e:	f000 f9b1 	bl	8006494 <MX_GPIO_Init>
  MX_I2C1_Init();
 8006132:	f000 f8f1 	bl	8006318 <MX_I2C1_Init>
  MX_I2S3_Init();
 8006136:	f000 f91d 	bl	8006374 <MX_I2S3_Init>
  MX_SPI1_Init();
 800613a:	f000 f94b 	bl	80063d4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800613e:	f000 fd1f 	bl	8006b80 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8006142:	f000 f97d 	bl	8006440 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char buffer[1];
  int stage = 0;
 8006146:	2300      	movs	r3, #0
 8006148:	607b      	str	r3, [r7, #4]
  while(1){

	  if (HAL_UART_Receive(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY) == HAL_OK){
 800614a:	4639      	mov	r1, r7
 800614c:	f04f 33ff 	mov.w	r3, #4294967295
 8006150:	2201      	movs	r2, #1
 8006152:	482c      	ldr	r0, [pc, #176]	; (8006204 <main+0xe4>)
 8006154:	f7fd fd97 	bl	8003c86 <HAL_UART_Receive>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1f5      	bne.n	800614a <main+0x2a>
		  char x = buffer[0];
 800615e:	783b      	ldrb	r3, [r7, #0]
 8006160:	70fb      	strb	r3, [r7, #3]


		  if(stage == 0){
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d108      	bne.n	800617a <main+0x5a>
			  if(x == 'o'){
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	2b6f      	cmp	r3, #111	; 0x6f
 800616c:	d102      	bne.n	8006174 <main+0x54>
				  stage = 1;
 800616e:	2301      	movs	r3, #1
 8006170:	607b      	str	r3, [r7, #4]
 8006172:	e7ea      	b.n	800614a <main+0x2a>
			  }else{
				  stage = 0;
 8006174:	2300      	movs	r3, #0
 8006176:	607b      	str	r3, [r7, #4]
 8006178:	e7e7      	b.n	800614a <main+0x2a>
			  }
		  } else if(stage == 1){
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d10e      	bne.n	800619e <main+0x7e>
			  if(x == 'n'){
 8006180:	78fb      	ldrb	r3, [r7, #3]
 8006182:	2b6e      	cmp	r3, #110	; 0x6e
 8006184:	d102      	bne.n	800618c <main+0x6c>
				  stage = 2;
 8006186:	2302      	movs	r3, #2
 8006188:	607b      	str	r3, [r7, #4]
 800618a:	e7de      	b.n	800614a <main+0x2a>
			  }else if(x == 'f'){
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	2b66      	cmp	r3, #102	; 0x66
 8006190:	d102      	bne.n	8006198 <main+0x78>
				  stage = 3;
 8006192:	2303      	movs	r3, #3
 8006194:	607b      	str	r3, [r7, #4]
 8006196:	e7d8      	b.n	800614a <main+0x2a>
			  }else{
				  stage = 0;
 8006198:	2300      	movs	r3, #0
 800619a:	607b      	str	r3, [r7, #4]
 800619c:	e7d5      	b.n	800614a <main+0x2a>
			  }
		  } else if(stage == 2){
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d10e      	bne.n	80061c2 <main+0xa2>
			  if(x == '\r'){
 80061a4:	78fb      	ldrb	r3, [r7, #3]
 80061a6:	2b0d      	cmp	r3, #13
 80061a8:	d108      	bne.n	80061bc <main+0x9c>
				  printf("Stage 2 with enter");
 80061aa:	4817      	ldr	r0, [pc, #92]	; (8006208 <main+0xe8>)
 80061ac:	f001 f8b0 	bl	8007310 <iprintf>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80061b0:	2201      	movs	r2, #1
 80061b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80061b6:	4815      	ldr	r0, [pc, #84]	; (800620c <main+0xec>)
 80061b8:	f7fa fd1a 	bl	8000bf0 <HAL_GPIO_WritePin>
			  }
			  stage = 0;
 80061bc:	2300      	movs	r3, #0
 80061be:	607b      	str	r3, [r7, #4]
 80061c0:	e7c3      	b.n	800614a <main+0x2a>
		  } else if(stage == 3){
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b03      	cmp	r3, #3
 80061c6:	d108      	bne.n	80061da <main+0xba>
			  if(x == 'f'){
 80061c8:	78fb      	ldrb	r3, [r7, #3]
 80061ca:	2b66      	cmp	r3, #102	; 0x66
 80061cc:	d102      	bne.n	80061d4 <main+0xb4>
				  stage = 5;
 80061ce:	2305      	movs	r3, #5
 80061d0:	607b      	str	r3, [r7, #4]
 80061d2:	e7ba      	b.n	800614a <main+0x2a>
			  }else{
				  stage = 0;
 80061d4:	2300      	movs	r3, #0
 80061d6:	607b      	str	r3, [r7, #4]
 80061d8:	e7b7      	b.n	800614a <main+0x2a>
			  }
		  } else if(stage == 5){
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b05      	cmp	r3, #5
 80061de:	d10e      	bne.n	80061fe <main+0xde>
			  if(x == '\r'){
 80061e0:	78fb      	ldrb	r3, [r7, #3]
 80061e2:	2b0d      	cmp	r3, #13
 80061e4:	d108      	bne.n	80061f8 <main+0xd8>
				  printf("Stage 5 with enter");
 80061e6:	480a      	ldr	r0, [pc, #40]	; (8006210 <main+0xf0>)
 80061e8:	f001 f892 	bl	8007310 <iprintf>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80061ec:	2200      	movs	r2, #0
 80061ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80061f2:	4806      	ldr	r0, [pc, #24]	; (800620c <main+0xec>)
 80061f4:	f7fa fcfc 	bl	8000bf0 <HAL_GPIO_WritePin>
			  }
			  stage = 0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	607b      	str	r3, [r7, #4]
 80061fc:	e7a5      	b.n	800614a <main+0x2a>
		  } else {
			  stage = 0;
 80061fe:	2300      	movs	r3, #0
 8006200:	607b      	str	r3, [r7, #4]
	  if (HAL_UART_Receive(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY) == HAL_OK){
 8006202:	e7a2      	b.n	800614a <main+0x2a>
 8006204:	20000170 	.word	0x20000170
 8006208:	08007fa4 	.word	0x08007fa4
 800620c:	40020c00 	.word	0x40020c00
 8006210:	08007fb8 	.word	0x08007fb8

08006214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b098      	sub	sp, #96	; 0x60
 8006218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800621a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800621e:	2230      	movs	r2, #48	; 0x30
 8006220:	2100      	movs	r1, #0
 8006222:	4618      	mov	r0, r3
 8006224:	f000 ffc4 	bl	80071b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006228:	f107 031c 	add.w	r3, r7, #28
 800622c:	2200      	movs	r2, #0
 800622e:	601a      	str	r2, [r3, #0]
 8006230:	605a      	str	r2, [r3, #4]
 8006232:	609a      	str	r2, [r3, #8]
 8006234:	60da      	str	r2, [r3, #12]
 8006236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006238:	f107 030c 	add.w	r3, r7, #12
 800623c:	2200      	movs	r2, #0
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	605a      	str	r2, [r3, #4]
 8006242:	609a      	str	r2, [r3, #8]
 8006244:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006246:	2300      	movs	r3, #0
 8006248:	60bb      	str	r3, [r7, #8]
 800624a:	4b31      	ldr	r3, [pc, #196]	; (8006310 <SystemClock_Config+0xfc>)
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	4a30      	ldr	r2, [pc, #192]	; (8006310 <SystemClock_Config+0xfc>)
 8006250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006254:	6413      	str	r3, [r2, #64]	; 0x40
 8006256:	4b2e      	ldr	r3, [pc, #184]	; (8006310 <SystemClock_Config+0xfc>)
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800625e:	60bb      	str	r3, [r7, #8]
 8006260:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006262:	2300      	movs	r3, #0
 8006264:	607b      	str	r3, [r7, #4]
 8006266:	4b2b      	ldr	r3, [pc, #172]	; (8006314 <SystemClock_Config+0x100>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a2a      	ldr	r2, [pc, #168]	; (8006314 <SystemClock_Config+0x100>)
 800626c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	4b28      	ldr	r3, [pc, #160]	; (8006314 <SystemClock_Config+0x100>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800627a:	607b      	str	r3, [r7, #4]
 800627c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800627e:	2301      	movs	r3, #1
 8006280:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006282:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006286:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006288:	2302      	movs	r3, #2
 800628a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800628c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006290:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006292:	2308      	movs	r3, #8
 8006294:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8006296:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800629a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800629c:	2302      	movs	r3, #2
 800629e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80062a0:	2307      	movs	r3, #7
 80062a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80062a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7fc fecd 	bl	8003048 <HAL_RCC_OscConfig>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80062b4:	f000 f9ec 	bl	8006690 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80062b8:	230f      	movs	r3, #15
 80062ba:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80062bc:	2302      	movs	r3, #2
 80062be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80062c0:	2300      	movs	r3, #0
 80062c2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80062c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80062c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80062ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80062d0:	f107 031c 	add.w	r3, r7, #28
 80062d4:	2105      	movs	r1, #5
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fd f8f8 	bl	80034cc <HAL_RCC_ClockConfig>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80062e2:	f000 f9d5 	bl	8006690 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80062e6:	2301      	movs	r3, #1
 80062e8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80062ea:	23c0      	movs	r3, #192	; 0xc0
 80062ec:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80062ee:	2302      	movs	r3, #2
 80062f0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062f2:	f107 030c 	add.w	r3, r7, #12
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fd fad6 	bl	80038a8 <HAL_RCCEx_PeriphCLKConfig>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8006302:	f000 f9c5 	bl	8006690 <Error_Handler>
  }
}
 8006306:	bf00      	nop
 8006308:	3760      	adds	r7, #96	; 0x60
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	40023800 	.word	0x40023800
 8006314:	40007000 	.word	0x40007000

08006318 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800631c:	4b12      	ldr	r3, [pc, #72]	; (8006368 <MX_I2C1_Init+0x50>)
 800631e:	4a13      	ldr	r2, [pc, #76]	; (800636c <MX_I2C1_Init+0x54>)
 8006320:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006322:	4b11      	ldr	r3, [pc, #68]	; (8006368 <MX_I2C1_Init+0x50>)
 8006324:	4a12      	ldr	r2, [pc, #72]	; (8006370 <MX_I2C1_Init+0x58>)
 8006326:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006328:	4b0f      	ldr	r3, [pc, #60]	; (8006368 <MX_I2C1_Init+0x50>)
 800632a:	2200      	movs	r2, #0
 800632c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800632e:	4b0e      	ldr	r3, [pc, #56]	; (8006368 <MX_I2C1_Init+0x50>)
 8006330:	2200      	movs	r2, #0
 8006332:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006334:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <MX_I2C1_Init+0x50>)
 8006336:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800633a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800633c:	4b0a      	ldr	r3, [pc, #40]	; (8006368 <MX_I2C1_Init+0x50>)
 800633e:	2200      	movs	r2, #0
 8006340:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006342:	4b09      	ldr	r3, [pc, #36]	; (8006368 <MX_I2C1_Init+0x50>)
 8006344:	2200      	movs	r2, #0
 8006346:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006348:	4b07      	ldr	r3, [pc, #28]	; (8006368 <MX_I2C1_Init+0x50>)
 800634a:	2200      	movs	r2, #0
 800634c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800634e:	4b06      	ldr	r3, [pc, #24]	; (8006368 <MX_I2C1_Init+0x50>)
 8006350:	2200      	movs	r2, #0
 8006352:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006354:	4804      	ldr	r0, [pc, #16]	; (8006368 <MX_I2C1_Init+0x50>)
 8006356:	f7fc f8af 	bl	80024b8 <HAL_I2C_Init>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006360:	f000 f996 	bl	8006690 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006364:	bf00      	nop
 8006366:	bd80      	pop	{r7, pc}
 8006368:	200000c4 	.word	0x200000c4
 800636c:	40005400 	.word	0x40005400
 8006370:	000186a0 	.word	0x000186a0

08006374 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8006378:	4b13      	ldr	r3, [pc, #76]	; (80063c8 <MX_I2S3_Init+0x54>)
 800637a:	4a14      	ldr	r2, [pc, #80]	; (80063cc <MX_I2S3_Init+0x58>)
 800637c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800637e:	4b12      	ldr	r3, [pc, #72]	; (80063c8 <MX_I2S3_Init+0x54>)
 8006380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006384:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8006386:	4b10      	ldr	r3, [pc, #64]	; (80063c8 <MX_I2S3_Init+0x54>)
 8006388:	2200      	movs	r2, #0
 800638a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800638c:	4b0e      	ldr	r3, [pc, #56]	; (80063c8 <MX_I2S3_Init+0x54>)
 800638e:	2200      	movs	r2, #0
 8006390:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8006392:	4b0d      	ldr	r3, [pc, #52]	; (80063c8 <MX_I2S3_Init+0x54>)
 8006394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006398:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800639a:	4b0b      	ldr	r3, [pc, #44]	; (80063c8 <MX_I2S3_Init+0x54>)
 800639c:	4a0c      	ldr	r2, [pc, #48]	; (80063d0 <MX_I2S3_Init+0x5c>)
 800639e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80063a0:	4b09      	ldr	r3, [pc, #36]	; (80063c8 <MX_I2S3_Init+0x54>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80063a6:	4b08      	ldr	r3, [pc, #32]	; (80063c8 <MX_I2S3_Init+0x54>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80063ac:	4b06      	ldr	r3, [pc, #24]	; (80063c8 <MX_I2S3_Init+0x54>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80063b2:	4805      	ldr	r0, [pc, #20]	; (80063c8 <MX_I2S3_Init+0x54>)
 80063b4:	f7fc f9a8 	bl	8002708 <HAL_I2S_Init>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80063be:	f000 f967 	bl	8006690 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80063c2:	bf00      	nop
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	200001b0 	.word	0x200001b0
 80063cc:	40003c00 	.word	0x40003c00
 80063d0:	00017700 	.word	0x00017700

080063d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80063d8:	4b17      	ldr	r3, [pc, #92]	; (8006438 <MX_SPI1_Init+0x64>)
 80063da:	4a18      	ldr	r2, [pc, #96]	; (800643c <MX_SPI1_Init+0x68>)
 80063dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80063de:	4b16      	ldr	r3, [pc, #88]	; (8006438 <MX_SPI1_Init+0x64>)
 80063e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80063e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80063e6:	4b14      	ldr	r3, [pc, #80]	; (8006438 <MX_SPI1_Init+0x64>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80063ec:	4b12      	ldr	r3, [pc, #72]	; (8006438 <MX_SPI1_Init+0x64>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80063f2:	4b11      	ldr	r3, [pc, #68]	; (8006438 <MX_SPI1_Init+0x64>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80063f8:	4b0f      	ldr	r3, [pc, #60]	; (8006438 <MX_SPI1_Init+0x64>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80063fe:	4b0e      	ldr	r3, [pc, #56]	; (8006438 <MX_SPI1_Init+0x64>)
 8006400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006404:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006406:	4b0c      	ldr	r3, [pc, #48]	; (8006438 <MX_SPI1_Init+0x64>)
 8006408:	2200      	movs	r2, #0
 800640a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800640c:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <MX_SPI1_Init+0x64>)
 800640e:	2200      	movs	r2, #0
 8006410:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006412:	4b09      	ldr	r3, [pc, #36]	; (8006438 <MX_SPI1_Init+0x64>)
 8006414:	2200      	movs	r2, #0
 8006416:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006418:	4b07      	ldr	r3, [pc, #28]	; (8006438 <MX_SPI1_Init+0x64>)
 800641a:	2200      	movs	r2, #0
 800641c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800641e:	4b06      	ldr	r3, [pc, #24]	; (8006438 <MX_SPI1_Init+0x64>)
 8006420:	220a      	movs	r2, #10
 8006422:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006424:	4804      	ldr	r0, [pc, #16]	; (8006438 <MX_SPI1_Init+0x64>)
 8006426:	f7fd fb7d 	bl	8003b24 <HAL_SPI_Init>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006430:	f000 f92e 	bl	8006690 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006434:	bf00      	nop
 8006436:	bd80      	pop	{r7, pc}
 8006438:	20000118 	.word	0x20000118
 800643c:	40013000 	.word	0x40013000

08006440 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006444:	4b11      	ldr	r3, [pc, #68]	; (800648c <MX_USART2_UART_Init+0x4c>)
 8006446:	4a12      	ldr	r2, [pc, #72]	; (8006490 <MX_USART2_UART_Init+0x50>)
 8006448:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800644a:	4b10      	ldr	r3, [pc, #64]	; (800648c <MX_USART2_UART_Init+0x4c>)
 800644c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006450:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006452:	4b0e      	ldr	r3, [pc, #56]	; (800648c <MX_USART2_UART_Init+0x4c>)
 8006454:	2200      	movs	r2, #0
 8006456:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006458:	4b0c      	ldr	r3, [pc, #48]	; (800648c <MX_USART2_UART_Init+0x4c>)
 800645a:	2200      	movs	r2, #0
 800645c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800645e:	4b0b      	ldr	r3, [pc, #44]	; (800648c <MX_USART2_UART_Init+0x4c>)
 8006460:	2200      	movs	r2, #0
 8006462:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006464:	4b09      	ldr	r3, [pc, #36]	; (800648c <MX_USART2_UART_Init+0x4c>)
 8006466:	220c      	movs	r2, #12
 8006468:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800646a:	4b08      	ldr	r3, [pc, #32]	; (800648c <MX_USART2_UART_Init+0x4c>)
 800646c:	2200      	movs	r2, #0
 800646e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006470:	4b06      	ldr	r3, [pc, #24]	; (800648c <MX_USART2_UART_Init+0x4c>)
 8006472:	2200      	movs	r2, #0
 8006474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006476:	4805      	ldr	r0, [pc, #20]	; (800648c <MX_USART2_UART_Init+0x4c>)
 8006478:	f7fd fbb8 	bl	8003bec <HAL_UART_Init>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006482:	f000 f905 	bl	8006690 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006486:	bf00      	nop
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	20000170 	.word	0x20000170
 8006490:	40004400 	.word	0x40004400

08006494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b08c      	sub	sp, #48	; 0x30
 8006498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800649a:	f107 031c 	add.w	r3, r7, #28
 800649e:	2200      	movs	r2, #0
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	605a      	str	r2, [r3, #4]
 80064a4:	609a      	str	r2, [r3, #8]
 80064a6:	60da      	str	r2, [r3, #12]
 80064a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80064aa:	2300      	movs	r3, #0
 80064ac:	61bb      	str	r3, [r7, #24]
 80064ae:	4b71      	ldr	r3, [pc, #452]	; (8006674 <MX_GPIO_Init+0x1e0>)
 80064b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b2:	4a70      	ldr	r2, [pc, #448]	; (8006674 <MX_GPIO_Init+0x1e0>)
 80064b4:	f043 0310 	orr.w	r3, r3, #16
 80064b8:	6313      	str	r3, [r2, #48]	; 0x30
 80064ba:	4b6e      	ldr	r3, [pc, #440]	; (8006674 <MX_GPIO_Init+0x1e0>)
 80064bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064be:	f003 0310 	and.w	r3, r3, #16
 80064c2:	61bb      	str	r3, [r7, #24]
 80064c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80064c6:	2300      	movs	r3, #0
 80064c8:	617b      	str	r3, [r7, #20]
 80064ca:	4b6a      	ldr	r3, [pc, #424]	; (8006674 <MX_GPIO_Init+0x1e0>)
 80064cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ce:	4a69      	ldr	r2, [pc, #420]	; (8006674 <MX_GPIO_Init+0x1e0>)
 80064d0:	f043 0304 	orr.w	r3, r3, #4
 80064d4:	6313      	str	r3, [r2, #48]	; 0x30
 80064d6:	4b67      	ldr	r3, [pc, #412]	; (8006674 <MX_GPIO_Init+0x1e0>)
 80064d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064da:	f003 0304 	and.w	r3, r3, #4
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80064e2:	2300      	movs	r3, #0
 80064e4:	613b      	str	r3, [r7, #16]
 80064e6:	4b63      	ldr	r3, [pc, #396]	; (8006674 <MX_GPIO_Init+0x1e0>)
 80064e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ea:	4a62      	ldr	r2, [pc, #392]	; (8006674 <MX_GPIO_Init+0x1e0>)
 80064ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f0:	6313      	str	r3, [r2, #48]	; 0x30
 80064f2:	4b60      	ldr	r3, [pc, #384]	; (8006674 <MX_GPIO_Init+0x1e0>)
 80064f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fa:	613b      	str	r3, [r7, #16]
 80064fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80064fe:	2300      	movs	r3, #0
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	4b5c      	ldr	r3, [pc, #368]	; (8006674 <MX_GPIO_Init+0x1e0>)
 8006504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006506:	4a5b      	ldr	r2, [pc, #364]	; (8006674 <MX_GPIO_Init+0x1e0>)
 8006508:	f043 0301 	orr.w	r3, r3, #1
 800650c:	6313      	str	r3, [r2, #48]	; 0x30
 800650e:	4b59      	ldr	r3, [pc, #356]	; (8006674 <MX_GPIO_Init+0x1e0>)
 8006510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	60fb      	str	r3, [r7, #12]
 8006518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800651a:	2300      	movs	r3, #0
 800651c:	60bb      	str	r3, [r7, #8]
 800651e:	4b55      	ldr	r3, [pc, #340]	; (8006674 <MX_GPIO_Init+0x1e0>)
 8006520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006522:	4a54      	ldr	r2, [pc, #336]	; (8006674 <MX_GPIO_Init+0x1e0>)
 8006524:	f043 0302 	orr.w	r3, r3, #2
 8006528:	6313      	str	r3, [r2, #48]	; 0x30
 800652a:	4b52      	ldr	r3, [pc, #328]	; (8006674 <MX_GPIO_Init+0x1e0>)
 800652c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	60bb      	str	r3, [r7, #8]
 8006534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006536:	2300      	movs	r3, #0
 8006538:	607b      	str	r3, [r7, #4]
 800653a:	4b4e      	ldr	r3, [pc, #312]	; (8006674 <MX_GPIO_Init+0x1e0>)
 800653c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653e:	4a4d      	ldr	r2, [pc, #308]	; (8006674 <MX_GPIO_Init+0x1e0>)
 8006540:	f043 0308 	orr.w	r3, r3, #8
 8006544:	6313      	str	r3, [r2, #48]	; 0x30
 8006546:	4b4b      	ldr	r3, [pc, #300]	; (8006674 <MX_GPIO_Init+0x1e0>)
 8006548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654a:	f003 0308 	and.w	r3, r3, #8
 800654e:	607b      	str	r3, [r7, #4]
 8006550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8006552:	2200      	movs	r2, #0
 8006554:	2108      	movs	r1, #8
 8006556:	4848      	ldr	r0, [pc, #288]	; (8006678 <MX_GPIO_Init+0x1e4>)
 8006558:	f7fa fb4a 	bl	8000bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800655c:	2201      	movs	r2, #1
 800655e:	2101      	movs	r1, #1
 8006560:	4846      	ldr	r0, [pc, #280]	; (800667c <MX_GPIO_Init+0x1e8>)
 8006562:	f7fa fb45 	bl	8000bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8006566:	2200      	movs	r2, #0
 8006568:	f24f 0110 	movw	r1, #61456	; 0xf010
 800656c:	4844      	ldr	r0, [pc, #272]	; (8006680 <MX_GPIO_Init+0x1ec>)
 800656e:	f7fa fb3f 	bl	8000bf0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8006572:	2308      	movs	r3, #8
 8006574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006576:	2301      	movs	r3, #1
 8006578:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800657a:	2300      	movs	r3, #0
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800657e:	2300      	movs	r3, #0
 8006580:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8006582:	f107 031c 	add.w	r3, r7, #28
 8006586:	4619      	mov	r1, r3
 8006588:	483b      	ldr	r0, [pc, #236]	; (8006678 <MX_GPIO_Init+0x1e4>)
 800658a:	f7fa f997 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800658e:	2301      	movs	r3, #1
 8006590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006592:	2301      	movs	r3, #1
 8006594:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006596:	2300      	movs	r3, #0
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800659a:	2300      	movs	r3, #0
 800659c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800659e:	f107 031c 	add.w	r3, r7, #28
 80065a2:	4619      	mov	r1, r3
 80065a4:	4835      	ldr	r0, [pc, #212]	; (800667c <MX_GPIO_Init+0x1e8>)
 80065a6:	f7fa f989 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80065aa:	2308      	movs	r3, #8
 80065ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065ae:	2302      	movs	r3, #2
 80065b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065b2:	2300      	movs	r3, #0
 80065b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065b6:	2300      	movs	r3, #0
 80065b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80065ba:	2305      	movs	r3, #5
 80065bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80065be:	f107 031c 	add.w	r3, r7, #28
 80065c2:	4619      	mov	r1, r3
 80065c4:	482d      	ldr	r0, [pc, #180]	; (800667c <MX_GPIO_Init+0x1e8>)
 80065c6:	f7fa f979 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80065ca:	2301      	movs	r3, #1
 80065cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80065ce:	4b2d      	ldr	r3, [pc, #180]	; (8006684 <MX_GPIO_Init+0x1f0>)
 80065d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d2:	2300      	movs	r3, #0
 80065d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80065d6:	f107 031c 	add.w	r3, r7, #28
 80065da:	4619      	mov	r1, r3
 80065dc:	482a      	ldr	r0, [pc, #168]	; (8006688 <MX_GPIO_Init+0x1f4>)
 80065de:	f7fa f96d 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80065e2:	2304      	movs	r3, #4
 80065e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80065e6:	2300      	movs	r3, #0
 80065e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80065ee:	f107 031c 	add.w	r3, r7, #28
 80065f2:	4619      	mov	r1, r3
 80065f4:	4825      	ldr	r0, [pc, #148]	; (800668c <MX_GPIO_Init+0x1f8>)
 80065f6:	f7fa f961 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80065fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006600:	2302      	movs	r3, #2
 8006602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006604:	2300      	movs	r3, #0
 8006606:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006608:	2300      	movs	r3, #0
 800660a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800660c:	2305      	movs	r3, #5
 800660e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8006610:	f107 031c 	add.w	r3, r7, #28
 8006614:	4619      	mov	r1, r3
 8006616:	481d      	ldr	r0, [pc, #116]	; (800668c <MX_GPIO_Init+0x1f8>)
 8006618:	f7fa f950 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800661c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8006620:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006622:	2301      	movs	r3, #1
 8006624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006626:	2300      	movs	r3, #0
 8006628:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800662a:	2300      	movs	r3, #0
 800662c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800662e:	f107 031c 	add.w	r3, r7, #28
 8006632:	4619      	mov	r1, r3
 8006634:	4812      	ldr	r0, [pc, #72]	; (8006680 <MX_GPIO_Init+0x1ec>)
 8006636:	f7fa f941 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800663a:	2320      	movs	r3, #32
 800663c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800663e:	2300      	movs	r3, #0
 8006640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006642:	2300      	movs	r3, #0
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8006646:	f107 031c 	add.w	r3, r7, #28
 800664a:	4619      	mov	r1, r3
 800664c:	480c      	ldr	r0, [pc, #48]	; (8006680 <MX_GPIO_Init+0x1ec>)
 800664e:	f7fa f935 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8006652:	2302      	movs	r3, #2
 8006654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8006656:	4b0b      	ldr	r3, [pc, #44]	; (8006684 <MX_GPIO_Init+0x1f0>)
 8006658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800665a:	2300      	movs	r3, #0
 800665c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800665e:	f107 031c 	add.w	r3, r7, #28
 8006662:	4619      	mov	r1, r3
 8006664:	4804      	ldr	r0, [pc, #16]	; (8006678 <MX_GPIO_Init+0x1e4>)
 8006666:	f7fa f929 	bl	80008bc <HAL_GPIO_Init>

}
 800666a:	bf00      	nop
 800666c:	3730      	adds	r7, #48	; 0x30
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	40023800 	.word	0x40023800
 8006678:	40021000 	.word	0x40021000
 800667c:	40020800 	.word	0x40020800
 8006680:	40020c00 	.word	0x40020c00
 8006684:	10120000 	.word	0x10120000
 8006688:	40020000 	.word	0x40020000
 800668c:	40020400 	.word	0x40020400

08006690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006690:	b480      	push	{r7}
 8006692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006694:	bf00      	nop
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
	...

080066a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066a6:	2300      	movs	r3, #0
 80066a8:	607b      	str	r3, [r7, #4]
 80066aa:	4b10      	ldr	r3, [pc, #64]	; (80066ec <HAL_MspInit+0x4c>)
 80066ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ae:	4a0f      	ldr	r2, [pc, #60]	; (80066ec <HAL_MspInit+0x4c>)
 80066b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066b4:	6453      	str	r3, [r2, #68]	; 0x44
 80066b6:	4b0d      	ldr	r3, [pc, #52]	; (80066ec <HAL_MspInit+0x4c>)
 80066b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066be:	607b      	str	r3, [r7, #4]
 80066c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80066c2:	2300      	movs	r3, #0
 80066c4:	603b      	str	r3, [r7, #0]
 80066c6:	4b09      	ldr	r3, [pc, #36]	; (80066ec <HAL_MspInit+0x4c>)
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	4a08      	ldr	r2, [pc, #32]	; (80066ec <HAL_MspInit+0x4c>)
 80066cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066d0:	6413      	str	r3, [r2, #64]	; 0x40
 80066d2:	4b06      	ldr	r3, [pc, #24]	; (80066ec <HAL_MspInit+0x4c>)
 80066d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066da:	603b      	str	r3, [r7, #0]
 80066dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80066de:	2007      	movs	r0, #7
 80066e0:	f7fa f8aa 	bl	8000838 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80066e4:	bf00      	nop
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	40023800 	.word	0x40023800

080066f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b08a      	sub	sp, #40	; 0x28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066f8:	f107 0314 	add.w	r3, r7, #20
 80066fc:	2200      	movs	r2, #0
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	605a      	str	r2, [r3, #4]
 8006702:	609a      	str	r2, [r3, #8]
 8006704:	60da      	str	r2, [r3, #12]
 8006706:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a19      	ldr	r2, [pc, #100]	; (8006774 <HAL_I2C_MspInit+0x84>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d12c      	bne.n	800676c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006712:	2300      	movs	r3, #0
 8006714:	613b      	str	r3, [r7, #16]
 8006716:	4b18      	ldr	r3, [pc, #96]	; (8006778 <HAL_I2C_MspInit+0x88>)
 8006718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671a:	4a17      	ldr	r2, [pc, #92]	; (8006778 <HAL_I2C_MspInit+0x88>)
 800671c:	f043 0302 	orr.w	r3, r3, #2
 8006720:	6313      	str	r3, [r2, #48]	; 0x30
 8006722:	4b15      	ldr	r3, [pc, #84]	; (8006778 <HAL_I2C_MspInit+0x88>)
 8006724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	613b      	str	r3, [r7, #16]
 800672c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800672e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8006732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006734:	2312      	movs	r3, #18
 8006736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006738:	2301      	movs	r3, #1
 800673a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800673c:	2300      	movs	r3, #0
 800673e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006740:	2304      	movs	r3, #4
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006744:	f107 0314 	add.w	r3, r7, #20
 8006748:	4619      	mov	r1, r3
 800674a:	480c      	ldr	r0, [pc, #48]	; (800677c <HAL_I2C_MspInit+0x8c>)
 800674c:	f7fa f8b6 	bl	80008bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006750:	2300      	movs	r3, #0
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	4b08      	ldr	r3, [pc, #32]	; (8006778 <HAL_I2C_MspInit+0x88>)
 8006756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006758:	4a07      	ldr	r2, [pc, #28]	; (8006778 <HAL_I2C_MspInit+0x88>)
 800675a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800675e:	6413      	str	r3, [r2, #64]	; 0x40
 8006760:	4b05      	ldr	r3, [pc, #20]	; (8006778 <HAL_I2C_MspInit+0x88>)
 8006762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800676c:	bf00      	nop
 800676e:	3728      	adds	r7, #40	; 0x28
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	40005400 	.word	0x40005400
 8006778:	40023800 	.word	0x40023800
 800677c:	40020400 	.word	0x40020400

08006780 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b08a      	sub	sp, #40	; 0x28
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006788:	f107 0314 	add.w	r3, r7, #20
 800678c:	2200      	movs	r2, #0
 800678e:	601a      	str	r2, [r3, #0]
 8006790:	605a      	str	r2, [r3, #4]
 8006792:	609a      	str	r2, [r3, #8]
 8006794:	60da      	str	r2, [r3, #12]
 8006796:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a28      	ldr	r2, [pc, #160]	; (8006840 <HAL_I2S_MspInit+0xc0>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d14a      	bne.n	8006838 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80067a2:	2300      	movs	r3, #0
 80067a4:	613b      	str	r3, [r7, #16]
 80067a6:	4b27      	ldr	r3, [pc, #156]	; (8006844 <HAL_I2S_MspInit+0xc4>)
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	4a26      	ldr	r2, [pc, #152]	; (8006844 <HAL_I2S_MspInit+0xc4>)
 80067ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067b0:	6413      	str	r3, [r2, #64]	; 0x40
 80067b2:	4b24      	ldr	r3, [pc, #144]	; (8006844 <HAL_I2S_MspInit+0xc4>)
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067ba:	613b      	str	r3, [r7, #16]
 80067bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067be:	2300      	movs	r3, #0
 80067c0:	60fb      	str	r3, [r7, #12]
 80067c2:	4b20      	ldr	r3, [pc, #128]	; (8006844 <HAL_I2S_MspInit+0xc4>)
 80067c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c6:	4a1f      	ldr	r2, [pc, #124]	; (8006844 <HAL_I2S_MspInit+0xc4>)
 80067c8:	f043 0301 	orr.w	r3, r3, #1
 80067cc:	6313      	str	r3, [r2, #48]	; 0x30
 80067ce:	4b1d      	ldr	r3, [pc, #116]	; (8006844 <HAL_I2S_MspInit+0xc4>)
 80067d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80067da:	2300      	movs	r3, #0
 80067dc:	60bb      	str	r3, [r7, #8]
 80067de:	4b19      	ldr	r3, [pc, #100]	; (8006844 <HAL_I2S_MspInit+0xc4>)
 80067e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e2:	4a18      	ldr	r2, [pc, #96]	; (8006844 <HAL_I2S_MspInit+0xc4>)
 80067e4:	f043 0304 	orr.w	r3, r3, #4
 80067e8:	6313      	str	r3, [r2, #48]	; 0x30
 80067ea:	4b16      	ldr	r3, [pc, #88]	; (8006844 <HAL_I2S_MspInit+0xc4>)
 80067ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ee:	f003 0304 	and.w	r3, r3, #4
 80067f2:	60bb      	str	r3, [r7, #8]
 80067f4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80067f6:	2310      	movs	r3, #16
 80067f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067fa:	2302      	movs	r3, #2
 80067fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067fe:	2300      	movs	r3, #0
 8006800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006802:	2300      	movs	r3, #0
 8006804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006806:	2306      	movs	r3, #6
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800680a:	f107 0314 	add.w	r3, r7, #20
 800680e:	4619      	mov	r1, r3
 8006810:	480d      	ldr	r0, [pc, #52]	; (8006848 <HAL_I2S_MspInit+0xc8>)
 8006812:	f7fa f853 	bl	80008bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8006816:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800681a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800681c:	2302      	movs	r3, #2
 800681e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006820:	2300      	movs	r3, #0
 8006822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006824:	2300      	movs	r3, #0
 8006826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006828:	2306      	movs	r3, #6
 800682a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800682c:	f107 0314 	add.w	r3, r7, #20
 8006830:	4619      	mov	r1, r3
 8006832:	4806      	ldr	r0, [pc, #24]	; (800684c <HAL_I2S_MspInit+0xcc>)
 8006834:	f7fa f842 	bl	80008bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8006838:	bf00      	nop
 800683a:	3728      	adds	r7, #40	; 0x28
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	40003c00 	.word	0x40003c00
 8006844:	40023800 	.word	0x40023800
 8006848:	40020000 	.word	0x40020000
 800684c:	40020800 	.word	0x40020800

08006850 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b08a      	sub	sp, #40	; 0x28
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006858:	f107 0314 	add.w	r3, r7, #20
 800685c:	2200      	movs	r2, #0
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	605a      	str	r2, [r3, #4]
 8006862:	609a      	str	r2, [r3, #8]
 8006864:	60da      	str	r2, [r3, #12]
 8006866:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a19      	ldr	r2, [pc, #100]	; (80068d4 <HAL_SPI_MspInit+0x84>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d12b      	bne.n	80068ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006872:	2300      	movs	r3, #0
 8006874:	613b      	str	r3, [r7, #16]
 8006876:	4b18      	ldr	r3, [pc, #96]	; (80068d8 <HAL_SPI_MspInit+0x88>)
 8006878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687a:	4a17      	ldr	r2, [pc, #92]	; (80068d8 <HAL_SPI_MspInit+0x88>)
 800687c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006880:	6453      	str	r3, [r2, #68]	; 0x44
 8006882:	4b15      	ldr	r3, [pc, #84]	; (80068d8 <HAL_SPI_MspInit+0x88>)
 8006884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006886:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800688a:	613b      	str	r3, [r7, #16]
 800688c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	4b11      	ldr	r3, [pc, #68]	; (80068d8 <HAL_SPI_MspInit+0x88>)
 8006894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006896:	4a10      	ldr	r2, [pc, #64]	; (80068d8 <HAL_SPI_MspInit+0x88>)
 8006898:	f043 0301 	orr.w	r3, r3, #1
 800689c:	6313      	str	r3, [r2, #48]	; 0x30
 800689e:	4b0e      	ldr	r3, [pc, #56]	; (80068d8 <HAL_SPI_MspInit+0x88>)
 80068a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80068aa:	23e0      	movs	r3, #224	; 0xe0
 80068ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068ae:	2302      	movs	r3, #2
 80068b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068b2:	2300      	movs	r3, #0
 80068b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068b6:	2300      	movs	r3, #0
 80068b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80068ba:	2305      	movs	r3, #5
 80068bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068be:	f107 0314 	add.w	r3, r7, #20
 80068c2:	4619      	mov	r1, r3
 80068c4:	4805      	ldr	r0, [pc, #20]	; (80068dc <HAL_SPI_MspInit+0x8c>)
 80068c6:	f7f9 fff9 	bl	80008bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80068ca:	bf00      	nop
 80068cc:	3728      	adds	r7, #40	; 0x28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	40013000 	.word	0x40013000
 80068d8:	40023800 	.word	0x40023800
 80068dc:	40020000 	.word	0x40020000

080068e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08a      	sub	sp, #40	; 0x28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068e8:	f107 0314 	add.w	r3, r7, #20
 80068ec:	2200      	movs	r2, #0
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	605a      	str	r2, [r3, #4]
 80068f2:	609a      	str	r2, [r3, #8]
 80068f4:	60da      	str	r2, [r3, #12]
 80068f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a19      	ldr	r2, [pc, #100]	; (8006964 <HAL_UART_MspInit+0x84>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d12b      	bne.n	800695a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006902:	2300      	movs	r3, #0
 8006904:	613b      	str	r3, [r7, #16]
 8006906:	4b18      	ldr	r3, [pc, #96]	; (8006968 <HAL_UART_MspInit+0x88>)
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	4a17      	ldr	r2, [pc, #92]	; (8006968 <HAL_UART_MspInit+0x88>)
 800690c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006910:	6413      	str	r3, [r2, #64]	; 0x40
 8006912:	4b15      	ldr	r3, [pc, #84]	; (8006968 <HAL_UART_MspInit+0x88>)
 8006914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691a:	613b      	str	r3, [r7, #16]
 800691c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800691e:	2300      	movs	r3, #0
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	4b11      	ldr	r3, [pc, #68]	; (8006968 <HAL_UART_MspInit+0x88>)
 8006924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006926:	4a10      	ldr	r2, [pc, #64]	; (8006968 <HAL_UART_MspInit+0x88>)
 8006928:	f043 0301 	orr.w	r3, r3, #1
 800692c:	6313      	str	r3, [r2, #48]	; 0x30
 800692e:	4b0e      	ldr	r3, [pc, #56]	; (8006968 <HAL_UART_MspInit+0x88>)
 8006930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800693a:	230c      	movs	r3, #12
 800693c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800693e:	2302      	movs	r3, #2
 8006940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006942:	2301      	movs	r3, #1
 8006944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006946:	2303      	movs	r3, #3
 8006948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800694a:	2307      	movs	r3, #7
 800694c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800694e:	f107 0314 	add.w	r3, r7, #20
 8006952:	4619      	mov	r1, r3
 8006954:	4805      	ldr	r0, [pc, #20]	; (800696c <HAL_UART_MspInit+0x8c>)
 8006956:	f7f9 ffb1 	bl	80008bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800695a:	bf00      	nop
 800695c:	3728      	adds	r7, #40	; 0x28
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	40004400 	.word	0x40004400
 8006968:	40023800 	.word	0x40023800
 800696c:	40020000 	.word	0x40020000

08006970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006970:	b480      	push	{r7}
 8006972:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006974:	bf00      	nop
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800697e:	b480      	push	{r7}
 8006980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006982:	e7fe      	b.n	8006982 <HardFault_Handler+0x4>

08006984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006984:	b480      	push	{r7}
 8006986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006988:	e7fe      	b.n	8006988 <MemManage_Handler+0x4>

0800698a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800698a:	b480      	push	{r7}
 800698c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800698e:	e7fe      	b.n	800698e <BusFault_Handler+0x4>

08006990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006990:	b480      	push	{r7}
 8006992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006994:	e7fe      	b.n	8006994 <UsageFault_Handler+0x4>

08006996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006996:	b480      	push	{r7}
 8006998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800699a:	bf00      	nop
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80069a4:	b480      	push	{r7}
 80069a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80069a8:	bf00      	nop
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80069b2:	b480      	push	{r7}
 80069b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80069b6:	bf00      	nop
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80069c4:	f7f9 fe26 	bl	8000614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80069c8:	bf00      	nop
 80069ca:	bd80      	pop	{r7, pc}

080069cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80069d0:	4802      	ldr	r0, [pc, #8]	; (80069dc <OTG_FS_IRQHandler+0x10>)
 80069d2:	f7fa fbab 	bl	800112c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80069d6:	bf00      	nop
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	200005c4 	.word	0x200005c4

080069e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069ec:	2300      	movs	r3, #0
 80069ee:	617b      	str	r3, [r7, #20]
 80069f0:	e00a      	b.n	8006a08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80069f2:	f3af 8000 	nop.w
 80069f6:	4601      	mov	r1, r0
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	60ba      	str	r2, [r7, #8]
 80069fe:	b2ca      	uxtb	r2, r1
 8006a00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	3301      	adds	r3, #1
 8006a06:	617b      	str	r3, [r7, #20]
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	dbf0      	blt.n	80069f2 <_read+0x12>
	}

return len;
 8006a10:	687b      	ldr	r3, [r7, #4]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b086      	sub	sp, #24
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	60f8      	str	r0, [r7, #12]
 8006a22:	60b9      	str	r1, [r7, #8]
 8006a24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a26:	2300      	movs	r3, #0
 8006a28:	617b      	str	r3, [r7, #20]
 8006a2a:	e009      	b.n	8006a40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	60ba      	str	r2, [r7, #8]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	617b      	str	r3, [r7, #20]
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	dbf1      	blt.n	8006a2c <_write+0x12>
	}
	return len;
 8006a48:	687b      	ldr	r3, [r7, #4]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3718      	adds	r7, #24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <_close>:

int _close(int file)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b083      	sub	sp, #12
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
	return -1;
 8006a5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006a7a:	605a      	str	r2, [r3, #4]
	return 0;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <_isatty>:

int _isatty(int file)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b083      	sub	sp, #12
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
	return 1;
 8006a92:	2301      	movs	r3, #1
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
	return 0;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
	...

08006abc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006ac4:	4b11      	ldr	r3, [pc, #68]	; (8006b0c <_sbrk+0x50>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d102      	bne.n	8006ad2 <_sbrk+0x16>
		heap_end = &end;
 8006acc:	4b0f      	ldr	r3, [pc, #60]	; (8006b0c <_sbrk+0x50>)
 8006ace:	4a10      	ldr	r2, [pc, #64]	; (8006b10 <_sbrk+0x54>)
 8006ad0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006ad2:	4b0e      	ldr	r3, [pc, #56]	; (8006b0c <_sbrk+0x50>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006ad8:	4b0c      	ldr	r3, [pc, #48]	; (8006b0c <_sbrk+0x50>)
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4413      	add	r3, r2
 8006ae0:	466a      	mov	r2, sp
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d907      	bls.n	8006af6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006ae6:	f000 fb29 	bl	800713c <__errno>
 8006aea:	4602      	mov	r2, r0
 8006aec:	230c      	movs	r3, #12
 8006aee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006af0:	f04f 33ff 	mov.w	r3, #4294967295
 8006af4:	e006      	b.n	8006b04 <_sbrk+0x48>
	}

	heap_end += incr;
 8006af6:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <_sbrk+0x50>)
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4413      	add	r3, r2
 8006afe:	4a03      	ldr	r2, [pc, #12]	; (8006b0c <_sbrk+0x50>)
 8006b00:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006b02:	68fb      	ldr	r3, [r7, #12]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	200000b0 	.word	0x200000b0
 8006b10:	20000890 	.word	0x20000890

08006b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006b14:	b480      	push	{r7}
 8006b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006b18:	4b16      	ldr	r3, [pc, #88]	; (8006b74 <SystemInit+0x60>)
 8006b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b1e:	4a15      	ldr	r2, [pc, #84]	; (8006b74 <SystemInit+0x60>)
 8006b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006b28:	4b13      	ldr	r3, [pc, #76]	; (8006b78 <SystemInit+0x64>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a12      	ldr	r2, [pc, #72]	; (8006b78 <SystemInit+0x64>)
 8006b2e:	f043 0301 	orr.w	r3, r3, #1
 8006b32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006b34:	4b10      	ldr	r3, [pc, #64]	; (8006b78 <SystemInit+0x64>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006b3a:	4b0f      	ldr	r3, [pc, #60]	; (8006b78 <SystemInit+0x64>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a0e      	ldr	r2, [pc, #56]	; (8006b78 <SystemInit+0x64>)
 8006b40:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b48:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006b4a:	4b0b      	ldr	r3, [pc, #44]	; (8006b78 <SystemInit+0x64>)
 8006b4c:	4a0b      	ldr	r2, [pc, #44]	; (8006b7c <SystemInit+0x68>)
 8006b4e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006b50:	4b09      	ldr	r3, [pc, #36]	; (8006b78 <SystemInit+0x64>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a08      	ldr	r2, [pc, #32]	; (8006b78 <SystemInit+0x64>)
 8006b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006b5c:	4b06      	ldr	r3, [pc, #24]	; (8006b78 <SystemInit+0x64>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006b62:	4b04      	ldr	r3, [pc, #16]	; (8006b74 <SystemInit+0x60>)
 8006b64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006b68:	609a      	str	r2, [r3, #8]
#endif
}
 8006b6a:	bf00      	nop
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	e000ed00 	.word	0xe000ed00
 8006b78:	40023800 	.word	0x40023800
 8006b7c:	24003010 	.word	0x24003010

08006b80 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006b84:	2201      	movs	r2, #1
 8006b86:	490e      	ldr	r1, [pc, #56]	; (8006bc0 <MX_USB_HOST_Init+0x40>)
 8006b88:	480e      	ldr	r0, [pc, #56]	; (8006bc4 <MX_USB_HOST_Init+0x44>)
 8006b8a:	f7fe fe0d 	bl	80057a8 <USBH_Init>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006b94:	f7ff fd7c 	bl	8006690 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006b98:	490b      	ldr	r1, [pc, #44]	; (8006bc8 <MX_USB_HOST_Init+0x48>)
 8006b9a:	480a      	ldr	r0, [pc, #40]	; (8006bc4 <MX_USB_HOST_Init+0x44>)
 8006b9c:	f7fe fe77 	bl	800588e <USBH_RegisterClass>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006ba6:	f7ff fd73 	bl	8006690 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006baa:	4806      	ldr	r0, [pc, #24]	; (8006bc4 <MX_USB_HOST_Init+0x44>)
 8006bac:	f7fe fefc 	bl	80059a8 <USBH_Start>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006bb6:	f7ff fd6b 	bl	8006690 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006bba:	bf00      	nop
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	08006bcd 	.word	0x08006bcd
 8006bc4:	200001f8 	.word	0x200001f8
 8006bc8:	20000008 	.word	0x20000008

08006bcc <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006bd8:	78fb      	ldrb	r3, [r7, #3]
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	2b04      	cmp	r3, #4
 8006bde:	d819      	bhi.n	8006c14 <USBH_UserProcess+0x48>
 8006be0:	a201      	add	r2, pc, #4	; (adr r2, 8006be8 <USBH_UserProcess+0x1c>)
 8006be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be6:	bf00      	nop
 8006be8:	08006c15 	.word	0x08006c15
 8006bec:	08006c05 	.word	0x08006c05
 8006bf0:	08006c15 	.word	0x08006c15
 8006bf4:	08006c0d 	.word	0x08006c0d
 8006bf8:	08006bfd 	.word	0x08006bfd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006bfc:	4b09      	ldr	r3, [pc, #36]	; (8006c24 <USBH_UserProcess+0x58>)
 8006bfe:	2203      	movs	r2, #3
 8006c00:	701a      	strb	r2, [r3, #0]
  break;
 8006c02:	e008      	b.n	8006c16 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006c04:	4b07      	ldr	r3, [pc, #28]	; (8006c24 <USBH_UserProcess+0x58>)
 8006c06:	2202      	movs	r2, #2
 8006c08:	701a      	strb	r2, [r3, #0]
  break;
 8006c0a:	e004      	b.n	8006c16 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006c0c:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <USBH_UserProcess+0x58>)
 8006c0e:	2201      	movs	r2, #1
 8006c10:	701a      	strb	r2, [r3, #0]
  break;
 8006c12:	e000      	b.n	8006c16 <USBH_UserProcess+0x4a>

  default:
  break;
 8006c14:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	200000b4 	.word	0x200000b4

08006c28 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b08a      	sub	sp, #40	; 0x28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c30:	f107 0314 	add.w	r3, r7, #20
 8006c34:	2200      	movs	r2, #0
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	605a      	str	r2, [r3, #4]
 8006c3a:	609a      	str	r2, [r3, #8]
 8006c3c:	60da      	str	r2, [r3, #12]
 8006c3e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c48:	d147      	bne.n	8006cda <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	613b      	str	r3, [r7, #16]
 8006c4e:	4b25      	ldr	r3, [pc, #148]	; (8006ce4 <HAL_HCD_MspInit+0xbc>)
 8006c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c52:	4a24      	ldr	r2, [pc, #144]	; (8006ce4 <HAL_HCD_MspInit+0xbc>)
 8006c54:	f043 0301 	orr.w	r3, r3, #1
 8006c58:	6313      	str	r3, [r2, #48]	; 0x30
 8006c5a:	4b22      	ldr	r3, [pc, #136]	; (8006ce4 <HAL_HCD_MspInit+0xbc>)
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	613b      	str	r3, [r7, #16]
 8006c64:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006c66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c70:	2300      	movs	r3, #0
 8006c72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006c74:	f107 0314 	add.w	r3, r7, #20
 8006c78:	4619      	mov	r1, r3
 8006c7a:	481b      	ldr	r0, [pc, #108]	; (8006ce8 <HAL_HCD_MspInit+0xc0>)
 8006c7c:	f7f9 fe1e 	bl	80008bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006c80:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c86:	2302      	movs	r3, #2
 8006c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006c92:	230a      	movs	r3, #10
 8006c94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c96:	f107 0314 	add.w	r3, r7, #20
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4812      	ldr	r0, [pc, #72]	; (8006ce8 <HAL_HCD_MspInit+0xc0>)
 8006c9e:	f7f9 fe0d 	bl	80008bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006ca2:	4b10      	ldr	r3, [pc, #64]	; (8006ce4 <HAL_HCD_MspInit+0xbc>)
 8006ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ca6:	4a0f      	ldr	r2, [pc, #60]	; (8006ce4 <HAL_HCD_MspInit+0xbc>)
 8006ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cac:	6353      	str	r3, [r2, #52]	; 0x34
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60fb      	str	r3, [r7, #12]
 8006cb2:	4b0c      	ldr	r3, [pc, #48]	; (8006ce4 <HAL_HCD_MspInit+0xbc>)
 8006cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb6:	4a0b      	ldr	r2, [pc, #44]	; (8006ce4 <HAL_HCD_MspInit+0xbc>)
 8006cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8006cbe:	4b09      	ldr	r3, [pc, #36]	; (8006ce4 <HAL_HCD_MspInit+0xbc>)
 8006cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2100      	movs	r1, #0
 8006cce:	2043      	movs	r0, #67	; 0x43
 8006cd0:	f7f9 fdbd 	bl	800084e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006cd4:	2043      	movs	r0, #67	; 0x43
 8006cd6:	f7f9 fdd6 	bl	8000886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006cda:	bf00      	nop
 8006cdc:	3728      	adds	r7, #40	; 0x28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	40023800 	.word	0x40023800
 8006ce8:	40020000 	.word	0x40020000

08006cec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fe fe73 	bl	80059e6 <USBH_LL_IncTimer>
}
 8006d00:	bf00      	nop
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fe feab 	bl	8005a72 <USBH_LL_Connect>
}
 8006d1c:	bf00      	nop
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fe fec3 	bl	8005abe <USBH_LL_Disconnect>
}
 8006d38:	bf00      	nop
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	70fb      	strb	r3, [r7, #3]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7fe fe65 	bl	8005a3a <USBH_LL_PortEnabled>
} 
 8006d70:	bf00      	nop
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fe fe65 	bl	8005a56 <USBH_LL_PortDisabled>
} 
 8006d8c:	bf00      	nop
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d12a      	bne.n	8006dfc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006da6:	4a18      	ldr	r2, [pc, #96]	; (8006e08 <USBH_LL_Init+0x74>)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a15      	ldr	r2, [pc, #84]	; (8006e08 <USBH_LL_Init+0x74>)
 8006db2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006db6:	4b14      	ldr	r3, [pc, #80]	; (8006e08 <USBH_LL_Init+0x74>)
 8006db8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006dbc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006dbe:	4b12      	ldr	r3, [pc, #72]	; (8006e08 <USBH_LL_Init+0x74>)
 8006dc0:	2208      	movs	r2, #8
 8006dc2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006dc4:	4b10      	ldr	r3, [pc, #64]	; (8006e08 <USBH_LL_Init+0x74>)
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006dca:	4b0f      	ldr	r3, [pc, #60]	; (8006e08 <USBH_LL_Init+0x74>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006dd0:	4b0d      	ldr	r3, [pc, #52]	; (8006e08 <USBH_LL_Init+0x74>)
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006dd6:	4b0c      	ldr	r3, [pc, #48]	; (8006e08 <USBH_LL_Init+0x74>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006ddc:	480a      	ldr	r0, [pc, #40]	; (8006e08 <USBH_LL_Init+0x74>)
 8006dde:	f7f9 ff20 	bl	8000c22 <HAL_HCD_Init>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006de8:	f7ff fc52 	bl	8006690 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006dec:	4806      	ldr	r0, [pc, #24]	; (8006e08 <USBH_LL_Init+0x74>)
 8006dee:	f7fa fb0d 	bl	800140c <HAL_HCD_GetCurrentFrame>
 8006df2:	4603      	mov	r3, r0
 8006df4:	4619      	mov	r1, r3
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7fe fde6 	bl	80059c8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	200005c4 	.word	0x200005c4

08006e0c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7fa fa88 	bl	8001338 <HAL_HCD_Start>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 f912 	bl	8007058 <USBH_Get_USB_Status>
 8006e34:	4603      	mov	r3, r0
 8006e36:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006e38:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b084      	sub	sp, #16
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7fa fa90 	bl	800137e <HAL_HCD_Stop>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006e62:	7bfb      	ldrb	r3, [r7, #15]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 f8f7 	bl	8007058 <USBH_Get_USB_Status>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006e6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	460b      	mov	r3, r1
 8006e82:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e8a:	78fa      	ldrb	r2, [r7, #3]
 8006e8c:	4611      	mov	r1, r2
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fa faa7 	bl	80013e2 <HAL_HCD_HC_GetXferCount>
 8006e94:	4603      	mov	r3, r0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006e9e:	b590      	push	{r4, r7, lr}
 8006ea0:	b089      	sub	sp, #36	; 0x24
 8006ea2:	af04      	add	r7, sp, #16
 8006ea4:	6078      	str	r0, [r7, #4]
 8006ea6:	4608      	mov	r0, r1
 8006ea8:	4611      	mov	r1, r2
 8006eaa:	461a      	mov	r2, r3
 8006eac:	4603      	mov	r3, r0
 8006eae:	70fb      	strb	r3, [r7, #3]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	70bb      	strb	r3, [r7, #2]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8006ec6:	787c      	ldrb	r4, [r7, #1]
 8006ec8:	78ba      	ldrb	r2, [r7, #2]
 8006eca:	78f9      	ldrb	r1, [r7, #3]
 8006ecc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006ece:	9302      	str	r3, [sp, #8]
 8006ed0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ed4:	9301      	str	r3, [sp, #4]
 8006ed6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006eda:	9300      	str	r3, [sp, #0]
 8006edc:	4623      	mov	r3, r4
 8006ede:	f7f9 ff02 	bl	8000ce6 <HAL_HCD_HC_Init>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 f8b5 	bl	8007058 <USBH_Get_USB_Status>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006ef2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd90      	pop	{r4, r7, pc}

08006efc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f16:	78fa      	ldrb	r2, [r7, #3]
 8006f18:	4611      	mov	r1, r2
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7f9 ff7b 	bl	8000e16 <HAL_HCD_HC_Halt>
 8006f20:	4603      	mov	r3, r0
 8006f22:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 f896 	bl	8007058 <USBH_Get_USB_Status>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006f3a:	b590      	push	{r4, r7, lr}
 8006f3c:	b089      	sub	sp, #36	; 0x24
 8006f3e:	af04      	add	r7, sp, #16
 8006f40:	6078      	str	r0, [r7, #4]
 8006f42:	4608      	mov	r0, r1
 8006f44:	4611      	mov	r1, r2
 8006f46:	461a      	mov	r2, r3
 8006f48:	4603      	mov	r3, r0
 8006f4a:	70fb      	strb	r3, [r7, #3]
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	70bb      	strb	r3, [r7, #2]
 8006f50:	4613      	mov	r3, r2
 8006f52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f54:	2300      	movs	r3, #0
 8006f56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8006f62:	787c      	ldrb	r4, [r7, #1]
 8006f64:	78ba      	ldrb	r2, [r7, #2]
 8006f66:	78f9      	ldrb	r1, [r7, #3]
 8006f68:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f6c:	9303      	str	r3, [sp, #12]
 8006f6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006f70:	9302      	str	r3, [sp, #8]
 8006f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f74:	9301      	str	r3, [sp, #4]
 8006f76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006f7a:	9300      	str	r3, [sp, #0]
 8006f7c:	4623      	mov	r3, r4
 8006f7e:	f7f9 ff6d 	bl	8000e5c <HAL_HCD_HC_SubmitRequest>
 8006f82:	4603      	mov	r3, r0
 8006f84:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f000 f865 	bl	8007058 <USBH_Get_USB_Status>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006f92:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd90      	pop	{r4, r7, pc}

08006f9c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006fae:	78fa      	ldrb	r2, [r7, #3]
 8006fb0:	4611      	mov	r1, r2
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fa fa00 	bl	80013b8 <HAL_HCD_HC_GetURBState>
 8006fb8:	4603      	mov	r3, r0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b082      	sub	sp, #8
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	460b      	mov	r3, r1
 8006fcc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d103      	bne.n	8006fe0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8006fd8:	78fb      	ldrb	r3, [r7, #3]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 f868 	bl	80070b0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006fe0:	20c8      	movs	r0, #200	; 0xc8
 8006fe2:	f7f9 fb37 	bl	8000654 <HAL_Delay>
  return USBH_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3708      	adds	r7, #8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	70fb      	strb	r3, [r7, #3]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007006:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007008:	78fa      	ldrb	r2, [r7, #3]
 800700a:	68f9      	ldr	r1, [r7, #12]
 800700c:	4613      	mov	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	00db      	lsls	r3, r3, #3
 8007014:	440b      	add	r3, r1
 8007016:	333b      	adds	r3, #59	; 0x3b
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00a      	beq.n	8007034 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800701e:	78fa      	ldrb	r2, [r7, #3]
 8007020:	68f9      	ldr	r1, [r7, #12]
 8007022:	4613      	mov	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	00db      	lsls	r3, r3, #3
 800702a:	440b      	add	r3, r1
 800702c:	3350      	adds	r3, #80	; 0x50
 800702e:	78ba      	ldrb	r2, [r7, #2]
 8007030:	701a      	strb	r2, [r3, #0]
 8007032:	e009      	b.n	8007048 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007034:	78fa      	ldrb	r2, [r7, #3]
 8007036:	68f9      	ldr	r1, [r7, #12]
 8007038:	4613      	mov	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	00db      	lsls	r3, r3, #3
 8007040:	440b      	add	r3, r1
 8007042:	3351      	adds	r3, #81	; 0x51
 8007044:	78ba      	ldrb	r2, [r7, #2]
 8007046:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
	...

08007058 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	4603      	mov	r3, r0
 8007060:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007066:	79fb      	ldrb	r3, [r7, #7]
 8007068:	2b03      	cmp	r3, #3
 800706a:	d817      	bhi.n	800709c <USBH_Get_USB_Status+0x44>
 800706c:	a201      	add	r2, pc, #4	; (adr r2, 8007074 <USBH_Get_USB_Status+0x1c>)
 800706e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007072:	bf00      	nop
 8007074:	08007085 	.word	0x08007085
 8007078:	0800708b 	.word	0x0800708b
 800707c:	08007091 	.word	0x08007091
 8007080:	08007097 	.word	0x08007097
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007084:	2300      	movs	r3, #0
 8007086:	73fb      	strb	r3, [r7, #15]
    break;
 8007088:	e00b      	b.n	80070a2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800708a:	2302      	movs	r3, #2
 800708c:	73fb      	strb	r3, [r7, #15]
    break;
 800708e:	e008      	b.n	80070a2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007090:	2301      	movs	r3, #1
 8007092:	73fb      	strb	r3, [r7, #15]
    break;
 8007094:	e005      	b.n	80070a2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007096:	2302      	movs	r3, #2
 8007098:	73fb      	strb	r3, [r7, #15]
    break;
 800709a:	e002      	b.n	80070a2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800709c:	2302      	movs	r3, #2
 800709e:	73fb      	strb	r3, [r7, #15]
    break;
 80070a0:	bf00      	nop
  }
  return usb_status;
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	4603      	mov	r3, r0
 80070b8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80070ba:	79fb      	ldrb	r3, [r7, #7]
 80070bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80070be:	79fb      	ldrb	r3, [r7, #7]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d102      	bne.n	80070ca <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80070c4:	2301      	movs	r3, #1
 80070c6:	73fb      	strb	r3, [r7, #15]
 80070c8:	e001      	b.n	80070ce <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80070ca:	2300      	movs	r3, #0
 80070cc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
 80070d0:	461a      	mov	r2, r3
 80070d2:	2101      	movs	r1, #1
 80070d4:	4803      	ldr	r0, [pc, #12]	; (80070e4 <MX_DriverVbusFS+0x34>)
 80070d6:	f7f9 fd8b 	bl	8000bf0 <HAL_GPIO_WritePin>
}
 80070da:	bf00      	nop
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	40020800 	.word	0x40020800

080070e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80070e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007120 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80070ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80070ee:	e003      	b.n	80070f8 <LoopCopyDataInit>

080070f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80070f0:	4b0c      	ldr	r3, [pc, #48]	; (8007124 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80070f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80070f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80070f6:	3104      	adds	r1, #4

080070f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80070f8:	480b      	ldr	r0, [pc, #44]	; (8007128 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80070fa:	4b0c      	ldr	r3, [pc, #48]	; (800712c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80070fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80070fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007100:	d3f6      	bcc.n	80070f0 <CopyDataInit>
  ldr  r2, =_sbss
 8007102:	4a0b      	ldr	r2, [pc, #44]	; (8007130 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007104:	e002      	b.n	800710c <LoopFillZerobss>

08007106 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007106:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007108:	f842 3b04 	str.w	r3, [r2], #4

0800710c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800710c:	4b09      	ldr	r3, [pc, #36]	; (8007134 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800710e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007110:	d3f9      	bcc.n	8007106 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007112:	f7ff fcff 	bl	8006b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007116:	f000 f817 	bl	8007148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800711a:	f7ff f801 	bl	8006120 <main>
  bx  lr    
 800711e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007120:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007124:	0800808c 	.word	0x0800808c
  ldr  r0, =_sdata
 8007128:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800712c:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8007130:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8007134:	2000088c 	.word	0x2000088c

08007138 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007138:	e7fe      	b.n	8007138 <ADC_IRQHandler>
	...

0800713c <__errno>:
 800713c:	4b01      	ldr	r3, [pc, #4]	; (8007144 <__errno+0x8>)
 800713e:	6818      	ldr	r0, [r3, #0]
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	2000002c 	.word	0x2000002c

08007148 <__libc_init_array>:
 8007148:	b570      	push	{r4, r5, r6, lr}
 800714a:	4e0d      	ldr	r6, [pc, #52]	; (8007180 <__libc_init_array+0x38>)
 800714c:	4c0d      	ldr	r4, [pc, #52]	; (8007184 <__libc_init_array+0x3c>)
 800714e:	1ba4      	subs	r4, r4, r6
 8007150:	10a4      	asrs	r4, r4, #2
 8007152:	2500      	movs	r5, #0
 8007154:	42a5      	cmp	r5, r4
 8007156:	d109      	bne.n	800716c <__libc_init_array+0x24>
 8007158:	4e0b      	ldr	r6, [pc, #44]	; (8007188 <__libc_init_array+0x40>)
 800715a:	4c0c      	ldr	r4, [pc, #48]	; (800718c <__libc_init_array+0x44>)
 800715c:	f000 ff14 	bl	8007f88 <_init>
 8007160:	1ba4      	subs	r4, r4, r6
 8007162:	10a4      	asrs	r4, r4, #2
 8007164:	2500      	movs	r5, #0
 8007166:	42a5      	cmp	r5, r4
 8007168:	d105      	bne.n	8007176 <__libc_init_array+0x2e>
 800716a:	bd70      	pop	{r4, r5, r6, pc}
 800716c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007170:	4798      	blx	r3
 8007172:	3501      	adds	r5, #1
 8007174:	e7ee      	b.n	8007154 <__libc_init_array+0xc>
 8007176:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800717a:	4798      	blx	r3
 800717c:	3501      	adds	r5, #1
 800717e:	e7f2      	b.n	8007166 <__libc_init_array+0x1e>
 8007180:	08008084 	.word	0x08008084
 8007184:	08008084 	.word	0x08008084
 8007188:	08008084 	.word	0x08008084
 800718c:	08008088 	.word	0x08008088

08007190 <malloc>:
 8007190:	4b02      	ldr	r3, [pc, #8]	; (800719c <malloc+0xc>)
 8007192:	4601      	mov	r1, r0
 8007194:	6818      	ldr	r0, [r3, #0]
 8007196:	f000 b861 	b.w	800725c <_malloc_r>
 800719a:	bf00      	nop
 800719c:	2000002c 	.word	0x2000002c

080071a0 <free>:
 80071a0:	4b02      	ldr	r3, [pc, #8]	; (80071ac <free+0xc>)
 80071a2:	4601      	mov	r1, r0
 80071a4:	6818      	ldr	r0, [r3, #0]
 80071a6:	f000 b80b 	b.w	80071c0 <_free_r>
 80071aa:	bf00      	nop
 80071ac:	2000002c 	.word	0x2000002c

080071b0 <memset>:
 80071b0:	4402      	add	r2, r0
 80071b2:	4603      	mov	r3, r0
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d100      	bne.n	80071ba <memset+0xa>
 80071b8:	4770      	bx	lr
 80071ba:	f803 1b01 	strb.w	r1, [r3], #1
 80071be:	e7f9      	b.n	80071b4 <memset+0x4>

080071c0 <_free_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	4605      	mov	r5, r0
 80071c4:	2900      	cmp	r1, #0
 80071c6:	d045      	beq.n	8007254 <_free_r+0x94>
 80071c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071cc:	1f0c      	subs	r4, r1, #4
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	bfb8      	it	lt
 80071d2:	18e4      	addlt	r4, r4, r3
 80071d4:	f000 f98e 	bl	80074f4 <__malloc_lock>
 80071d8:	4a1f      	ldr	r2, [pc, #124]	; (8007258 <_free_r+0x98>)
 80071da:	6813      	ldr	r3, [r2, #0]
 80071dc:	4610      	mov	r0, r2
 80071de:	b933      	cbnz	r3, 80071ee <_free_r+0x2e>
 80071e0:	6063      	str	r3, [r4, #4]
 80071e2:	6014      	str	r4, [r2, #0]
 80071e4:	4628      	mov	r0, r5
 80071e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071ea:	f000 b984 	b.w	80074f6 <__malloc_unlock>
 80071ee:	42a3      	cmp	r3, r4
 80071f0:	d90c      	bls.n	800720c <_free_r+0x4c>
 80071f2:	6821      	ldr	r1, [r4, #0]
 80071f4:	1862      	adds	r2, r4, r1
 80071f6:	4293      	cmp	r3, r2
 80071f8:	bf04      	itt	eq
 80071fa:	681a      	ldreq	r2, [r3, #0]
 80071fc:	685b      	ldreq	r3, [r3, #4]
 80071fe:	6063      	str	r3, [r4, #4]
 8007200:	bf04      	itt	eq
 8007202:	1852      	addeq	r2, r2, r1
 8007204:	6022      	streq	r2, [r4, #0]
 8007206:	6004      	str	r4, [r0, #0]
 8007208:	e7ec      	b.n	80071e4 <_free_r+0x24>
 800720a:	4613      	mov	r3, r2
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	b10a      	cbz	r2, 8007214 <_free_r+0x54>
 8007210:	42a2      	cmp	r2, r4
 8007212:	d9fa      	bls.n	800720a <_free_r+0x4a>
 8007214:	6819      	ldr	r1, [r3, #0]
 8007216:	1858      	adds	r0, r3, r1
 8007218:	42a0      	cmp	r0, r4
 800721a:	d10b      	bne.n	8007234 <_free_r+0x74>
 800721c:	6820      	ldr	r0, [r4, #0]
 800721e:	4401      	add	r1, r0
 8007220:	1858      	adds	r0, r3, r1
 8007222:	4282      	cmp	r2, r0
 8007224:	6019      	str	r1, [r3, #0]
 8007226:	d1dd      	bne.n	80071e4 <_free_r+0x24>
 8007228:	6810      	ldr	r0, [r2, #0]
 800722a:	6852      	ldr	r2, [r2, #4]
 800722c:	605a      	str	r2, [r3, #4]
 800722e:	4401      	add	r1, r0
 8007230:	6019      	str	r1, [r3, #0]
 8007232:	e7d7      	b.n	80071e4 <_free_r+0x24>
 8007234:	d902      	bls.n	800723c <_free_r+0x7c>
 8007236:	230c      	movs	r3, #12
 8007238:	602b      	str	r3, [r5, #0]
 800723a:	e7d3      	b.n	80071e4 <_free_r+0x24>
 800723c:	6820      	ldr	r0, [r4, #0]
 800723e:	1821      	adds	r1, r4, r0
 8007240:	428a      	cmp	r2, r1
 8007242:	bf04      	itt	eq
 8007244:	6811      	ldreq	r1, [r2, #0]
 8007246:	6852      	ldreq	r2, [r2, #4]
 8007248:	6062      	str	r2, [r4, #4]
 800724a:	bf04      	itt	eq
 800724c:	1809      	addeq	r1, r1, r0
 800724e:	6021      	streq	r1, [r4, #0]
 8007250:	605c      	str	r4, [r3, #4]
 8007252:	e7c7      	b.n	80071e4 <_free_r+0x24>
 8007254:	bd38      	pop	{r3, r4, r5, pc}
 8007256:	bf00      	nop
 8007258:	200000b8 	.word	0x200000b8

0800725c <_malloc_r>:
 800725c:	b570      	push	{r4, r5, r6, lr}
 800725e:	1ccd      	adds	r5, r1, #3
 8007260:	f025 0503 	bic.w	r5, r5, #3
 8007264:	3508      	adds	r5, #8
 8007266:	2d0c      	cmp	r5, #12
 8007268:	bf38      	it	cc
 800726a:	250c      	movcc	r5, #12
 800726c:	2d00      	cmp	r5, #0
 800726e:	4606      	mov	r6, r0
 8007270:	db01      	blt.n	8007276 <_malloc_r+0x1a>
 8007272:	42a9      	cmp	r1, r5
 8007274:	d903      	bls.n	800727e <_malloc_r+0x22>
 8007276:	230c      	movs	r3, #12
 8007278:	6033      	str	r3, [r6, #0]
 800727a:	2000      	movs	r0, #0
 800727c:	bd70      	pop	{r4, r5, r6, pc}
 800727e:	f000 f939 	bl	80074f4 <__malloc_lock>
 8007282:	4a21      	ldr	r2, [pc, #132]	; (8007308 <_malloc_r+0xac>)
 8007284:	6814      	ldr	r4, [r2, #0]
 8007286:	4621      	mov	r1, r4
 8007288:	b991      	cbnz	r1, 80072b0 <_malloc_r+0x54>
 800728a:	4c20      	ldr	r4, [pc, #128]	; (800730c <_malloc_r+0xb0>)
 800728c:	6823      	ldr	r3, [r4, #0]
 800728e:	b91b      	cbnz	r3, 8007298 <_malloc_r+0x3c>
 8007290:	4630      	mov	r0, r6
 8007292:	f000 f855 	bl	8007340 <_sbrk_r>
 8007296:	6020      	str	r0, [r4, #0]
 8007298:	4629      	mov	r1, r5
 800729a:	4630      	mov	r0, r6
 800729c:	f000 f850 	bl	8007340 <_sbrk_r>
 80072a0:	1c43      	adds	r3, r0, #1
 80072a2:	d124      	bne.n	80072ee <_malloc_r+0x92>
 80072a4:	230c      	movs	r3, #12
 80072a6:	6033      	str	r3, [r6, #0]
 80072a8:	4630      	mov	r0, r6
 80072aa:	f000 f924 	bl	80074f6 <__malloc_unlock>
 80072ae:	e7e4      	b.n	800727a <_malloc_r+0x1e>
 80072b0:	680b      	ldr	r3, [r1, #0]
 80072b2:	1b5b      	subs	r3, r3, r5
 80072b4:	d418      	bmi.n	80072e8 <_malloc_r+0x8c>
 80072b6:	2b0b      	cmp	r3, #11
 80072b8:	d90f      	bls.n	80072da <_malloc_r+0x7e>
 80072ba:	600b      	str	r3, [r1, #0]
 80072bc:	50cd      	str	r5, [r1, r3]
 80072be:	18cc      	adds	r4, r1, r3
 80072c0:	4630      	mov	r0, r6
 80072c2:	f000 f918 	bl	80074f6 <__malloc_unlock>
 80072c6:	f104 000b 	add.w	r0, r4, #11
 80072ca:	1d23      	adds	r3, r4, #4
 80072cc:	f020 0007 	bic.w	r0, r0, #7
 80072d0:	1ac3      	subs	r3, r0, r3
 80072d2:	d0d3      	beq.n	800727c <_malloc_r+0x20>
 80072d4:	425a      	negs	r2, r3
 80072d6:	50e2      	str	r2, [r4, r3]
 80072d8:	e7d0      	b.n	800727c <_malloc_r+0x20>
 80072da:	428c      	cmp	r4, r1
 80072dc:	684b      	ldr	r3, [r1, #4]
 80072de:	bf16      	itet	ne
 80072e0:	6063      	strne	r3, [r4, #4]
 80072e2:	6013      	streq	r3, [r2, #0]
 80072e4:	460c      	movne	r4, r1
 80072e6:	e7eb      	b.n	80072c0 <_malloc_r+0x64>
 80072e8:	460c      	mov	r4, r1
 80072ea:	6849      	ldr	r1, [r1, #4]
 80072ec:	e7cc      	b.n	8007288 <_malloc_r+0x2c>
 80072ee:	1cc4      	adds	r4, r0, #3
 80072f0:	f024 0403 	bic.w	r4, r4, #3
 80072f4:	42a0      	cmp	r0, r4
 80072f6:	d005      	beq.n	8007304 <_malloc_r+0xa8>
 80072f8:	1a21      	subs	r1, r4, r0
 80072fa:	4630      	mov	r0, r6
 80072fc:	f000 f820 	bl	8007340 <_sbrk_r>
 8007300:	3001      	adds	r0, #1
 8007302:	d0cf      	beq.n	80072a4 <_malloc_r+0x48>
 8007304:	6025      	str	r5, [r4, #0]
 8007306:	e7db      	b.n	80072c0 <_malloc_r+0x64>
 8007308:	200000b8 	.word	0x200000b8
 800730c:	200000bc 	.word	0x200000bc

08007310 <iprintf>:
 8007310:	b40f      	push	{r0, r1, r2, r3}
 8007312:	4b0a      	ldr	r3, [pc, #40]	; (800733c <iprintf+0x2c>)
 8007314:	b513      	push	{r0, r1, r4, lr}
 8007316:	681c      	ldr	r4, [r3, #0]
 8007318:	b124      	cbz	r4, 8007324 <iprintf+0x14>
 800731a:	69a3      	ldr	r3, [r4, #24]
 800731c:	b913      	cbnz	r3, 8007324 <iprintf+0x14>
 800731e:	4620      	mov	r0, r4
 8007320:	f000 f85e 	bl	80073e0 <__sinit>
 8007324:	ab05      	add	r3, sp, #20
 8007326:	9a04      	ldr	r2, [sp, #16]
 8007328:	68a1      	ldr	r1, [r4, #8]
 800732a:	9301      	str	r3, [sp, #4]
 800732c:	4620      	mov	r0, r4
 800732e:	f000 f90d 	bl	800754c <_vfiprintf_r>
 8007332:	b002      	add	sp, #8
 8007334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007338:	b004      	add	sp, #16
 800733a:	4770      	bx	lr
 800733c:	2000002c 	.word	0x2000002c

08007340 <_sbrk_r>:
 8007340:	b538      	push	{r3, r4, r5, lr}
 8007342:	4c06      	ldr	r4, [pc, #24]	; (800735c <_sbrk_r+0x1c>)
 8007344:	2300      	movs	r3, #0
 8007346:	4605      	mov	r5, r0
 8007348:	4608      	mov	r0, r1
 800734a:	6023      	str	r3, [r4, #0]
 800734c:	f7ff fbb6 	bl	8006abc <_sbrk>
 8007350:	1c43      	adds	r3, r0, #1
 8007352:	d102      	bne.n	800735a <_sbrk_r+0x1a>
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	b103      	cbz	r3, 800735a <_sbrk_r+0x1a>
 8007358:	602b      	str	r3, [r5, #0]
 800735a:	bd38      	pop	{r3, r4, r5, pc}
 800735c:	20000888 	.word	0x20000888

08007360 <std>:
 8007360:	2300      	movs	r3, #0
 8007362:	b510      	push	{r4, lr}
 8007364:	4604      	mov	r4, r0
 8007366:	e9c0 3300 	strd	r3, r3, [r0]
 800736a:	6083      	str	r3, [r0, #8]
 800736c:	8181      	strh	r1, [r0, #12]
 800736e:	6643      	str	r3, [r0, #100]	; 0x64
 8007370:	81c2      	strh	r2, [r0, #14]
 8007372:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007376:	6183      	str	r3, [r0, #24]
 8007378:	4619      	mov	r1, r3
 800737a:	2208      	movs	r2, #8
 800737c:	305c      	adds	r0, #92	; 0x5c
 800737e:	f7ff ff17 	bl	80071b0 <memset>
 8007382:	4b05      	ldr	r3, [pc, #20]	; (8007398 <std+0x38>)
 8007384:	6263      	str	r3, [r4, #36]	; 0x24
 8007386:	4b05      	ldr	r3, [pc, #20]	; (800739c <std+0x3c>)
 8007388:	62a3      	str	r3, [r4, #40]	; 0x28
 800738a:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <std+0x40>)
 800738c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800738e:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <std+0x44>)
 8007390:	6224      	str	r4, [r4, #32]
 8007392:	6323      	str	r3, [r4, #48]	; 0x30
 8007394:	bd10      	pop	{r4, pc}
 8007396:	bf00      	nop
 8007398:	08007a89 	.word	0x08007a89
 800739c:	08007aab 	.word	0x08007aab
 80073a0:	08007ae3 	.word	0x08007ae3
 80073a4:	08007b07 	.word	0x08007b07

080073a8 <_cleanup_r>:
 80073a8:	4901      	ldr	r1, [pc, #4]	; (80073b0 <_cleanup_r+0x8>)
 80073aa:	f000 b885 	b.w	80074b8 <_fwalk_reent>
 80073ae:	bf00      	nop
 80073b0:	08007de1 	.word	0x08007de1

080073b4 <__sfmoreglue>:
 80073b4:	b570      	push	{r4, r5, r6, lr}
 80073b6:	1e4a      	subs	r2, r1, #1
 80073b8:	2568      	movs	r5, #104	; 0x68
 80073ba:	4355      	muls	r5, r2
 80073bc:	460e      	mov	r6, r1
 80073be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073c2:	f7ff ff4b 	bl	800725c <_malloc_r>
 80073c6:	4604      	mov	r4, r0
 80073c8:	b140      	cbz	r0, 80073dc <__sfmoreglue+0x28>
 80073ca:	2100      	movs	r1, #0
 80073cc:	e9c0 1600 	strd	r1, r6, [r0]
 80073d0:	300c      	adds	r0, #12
 80073d2:	60a0      	str	r0, [r4, #8]
 80073d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073d8:	f7ff feea 	bl	80071b0 <memset>
 80073dc:	4620      	mov	r0, r4
 80073de:	bd70      	pop	{r4, r5, r6, pc}

080073e0 <__sinit>:
 80073e0:	6983      	ldr	r3, [r0, #24]
 80073e2:	b510      	push	{r4, lr}
 80073e4:	4604      	mov	r4, r0
 80073e6:	bb33      	cbnz	r3, 8007436 <__sinit+0x56>
 80073e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80073ec:	6503      	str	r3, [r0, #80]	; 0x50
 80073ee:	4b12      	ldr	r3, [pc, #72]	; (8007438 <__sinit+0x58>)
 80073f0:	4a12      	ldr	r2, [pc, #72]	; (800743c <__sinit+0x5c>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6282      	str	r2, [r0, #40]	; 0x28
 80073f6:	4298      	cmp	r0, r3
 80073f8:	bf04      	itt	eq
 80073fa:	2301      	moveq	r3, #1
 80073fc:	6183      	streq	r3, [r0, #24]
 80073fe:	f000 f81f 	bl	8007440 <__sfp>
 8007402:	6060      	str	r0, [r4, #4]
 8007404:	4620      	mov	r0, r4
 8007406:	f000 f81b 	bl	8007440 <__sfp>
 800740a:	60a0      	str	r0, [r4, #8]
 800740c:	4620      	mov	r0, r4
 800740e:	f000 f817 	bl	8007440 <__sfp>
 8007412:	2200      	movs	r2, #0
 8007414:	60e0      	str	r0, [r4, #12]
 8007416:	2104      	movs	r1, #4
 8007418:	6860      	ldr	r0, [r4, #4]
 800741a:	f7ff ffa1 	bl	8007360 <std>
 800741e:	2201      	movs	r2, #1
 8007420:	2109      	movs	r1, #9
 8007422:	68a0      	ldr	r0, [r4, #8]
 8007424:	f7ff ff9c 	bl	8007360 <std>
 8007428:	2202      	movs	r2, #2
 800742a:	2112      	movs	r1, #18
 800742c:	68e0      	ldr	r0, [r4, #12]
 800742e:	f7ff ff97 	bl	8007360 <std>
 8007432:	2301      	movs	r3, #1
 8007434:	61a3      	str	r3, [r4, #24]
 8007436:	bd10      	pop	{r4, pc}
 8007438:	08007fe4 	.word	0x08007fe4
 800743c:	080073a9 	.word	0x080073a9

08007440 <__sfp>:
 8007440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007442:	4b1b      	ldr	r3, [pc, #108]	; (80074b0 <__sfp+0x70>)
 8007444:	681e      	ldr	r6, [r3, #0]
 8007446:	69b3      	ldr	r3, [r6, #24]
 8007448:	4607      	mov	r7, r0
 800744a:	b913      	cbnz	r3, 8007452 <__sfp+0x12>
 800744c:	4630      	mov	r0, r6
 800744e:	f7ff ffc7 	bl	80073e0 <__sinit>
 8007452:	3648      	adds	r6, #72	; 0x48
 8007454:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007458:	3b01      	subs	r3, #1
 800745a:	d503      	bpl.n	8007464 <__sfp+0x24>
 800745c:	6833      	ldr	r3, [r6, #0]
 800745e:	b133      	cbz	r3, 800746e <__sfp+0x2e>
 8007460:	6836      	ldr	r6, [r6, #0]
 8007462:	e7f7      	b.n	8007454 <__sfp+0x14>
 8007464:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007468:	b16d      	cbz	r5, 8007486 <__sfp+0x46>
 800746a:	3468      	adds	r4, #104	; 0x68
 800746c:	e7f4      	b.n	8007458 <__sfp+0x18>
 800746e:	2104      	movs	r1, #4
 8007470:	4638      	mov	r0, r7
 8007472:	f7ff ff9f 	bl	80073b4 <__sfmoreglue>
 8007476:	6030      	str	r0, [r6, #0]
 8007478:	2800      	cmp	r0, #0
 800747a:	d1f1      	bne.n	8007460 <__sfp+0x20>
 800747c:	230c      	movs	r3, #12
 800747e:	603b      	str	r3, [r7, #0]
 8007480:	4604      	mov	r4, r0
 8007482:	4620      	mov	r0, r4
 8007484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007486:	4b0b      	ldr	r3, [pc, #44]	; (80074b4 <__sfp+0x74>)
 8007488:	6665      	str	r5, [r4, #100]	; 0x64
 800748a:	e9c4 5500 	strd	r5, r5, [r4]
 800748e:	60a5      	str	r5, [r4, #8]
 8007490:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007494:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007498:	2208      	movs	r2, #8
 800749a:	4629      	mov	r1, r5
 800749c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074a0:	f7ff fe86 	bl	80071b0 <memset>
 80074a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074ac:	e7e9      	b.n	8007482 <__sfp+0x42>
 80074ae:	bf00      	nop
 80074b0:	08007fe4 	.word	0x08007fe4
 80074b4:	ffff0001 	.word	0xffff0001

080074b8 <_fwalk_reent>:
 80074b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074bc:	4680      	mov	r8, r0
 80074be:	4689      	mov	r9, r1
 80074c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80074c4:	2600      	movs	r6, #0
 80074c6:	b914      	cbnz	r4, 80074ce <_fwalk_reent+0x16>
 80074c8:	4630      	mov	r0, r6
 80074ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80074d2:	3f01      	subs	r7, #1
 80074d4:	d501      	bpl.n	80074da <_fwalk_reent+0x22>
 80074d6:	6824      	ldr	r4, [r4, #0]
 80074d8:	e7f5      	b.n	80074c6 <_fwalk_reent+0xe>
 80074da:	89ab      	ldrh	r3, [r5, #12]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d907      	bls.n	80074f0 <_fwalk_reent+0x38>
 80074e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074e4:	3301      	adds	r3, #1
 80074e6:	d003      	beq.n	80074f0 <_fwalk_reent+0x38>
 80074e8:	4629      	mov	r1, r5
 80074ea:	4640      	mov	r0, r8
 80074ec:	47c8      	blx	r9
 80074ee:	4306      	orrs	r6, r0
 80074f0:	3568      	adds	r5, #104	; 0x68
 80074f2:	e7ee      	b.n	80074d2 <_fwalk_reent+0x1a>

080074f4 <__malloc_lock>:
 80074f4:	4770      	bx	lr

080074f6 <__malloc_unlock>:
 80074f6:	4770      	bx	lr

080074f8 <__sfputc_r>:
 80074f8:	6893      	ldr	r3, [r2, #8]
 80074fa:	3b01      	subs	r3, #1
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	b410      	push	{r4}
 8007500:	6093      	str	r3, [r2, #8]
 8007502:	da08      	bge.n	8007516 <__sfputc_r+0x1e>
 8007504:	6994      	ldr	r4, [r2, #24]
 8007506:	42a3      	cmp	r3, r4
 8007508:	db01      	blt.n	800750e <__sfputc_r+0x16>
 800750a:	290a      	cmp	r1, #10
 800750c:	d103      	bne.n	8007516 <__sfputc_r+0x1e>
 800750e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007512:	f000 bafd 	b.w	8007b10 <__swbuf_r>
 8007516:	6813      	ldr	r3, [r2, #0]
 8007518:	1c58      	adds	r0, r3, #1
 800751a:	6010      	str	r0, [r2, #0]
 800751c:	7019      	strb	r1, [r3, #0]
 800751e:	4608      	mov	r0, r1
 8007520:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007524:	4770      	bx	lr

08007526 <__sfputs_r>:
 8007526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007528:	4606      	mov	r6, r0
 800752a:	460f      	mov	r7, r1
 800752c:	4614      	mov	r4, r2
 800752e:	18d5      	adds	r5, r2, r3
 8007530:	42ac      	cmp	r4, r5
 8007532:	d101      	bne.n	8007538 <__sfputs_r+0x12>
 8007534:	2000      	movs	r0, #0
 8007536:	e007      	b.n	8007548 <__sfputs_r+0x22>
 8007538:	463a      	mov	r2, r7
 800753a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800753e:	4630      	mov	r0, r6
 8007540:	f7ff ffda 	bl	80074f8 <__sfputc_r>
 8007544:	1c43      	adds	r3, r0, #1
 8007546:	d1f3      	bne.n	8007530 <__sfputs_r+0xa>
 8007548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800754c <_vfiprintf_r>:
 800754c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007550:	460c      	mov	r4, r1
 8007552:	b09d      	sub	sp, #116	; 0x74
 8007554:	4617      	mov	r7, r2
 8007556:	461d      	mov	r5, r3
 8007558:	4606      	mov	r6, r0
 800755a:	b118      	cbz	r0, 8007564 <_vfiprintf_r+0x18>
 800755c:	6983      	ldr	r3, [r0, #24]
 800755e:	b90b      	cbnz	r3, 8007564 <_vfiprintf_r+0x18>
 8007560:	f7ff ff3e 	bl	80073e0 <__sinit>
 8007564:	4b7c      	ldr	r3, [pc, #496]	; (8007758 <_vfiprintf_r+0x20c>)
 8007566:	429c      	cmp	r4, r3
 8007568:	d158      	bne.n	800761c <_vfiprintf_r+0xd0>
 800756a:	6874      	ldr	r4, [r6, #4]
 800756c:	89a3      	ldrh	r3, [r4, #12]
 800756e:	0718      	lsls	r0, r3, #28
 8007570:	d55e      	bpl.n	8007630 <_vfiprintf_r+0xe4>
 8007572:	6923      	ldr	r3, [r4, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d05b      	beq.n	8007630 <_vfiprintf_r+0xe4>
 8007578:	2300      	movs	r3, #0
 800757a:	9309      	str	r3, [sp, #36]	; 0x24
 800757c:	2320      	movs	r3, #32
 800757e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007582:	2330      	movs	r3, #48	; 0x30
 8007584:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007588:	9503      	str	r5, [sp, #12]
 800758a:	f04f 0b01 	mov.w	fp, #1
 800758e:	46b8      	mov	r8, r7
 8007590:	4645      	mov	r5, r8
 8007592:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007596:	b10b      	cbz	r3, 800759c <_vfiprintf_r+0x50>
 8007598:	2b25      	cmp	r3, #37	; 0x25
 800759a:	d154      	bne.n	8007646 <_vfiprintf_r+0xfa>
 800759c:	ebb8 0a07 	subs.w	sl, r8, r7
 80075a0:	d00b      	beq.n	80075ba <_vfiprintf_r+0x6e>
 80075a2:	4653      	mov	r3, sl
 80075a4:	463a      	mov	r2, r7
 80075a6:	4621      	mov	r1, r4
 80075a8:	4630      	mov	r0, r6
 80075aa:	f7ff ffbc 	bl	8007526 <__sfputs_r>
 80075ae:	3001      	adds	r0, #1
 80075b0:	f000 80c2 	beq.w	8007738 <_vfiprintf_r+0x1ec>
 80075b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075b6:	4453      	add	r3, sl
 80075b8:	9309      	str	r3, [sp, #36]	; 0x24
 80075ba:	f898 3000 	ldrb.w	r3, [r8]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f000 80ba 	beq.w	8007738 <_vfiprintf_r+0x1ec>
 80075c4:	2300      	movs	r3, #0
 80075c6:	f04f 32ff 	mov.w	r2, #4294967295
 80075ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075ce:	9304      	str	r3, [sp, #16]
 80075d0:	9307      	str	r3, [sp, #28]
 80075d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075d6:	931a      	str	r3, [sp, #104]	; 0x68
 80075d8:	46a8      	mov	r8, r5
 80075da:	2205      	movs	r2, #5
 80075dc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80075e0:	485e      	ldr	r0, [pc, #376]	; (800775c <_vfiprintf_r+0x210>)
 80075e2:	f7f8 fdf5 	bl	80001d0 <memchr>
 80075e6:	9b04      	ldr	r3, [sp, #16]
 80075e8:	bb78      	cbnz	r0, 800764a <_vfiprintf_r+0xfe>
 80075ea:	06d9      	lsls	r1, r3, #27
 80075ec:	bf44      	itt	mi
 80075ee:	2220      	movmi	r2, #32
 80075f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075f4:	071a      	lsls	r2, r3, #28
 80075f6:	bf44      	itt	mi
 80075f8:	222b      	movmi	r2, #43	; 0x2b
 80075fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075fe:	782a      	ldrb	r2, [r5, #0]
 8007600:	2a2a      	cmp	r2, #42	; 0x2a
 8007602:	d02a      	beq.n	800765a <_vfiprintf_r+0x10e>
 8007604:	9a07      	ldr	r2, [sp, #28]
 8007606:	46a8      	mov	r8, r5
 8007608:	2000      	movs	r0, #0
 800760a:	250a      	movs	r5, #10
 800760c:	4641      	mov	r1, r8
 800760e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007612:	3b30      	subs	r3, #48	; 0x30
 8007614:	2b09      	cmp	r3, #9
 8007616:	d969      	bls.n	80076ec <_vfiprintf_r+0x1a0>
 8007618:	b360      	cbz	r0, 8007674 <_vfiprintf_r+0x128>
 800761a:	e024      	b.n	8007666 <_vfiprintf_r+0x11a>
 800761c:	4b50      	ldr	r3, [pc, #320]	; (8007760 <_vfiprintf_r+0x214>)
 800761e:	429c      	cmp	r4, r3
 8007620:	d101      	bne.n	8007626 <_vfiprintf_r+0xda>
 8007622:	68b4      	ldr	r4, [r6, #8]
 8007624:	e7a2      	b.n	800756c <_vfiprintf_r+0x20>
 8007626:	4b4f      	ldr	r3, [pc, #316]	; (8007764 <_vfiprintf_r+0x218>)
 8007628:	429c      	cmp	r4, r3
 800762a:	bf08      	it	eq
 800762c:	68f4      	ldreq	r4, [r6, #12]
 800762e:	e79d      	b.n	800756c <_vfiprintf_r+0x20>
 8007630:	4621      	mov	r1, r4
 8007632:	4630      	mov	r0, r6
 8007634:	f000 fad0 	bl	8007bd8 <__swsetup_r>
 8007638:	2800      	cmp	r0, #0
 800763a:	d09d      	beq.n	8007578 <_vfiprintf_r+0x2c>
 800763c:	f04f 30ff 	mov.w	r0, #4294967295
 8007640:	b01d      	add	sp, #116	; 0x74
 8007642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007646:	46a8      	mov	r8, r5
 8007648:	e7a2      	b.n	8007590 <_vfiprintf_r+0x44>
 800764a:	4a44      	ldr	r2, [pc, #272]	; (800775c <_vfiprintf_r+0x210>)
 800764c:	1a80      	subs	r0, r0, r2
 800764e:	fa0b f000 	lsl.w	r0, fp, r0
 8007652:	4318      	orrs	r0, r3
 8007654:	9004      	str	r0, [sp, #16]
 8007656:	4645      	mov	r5, r8
 8007658:	e7be      	b.n	80075d8 <_vfiprintf_r+0x8c>
 800765a:	9a03      	ldr	r2, [sp, #12]
 800765c:	1d11      	adds	r1, r2, #4
 800765e:	6812      	ldr	r2, [r2, #0]
 8007660:	9103      	str	r1, [sp, #12]
 8007662:	2a00      	cmp	r2, #0
 8007664:	db01      	blt.n	800766a <_vfiprintf_r+0x11e>
 8007666:	9207      	str	r2, [sp, #28]
 8007668:	e004      	b.n	8007674 <_vfiprintf_r+0x128>
 800766a:	4252      	negs	r2, r2
 800766c:	f043 0302 	orr.w	r3, r3, #2
 8007670:	9207      	str	r2, [sp, #28]
 8007672:	9304      	str	r3, [sp, #16]
 8007674:	f898 3000 	ldrb.w	r3, [r8]
 8007678:	2b2e      	cmp	r3, #46	; 0x2e
 800767a:	d10e      	bne.n	800769a <_vfiprintf_r+0x14e>
 800767c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007680:	2b2a      	cmp	r3, #42	; 0x2a
 8007682:	d138      	bne.n	80076f6 <_vfiprintf_r+0x1aa>
 8007684:	9b03      	ldr	r3, [sp, #12]
 8007686:	1d1a      	adds	r2, r3, #4
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	9203      	str	r2, [sp, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	bfb8      	it	lt
 8007690:	f04f 33ff 	movlt.w	r3, #4294967295
 8007694:	f108 0802 	add.w	r8, r8, #2
 8007698:	9305      	str	r3, [sp, #20]
 800769a:	4d33      	ldr	r5, [pc, #204]	; (8007768 <_vfiprintf_r+0x21c>)
 800769c:	f898 1000 	ldrb.w	r1, [r8]
 80076a0:	2203      	movs	r2, #3
 80076a2:	4628      	mov	r0, r5
 80076a4:	f7f8 fd94 	bl	80001d0 <memchr>
 80076a8:	b140      	cbz	r0, 80076bc <_vfiprintf_r+0x170>
 80076aa:	2340      	movs	r3, #64	; 0x40
 80076ac:	1b40      	subs	r0, r0, r5
 80076ae:	fa03 f000 	lsl.w	r0, r3, r0
 80076b2:	9b04      	ldr	r3, [sp, #16]
 80076b4:	4303      	orrs	r3, r0
 80076b6:	f108 0801 	add.w	r8, r8, #1
 80076ba:	9304      	str	r3, [sp, #16]
 80076bc:	f898 1000 	ldrb.w	r1, [r8]
 80076c0:	482a      	ldr	r0, [pc, #168]	; (800776c <_vfiprintf_r+0x220>)
 80076c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076c6:	2206      	movs	r2, #6
 80076c8:	f108 0701 	add.w	r7, r8, #1
 80076cc:	f7f8 fd80 	bl	80001d0 <memchr>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d037      	beq.n	8007744 <_vfiprintf_r+0x1f8>
 80076d4:	4b26      	ldr	r3, [pc, #152]	; (8007770 <_vfiprintf_r+0x224>)
 80076d6:	bb1b      	cbnz	r3, 8007720 <_vfiprintf_r+0x1d4>
 80076d8:	9b03      	ldr	r3, [sp, #12]
 80076da:	3307      	adds	r3, #7
 80076dc:	f023 0307 	bic.w	r3, r3, #7
 80076e0:	3308      	adds	r3, #8
 80076e2:	9303      	str	r3, [sp, #12]
 80076e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e6:	444b      	add	r3, r9
 80076e8:	9309      	str	r3, [sp, #36]	; 0x24
 80076ea:	e750      	b.n	800758e <_vfiprintf_r+0x42>
 80076ec:	fb05 3202 	mla	r2, r5, r2, r3
 80076f0:	2001      	movs	r0, #1
 80076f2:	4688      	mov	r8, r1
 80076f4:	e78a      	b.n	800760c <_vfiprintf_r+0xc0>
 80076f6:	2300      	movs	r3, #0
 80076f8:	f108 0801 	add.w	r8, r8, #1
 80076fc:	9305      	str	r3, [sp, #20]
 80076fe:	4619      	mov	r1, r3
 8007700:	250a      	movs	r5, #10
 8007702:	4640      	mov	r0, r8
 8007704:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007708:	3a30      	subs	r2, #48	; 0x30
 800770a:	2a09      	cmp	r2, #9
 800770c:	d903      	bls.n	8007716 <_vfiprintf_r+0x1ca>
 800770e:	2b00      	cmp	r3, #0
 8007710:	d0c3      	beq.n	800769a <_vfiprintf_r+0x14e>
 8007712:	9105      	str	r1, [sp, #20]
 8007714:	e7c1      	b.n	800769a <_vfiprintf_r+0x14e>
 8007716:	fb05 2101 	mla	r1, r5, r1, r2
 800771a:	2301      	movs	r3, #1
 800771c:	4680      	mov	r8, r0
 800771e:	e7f0      	b.n	8007702 <_vfiprintf_r+0x1b6>
 8007720:	ab03      	add	r3, sp, #12
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	4622      	mov	r2, r4
 8007726:	4b13      	ldr	r3, [pc, #76]	; (8007774 <_vfiprintf_r+0x228>)
 8007728:	a904      	add	r1, sp, #16
 800772a:	4630      	mov	r0, r6
 800772c:	f3af 8000 	nop.w
 8007730:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007734:	4681      	mov	r9, r0
 8007736:	d1d5      	bne.n	80076e4 <_vfiprintf_r+0x198>
 8007738:	89a3      	ldrh	r3, [r4, #12]
 800773a:	065b      	lsls	r3, r3, #25
 800773c:	f53f af7e 	bmi.w	800763c <_vfiprintf_r+0xf0>
 8007740:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007742:	e77d      	b.n	8007640 <_vfiprintf_r+0xf4>
 8007744:	ab03      	add	r3, sp, #12
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	4622      	mov	r2, r4
 800774a:	4b0a      	ldr	r3, [pc, #40]	; (8007774 <_vfiprintf_r+0x228>)
 800774c:	a904      	add	r1, sp, #16
 800774e:	4630      	mov	r0, r6
 8007750:	f000 f888 	bl	8007864 <_printf_i>
 8007754:	e7ec      	b.n	8007730 <_vfiprintf_r+0x1e4>
 8007756:	bf00      	nop
 8007758:	08008008 	.word	0x08008008
 800775c:	08008048 	.word	0x08008048
 8007760:	08008028 	.word	0x08008028
 8007764:	08007fe8 	.word	0x08007fe8
 8007768:	0800804e 	.word	0x0800804e
 800776c:	08008052 	.word	0x08008052
 8007770:	00000000 	.word	0x00000000
 8007774:	08007527 	.word	0x08007527

08007778 <_printf_common>:
 8007778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800777c:	4691      	mov	r9, r2
 800777e:	461f      	mov	r7, r3
 8007780:	688a      	ldr	r2, [r1, #8]
 8007782:	690b      	ldr	r3, [r1, #16]
 8007784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007788:	4293      	cmp	r3, r2
 800778a:	bfb8      	it	lt
 800778c:	4613      	movlt	r3, r2
 800778e:	f8c9 3000 	str.w	r3, [r9]
 8007792:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007796:	4606      	mov	r6, r0
 8007798:	460c      	mov	r4, r1
 800779a:	b112      	cbz	r2, 80077a2 <_printf_common+0x2a>
 800779c:	3301      	adds	r3, #1
 800779e:	f8c9 3000 	str.w	r3, [r9]
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	0699      	lsls	r1, r3, #26
 80077a6:	bf42      	ittt	mi
 80077a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80077ac:	3302      	addmi	r3, #2
 80077ae:	f8c9 3000 	strmi.w	r3, [r9]
 80077b2:	6825      	ldr	r5, [r4, #0]
 80077b4:	f015 0506 	ands.w	r5, r5, #6
 80077b8:	d107      	bne.n	80077ca <_printf_common+0x52>
 80077ba:	f104 0a19 	add.w	sl, r4, #25
 80077be:	68e3      	ldr	r3, [r4, #12]
 80077c0:	f8d9 2000 	ldr.w	r2, [r9]
 80077c4:	1a9b      	subs	r3, r3, r2
 80077c6:	42ab      	cmp	r3, r5
 80077c8:	dc28      	bgt.n	800781c <_printf_common+0xa4>
 80077ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80077ce:	6822      	ldr	r2, [r4, #0]
 80077d0:	3300      	adds	r3, #0
 80077d2:	bf18      	it	ne
 80077d4:	2301      	movne	r3, #1
 80077d6:	0692      	lsls	r2, r2, #26
 80077d8:	d42d      	bmi.n	8007836 <_printf_common+0xbe>
 80077da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077de:	4639      	mov	r1, r7
 80077e0:	4630      	mov	r0, r6
 80077e2:	47c0      	blx	r8
 80077e4:	3001      	adds	r0, #1
 80077e6:	d020      	beq.n	800782a <_printf_common+0xb2>
 80077e8:	6823      	ldr	r3, [r4, #0]
 80077ea:	68e5      	ldr	r5, [r4, #12]
 80077ec:	f8d9 2000 	ldr.w	r2, [r9]
 80077f0:	f003 0306 	and.w	r3, r3, #6
 80077f4:	2b04      	cmp	r3, #4
 80077f6:	bf08      	it	eq
 80077f8:	1aad      	subeq	r5, r5, r2
 80077fa:	68a3      	ldr	r3, [r4, #8]
 80077fc:	6922      	ldr	r2, [r4, #16]
 80077fe:	bf0c      	ite	eq
 8007800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007804:	2500      	movne	r5, #0
 8007806:	4293      	cmp	r3, r2
 8007808:	bfc4      	itt	gt
 800780a:	1a9b      	subgt	r3, r3, r2
 800780c:	18ed      	addgt	r5, r5, r3
 800780e:	f04f 0900 	mov.w	r9, #0
 8007812:	341a      	adds	r4, #26
 8007814:	454d      	cmp	r5, r9
 8007816:	d11a      	bne.n	800784e <_printf_common+0xd6>
 8007818:	2000      	movs	r0, #0
 800781a:	e008      	b.n	800782e <_printf_common+0xb6>
 800781c:	2301      	movs	r3, #1
 800781e:	4652      	mov	r2, sl
 8007820:	4639      	mov	r1, r7
 8007822:	4630      	mov	r0, r6
 8007824:	47c0      	blx	r8
 8007826:	3001      	adds	r0, #1
 8007828:	d103      	bne.n	8007832 <_printf_common+0xba>
 800782a:	f04f 30ff 	mov.w	r0, #4294967295
 800782e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007832:	3501      	adds	r5, #1
 8007834:	e7c3      	b.n	80077be <_printf_common+0x46>
 8007836:	18e1      	adds	r1, r4, r3
 8007838:	1c5a      	adds	r2, r3, #1
 800783a:	2030      	movs	r0, #48	; 0x30
 800783c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007840:	4422      	add	r2, r4
 8007842:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007846:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800784a:	3302      	adds	r3, #2
 800784c:	e7c5      	b.n	80077da <_printf_common+0x62>
 800784e:	2301      	movs	r3, #1
 8007850:	4622      	mov	r2, r4
 8007852:	4639      	mov	r1, r7
 8007854:	4630      	mov	r0, r6
 8007856:	47c0      	blx	r8
 8007858:	3001      	adds	r0, #1
 800785a:	d0e6      	beq.n	800782a <_printf_common+0xb2>
 800785c:	f109 0901 	add.w	r9, r9, #1
 8007860:	e7d8      	b.n	8007814 <_printf_common+0x9c>
	...

08007864 <_printf_i>:
 8007864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007868:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800786c:	460c      	mov	r4, r1
 800786e:	7e09      	ldrb	r1, [r1, #24]
 8007870:	b085      	sub	sp, #20
 8007872:	296e      	cmp	r1, #110	; 0x6e
 8007874:	4617      	mov	r7, r2
 8007876:	4606      	mov	r6, r0
 8007878:	4698      	mov	r8, r3
 800787a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800787c:	f000 80b3 	beq.w	80079e6 <_printf_i+0x182>
 8007880:	d822      	bhi.n	80078c8 <_printf_i+0x64>
 8007882:	2963      	cmp	r1, #99	; 0x63
 8007884:	d036      	beq.n	80078f4 <_printf_i+0x90>
 8007886:	d80a      	bhi.n	800789e <_printf_i+0x3a>
 8007888:	2900      	cmp	r1, #0
 800788a:	f000 80b9 	beq.w	8007a00 <_printf_i+0x19c>
 800788e:	2958      	cmp	r1, #88	; 0x58
 8007890:	f000 8083 	beq.w	800799a <_printf_i+0x136>
 8007894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007898:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800789c:	e032      	b.n	8007904 <_printf_i+0xa0>
 800789e:	2964      	cmp	r1, #100	; 0x64
 80078a0:	d001      	beq.n	80078a6 <_printf_i+0x42>
 80078a2:	2969      	cmp	r1, #105	; 0x69
 80078a4:	d1f6      	bne.n	8007894 <_printf_i+0x30>
 80078a6:	6820      	ldr	r0, [r4, #0]
 80078a8:	6813      	ldr	r3, [r2, #0]
 80078aa:	0605      	lsls	r5, r0, #24
 80078ac:	f103 0104 	add.w	r1, r3, #4
 80078b0:	d52a      	bpl.n	8007908 <_printf_i+0xa4>
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6011      	str	r1, [r2, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	da03      	bge.n	80078c2 <_printf_i+0x5e>
 80078ba:	222d      	movs	r2, #45	; 0x2d
 80078bc:	425b      	negs	r3, r3
 80078be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80078c2:	486f      	ldr	r0, [pc, #444]	; (8007a80 <_printf_i+0x21c>)
 80078c4:	220a      	movs	r2, #10
 80078c6:	e039      	b.n	800793c <_printf_i+0xd8>
 80078c8:	2973      	cmp	r1, #115	; 0x73
 80078ca:	f000 809d 	beq.w	8007a08 <_printf_i+0x1a4>
 80078ce:	d808      	bhi.n	80078e2 <_printf_i+0x7e>
 80078d0:	296f      	cmp	r1, #111	; 0x6f
 80078d2:	d020      	beq.n	8007916 <_printf_i+0xb2>
 80078d4:	2970      	cmp	r1, #112	; 0x70
 80078d6:	d1dd      	bne.n	8007894 <_printf_i+0x30>
 80078d8:	6823      	ldr	r3, [r4, #0]
 80078da:	f043 0320 	orr.w	r3, r3, #32
 80078de:	6023      	str	r3, [r4, #0]
 80078e0:	e003      	b.n	80078ea <_printf_i+0x86>
 80078e2:	2975      	cmp	r1, #117	; 0x75
 80078e4:	d017      	beq.n	8007916 <_printf_i+0xb2>
 80078e6:	2978      	cmp	r1, #120	; 0x78
 80078e8:	d1d4      	bne.n	8007894 <_printf_i+0x30>
 80078ea:	2378      	movs	r3, #120	; 0x78
 80078ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078f0:	4864      	ldr	r0, [pc, #400]	; (8007a84 <_printf_i+0x220>)
 80078f2:	e055      	b.n	80079a0 <_printf_i+0x13c>
 80078f4:	6813      	ldr	r3, [r2, #0]
 80078f6:	1d19      	adds	r1, r3, #4
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6011      	str	r1, [r2, #0]
 80078fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007900:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007904:	2301      	movs	r3, #1
 8007906:	e08c      	b.n	8007a22 <_printf_i+0x1be>
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6011      	str	r1, [r2, #0]
 800790c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007910:	bf18      	it	ne
 8007912:	b21b      	sxthne	r3, r3
 8007914:	e7cf      	b.n	80078b6 <_printf_i+0x52>
 8007916:	6813      	ldr	r3, [r2, #0]
 8007918:	6825      	ldr	r5, [r4, #0]
 800791a:	1d18      	adds	r0, r3, #4
 800791c:	6010      	str	r0, [r2, #0]
 800791e:	0628      	lsls	r0, r5, #24
 8007920:	d501      	bpl.n	8007926 <_printf_i+0xc2>
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	e002      	b.n	800792c <_printf_i+0xc8>
 8007926:	0668      	lsls	r0, r5, #25
 8007928:	d5fb      	bpl.n	8007922 <_printf_i+0xbe>
 800792a:	881b      	ldrh	r3, [r3, #0]
 800792c:	4854      	ldr	r0, [pc, #336]	; (8007a80 <_printf_i+0x21c>)
 800792e:	296f      	cmp	r1, #111	; 0x6f
 8007930:	bf14      	ite	ne
 8007932:	220a      	movne	r2, #10
 8007934:	2208      	moveq	r2, #8
 8007936:	2100      	movs	r1, #0
 8007938:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800793c:	6865      	ldr	r5, [r4, #4]
 800793e:	60a5      	str	r5, [r4, #8]
 8007940:	2d00      	cmp	r5, #0
 8007942:	f2c0 8095 	blt.w	8007a70 <_printf_i+0x20c>
 8007946:	6821      	ldr	r1, [r4, #0]
 8007948:	f021 0104 	bic.w	r1, r1, #4
 800794c:	6021      	str	r1, [r4, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d13d      	bne.n	80079ce <_printf_i+0x16a>
 8007952:	2d00      	cmp	r5, #0
 8007954:	f040 808e 	bne.w	8007a74 <_printf_i+0x210>
 8007958:	4665      	mov	r5, ip
 800795a:	2a08      	cmp	r2, #8
 800795c:	d10b      	bne.n	8007976 <_printf_i+0x112>
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	07db      	lsls	r3, r3, #31
 8007962:	d508      	bpl.n	8007976 <_printf_i+0x112>
 8007964:	6923      	ldr	r3, [r4, #16]
 8007966:	6862      	ldr	r2, [r4, #4]
 8007968:	429a      	cmp	r2, r3
 800796a:	bfde      	ittt	le
 800796c:	2330      	movle	r3, #48	; 0x30
 800796e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007972:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007976:	ebac 0305 	sub.w	r3, ip, r5
 800797a:	6123      	str	r3, [r4, #16]
 800797c:	f8cd 8000 	str.w	r8, [sp]
 8007980:	463b      	mov	r3, r7
 8007982:	aa03      	add	r2, sp, #12
 8007984:	4621      	mov	r1, r4
 8007986:	4630      	mov	r0, r6
 8007988:	f7ff fef6 	bl	8007778 <_printf_common>
 800798c:	3001      	adds	r0, #1
 800798e:	d14d      	bne.n	8007a2c <_printf_i+0x1c8>
 8007990:	f04f 30ff 	mov.w	r0, #4294967295
 8007994:	b005      	add	sp, #20
 8007996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800799a:	4839      	ldr	r0, [pc, #228]	; (8007a80 <_printf_i+0x21c>)
 800799c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80079a0:	6813      	ldr	r3, [r2, #0]
 80079a2:	6821      	ldr	r1, [r4, #0]
 80079a4:	1d1d      	adds	r5, r3, #4
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6015      	str	r5, [r2, #0]
 80079aa:	060a      	lsls	r2, r1, #24
 80079ac:	d50b      	bpl.n	80079c6 <_printf_i+0x162>
 80079ae:	07ca      	lsls	r2, r1, #31
 80079b0:	bf44      	itt	mi
 80079b2:	f041 0120 	orrmi.w	r1, r1, #32
 80079b6:	6021      	strmi	r1, [r4, #0]
 80079b8:	b91b      	cbnz	r3, 80079c2 <_printf_i+0x15e>
 80079ba:	6822      	ldr	r2, [r4, #0]
 80079bc:	f022 0220 	bic.w	r2, r2, #32
 80079c0:	6022      	str	r2, [r4, #0]
 80079c2:	2210      	movs	r2, #16
 80079c4:	e7b7      	b.n	8007936 <_printf_i+0xd2>
 80079c6:	064d      	lsls	r5, r1, #25
 80079c8:	bf48      	it	mi
 80079ca:	b29b      	uxthmi	r3, r3
 80079cc:	e7ef      	b.n	80079ae <_printf_i+0x14a>
 80079ce:	4665      	mov	r5, ip
 80079d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80079d4:	fb02 3311 	mls	r3, r2, r1, r3
 80079d8:	5cc3      	ldrb	r3, [r0, r3]
 80079da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80079de:	460b      	mov	r3, r1
 80079e0:	2900      	cmp	r1, #0
 80079e2:	d1f5      	bne.n	80079d0 <_printf_i+0x16c>
 80079e4:	e7b9      	b.n	800795a <_printf_i+0xf6>
 80079e6:	6813      	ldr	r3, [r2, #0]
 80079e8:	6825      	ldr	r5, [r4, #0]
 80079ea:	6961      	ldr	r1, [r4, #20]
 80079ec:	1d18      	adds	r0, r3, #4
 80079ee:	6010      	str	r0, [r2, #0]
 80079f0:	0628      	lsls	r0, r5, #24
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	d501      	bpl.n	80079fa <_printf_i+0x196>
 80079f6:	6019      	str	r1, [r3, #0]
 80079f8:	e002      	b.n	8007a00 <_printf_i+0x19c>
 80079fa:	066a      	lsls	r2, r5, #25
 80079fc:	d5fb      	bpl.n	80079f6 <_printf_i+0x192>
 80079fe:	8019      	strh	r1, [r3, #0]
 8007a00:	2300      	movs	r3, #0
 8007a02:	6123      	str	r3, [r4, #16]
 8007a04:	4665      	mov	r5, ip
 8007a06:	e7b9      	b.n	800797c <_printf_i+0x118>
 8007a08:	6813      	ldr	r3, [r2, #0]
 8007a0a:	1d19      	adds	r1, r3, #4
 8007a0c:	6011      	str	r1, [r2, #0]
 8007a0e:	681d      	ldr	r5, [r3, #0]
 8007a10:	6862      	ldr	r2, [r4, #4]
 8007a12:	2100      	movs	r1, #0
 8007a14:	4628      	mov	r0, r5
 8007a16:	f7f8 fbdb 	bl	80001d0 <memchr>
 8007a1a:	b108      	cbz	r0, 8007a20 <_printf_i+0x1bc>
 8007a1c:	1b40      	subs	r0, r0, r5
 8007a1e:	6060      	str	r0, [r4, #4]
 8007a20:	6863      	ldr	r3, [r4, #4]
 8007a22:	6123      	str	r3, [r4, #16]
 8007a24:	2300      	movs	r3, #0
 8007a26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a2a:	e7a7      	b.n	800797c <_printf_i+0x118>
 8007a2c:	6923      	ldr	r3, [r4, #16]
 8007a2e:	462a      	mov	r2, r5
 8007a30:	4639      	mov	r1, r7
 8007a32:	4630      	mov	r0, r6
 8007a34:	47c0      	blx	r8
 8007a36:	3001      	adds	r0, #1
 8007a38:	d0aa      	beq.n	8007990 <_printf_i+0x12c>
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	079b      	lsls	r3, r3, #30
 8007a3e:	d413      	bmi.n	8007a68 <_printf_i+0x204>
 8007a40:	68e0      	ldr	r0, [r4, #12]
 8007a42:	9b03      	ldr	r3, [sp, #12]
 8007a44:	4298      	cmp	r0, r3
 8007a46:	bfb8      	it	lt
 8007a48:	4618      	movlt	r0, r3
 8007a4a:	e7a3      	b.n	8007994 <_printf_i+0x130>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	464a      	mov	r2, r9
 8007a50:	4639      	mov	r1, r7
 8007a52:	4630      	mov	r0, r6
 8007a54:	47c0      	blx	r8
 8007a56:	3001      	adds	r0, #1
 8007a58:	d09a      	beq.n	8007990 <_printf_i+0x12c>
 8007a5a:	3501      	adds	r5, #1
 8007a5c:	68e3      	ldr	r3, [r4, #12]
 8007a5e:	9a03      	ldr	r2, [sp, #12]
 8007a60:	1a9b      	subs	r3, r3, r2
 8007a62:	42ab      	cmp	r3, r5
 8007a64:	dcf2      	bgt.n	8007a4c <_printf_i+0x1e8>
 8007a66:	e7eb      	b.n	8007a40 <_printf_i+0x1dc>
 8007a68:	2500      	movs	r5, #0
 8007a6a:	f104 0919 	add.w	r9, r4, #25
 8007a6e:	e7f5      	b.n	8007a5c <_printf_i+0x1f8>
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1ac      	bne.n	80079ce <_printf_i+0x16a>
 8007a74:	7803      	ldrb	r3, [r0, #0]
 8007a76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a7e:	e76c      	b.n	800795a <_printf_i+0xf6>
 8007a80:	08008059 	.word	0x08008059
 8007a84:	0800806a 	.word	0x0800806a

08007a88 <__sread>:
 8007a88:	b510      	push	{r4, lr}
 8007a8a:	460c      	mov	r4, r1
 8007a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a90:	f000 fa46 	bl	8007f20 <_read_r>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	bfab      	itete	ge
 8007a98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a9a:	89a3      	ldrhlt	r3, [r4, #12]
 8007a9c:	181b      	addge	r3, r3, r0
 8007a9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007aa2:	bfac      	ite	ge
 8007aa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007aa6:	81a3      	strhlt	r3, [r4, #12]
 8007aa8:	bd10      	pop	{r4, pc}

08007aaa <__swrite>:
 8007aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aae:	461f      	mov	r7, r3
 8007ab0:	898b      	ldrh	r3, [r1, #12]
 8007ab2:	05db      	lsls	r3, r3, #23
 8007ab4:	4605      	mov	r5, r0
 8007ab6:	460c      	mov	r4, r1
 8007ab8:	4616      	mov	r6, r2
 8007aba:	d505      	bpl.n	8007ac8 <__swrite+0x1e>
 8007abc:	2302      	movs	r3, #2
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac4:	f000 f9b6 	bl	8007e34 <_lseek_r>
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ace:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ad2:	81a3      	strh	r3, [r4, #12]
 8007ad4:	4632      	mov	r2, r6
 8007ad6:	463b      	mov	r3, r7
 8007ad8:	4628      	mov	r0, r5
 8007ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ade:	f000 b869 	b.w	8007bb4 <_write_r>

08007ae2 <__sseek>:
 8007ae2:	b510      	push	{r4, lr}
 8007ae4:	460c      	mov	r4, r1
 8007ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aea:	f000 f9a3 	bl	8007e34 <_lseek_r>
 8007aee:	1c43      	adds	r3, r0, #1
 8007af0:	89a3      	ldrh	r3, [r4, #12]
 8007af2:	bf15      	itete	ne
 8007af4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007af6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007afa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007afe:	81a3      	strheq	r3, [r4, #12]
 8007b00:	bf18      	it	ne
 8007b02:	81a3      	strhne	r3, [r4, #12]
 8007b04:	bd10      	pop	{r4, pc}

08007b06 <__sclose>:
 8007b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b0a:	f000 b8d3 	b.w	8007cb4 <_close_r>
	...

08007b10 <__swbuf_r>:
 8007b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b12:	460e      	mov	r6, r1
 8007b14:	4614      	mov	r4, r2
 8007b16:	4605      	mov	r5, r0
 8007b18:	b118      	cbz	r0, 8007b22 <__swbuf_r+0x12>
 8007b1a:	6983      	ldr	r3, [r0, #24]
 8007b1c:	b90b      	cbnz	r3, 8007b22 <__swbuf_r+0x12>
 8007b1e:	f7ff fc5f 	bl	80073e0 <__sinit>
 8007b22:	4b21      	ldr	r3, [pc, #132]	; (8007ba8 <__swbuf_r+0x98>)
 8007b24:	429c      	cmp	r4, r3
 8007b26:	d12a      	bne.n	8007b7e <__swbuf_r+0x6e>
 8007b28:	686c      	ldr	r4, [r5, #4]
 8007b2a:	69a3      	ldr	r3, [r4, #24]
 8007b2c:	60a3      	str	r3, [r4, #8]
 8007b2e:	89a3      	ldrh	r3, [r4, #12]
 8007b30:	071a      	lsls	r2, r3, #28
 8007b32:	d52e      	bpl.n	8007b92 <__swbuf_r+0x82>
 8007b34:	6923      	ldr	r3, [r4, #16]
 8007b36:	b363      	cbz	r3, 8007b92 <__swbuf_r+0x82>
 8007b38:	6923      	ldr	r3, [r4, #16]
 8007b3a:	6820      	ldr	r0, [r4, #0]
 8007b3c:	1ac0      	subs	r0, r0, r3
 8007b3e:	6963      	ldr	r3, [r4, #20]
 8007b40:	b2f6      	uxtb	r6, r6
 8007b42:	4283      	cmp	r3, r0
 8007b44:	4637      	mov	r7, r6
 8007b46:	dc04      	bgt.n	8007b52 <__swbuf_r+0x42>
 8007b48:	4621      	mov	r1, r4
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	f000 f948 	bl	8007de0 <_fflush_r>
 8007b50:	bb28      	cbnz	r0, 8007b9e <__swbuf_r+0x8e>
 8007b52:	68a3      	ldr	r3, [r4, #8]
 8007b54:	3b01      	subs	r3, #1
 8007b56:	60a3      	str	r3, [r4, #8]
 8007b58:	6823      	ldr	r3, [r4, #0]
 8007b5a:	1c5a      	adds	r2, r3, #1
 8007b5c:	6022      	str	r2, [r4, #0]
 8007b5e:	701e      	strb	r6, [r3, #0]
 8007b60:	6963      	ldr	r3, [r4, #20]
 8007b62:	3001      	adds	r0, #1
 8007b64:	4283      	cmp	r3, r0
 8007b66:	d004      	beq.n	8007b72 <__swbuf_r+0x62>
 8007b68:	89a3      	ldrh	r3, [r4, #12]
 8007b6a:	07db      	lsls	r3, r3, #31
 8007b6c:	d519      	bpl.n	8007ba2 <__swbuf_r+0x92>
 8007b6e:	2e0a      	cmp	r6, #10
 8007b70:	d117      	bne.n	8007ba2 <__swbuf_r+0x92>
 8007b72:	4621      	mov	r1, r4
 8007b74:	4628      	mov	r0, r5
 8007b76:	f000 f933 	bl	8007de0 <_fflush_r>
 8007b7a:	b190      	cbz	r0, 8007ba2 <__swbuf_r+0x92>
 8007b7c:	e00f      	b.n	8007b9e <__swbuf_r+0x8e>
 8007b7e:	4b0b      	ldr	r3, [pc, #44]	; (8007bac <__swbuf_r+0x9c>)
 8007b80:	429c      	cmp	r4, r3
 8007b82:	d101      	bne.n	8007b88 <__swbuf_r+0x78>
 8007b84:	68ac      	ldr	r4, [r5, #8]
 8007b86:	e7d0      	b.n	8007b2a <__swbuf_r+0x1a>
 8007b88:	4b09      	ldr	r3, [pc, #36]	; (8007bb0 <__swbuf_r+0xa0>)
 8007b8a:	429c      	cmp	r4, r3
 8007b8c:	bf08      	it	eq
 8007b8e:	68ec      	ldreq	r4, [r5, #12]
 8007b90:	e7cb      	b.n	8007b2a <__swbuf_r+0x1a>
 8007b92:	4621      	mov	r1, r4
 8007b94:	4628      	mov	r0, r5
 8007b96:	f000 f81f 	bl	8007bd8 <__swsetup_r>
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	d0cc      	beq.n	8007b38 <__swbuf_r+0x28>
 8007b9e:	f04f 37ff 	mov.w	r7, #4294967295
 8007ba2:	4638      	mov	r0, r7
 8007ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	08008008 	.word	0x08008008
 8007bac:	08008028 	.word	0x08008028
 8007bb0:	08007fe8 	.word	0x08007fe8

08007bb4 <_write_r>:
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	4c07      	ldr	r4, [pc, #28]	; (8007bd4 <_write_r+0x20>)
 8007bb8:	4605      	mov	r5, r0
 8007bba:	4608      	mov	r0, r1
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	6022      	str	r2, [r4, #0]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f7fe ff29 	bl	8006a1a <_write>
 8007bc8:	1c43      	adds	r3, r0, #1
 8007bca:	d102      	bne.n	8007bd2 <_write_r+0x1e>
 8007bcc:	6823      	ldr	r3, [r4, #0]
 8007bce:	b103      	cbz	r3, 8007bd2 <_write_r+0x1e>
 8007bd0:	602b      	str	r3, [r5, #0]
 8007bd2:	bd38      	pop	{r3, r4, r5, pc}
 8007bd4:	20000888 	.word	0x20000888

08007bd8 <__swsetup_r>:
 8007bd8:	4b32      	ldr	r3, [pc, #200]	; (8007ca4 <__swsetup_r+0xcc>)
 8007bda:	b570      	push	{r4, r5, r6, lr}
 8007bdc:	681d      	ldr	r5, [r3, #0]
 8007bde:	4606      	mov	r6, r0
 8007be0:	460c      	mov	r4, r1
 8007be2:	b125      	cbz	r5, 8007bee <__swsetup_r+0x16>
 8007be4:	69ab      	ldr	r3, [r5, #24]
 8007be6:	b913      	cbnz	r3, 8007bee <__swsetup_r+0x16>
 8007be8:	4628      	mov	r0, r5
 8007bea:	f7ff fbf9 	bl	80073e0 <__sinit>
 8007bee:	4b2e      	ldr	r3, [pc, #184]	; (8007ca8 <__swsetup_r+0xd0>)
 8007bf0:	429c      	cmp	r4, r3
 8007bf2:	d10f      	bne.n	8007c14 <__swsetup_r+0x3c>
 8007bf4:	686c      	ldr	r4, [r5, #4]
 8007bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	0715      	lsls	r5, r2, #28
 8007bfe:	d42c      	bmi.n	8007c5a <__swsetup_r+0x82>
 8007c00:	06d0      	lsls	r0, r2, #27
 8007c02:	d411      	bmi.n	8007c28 <__swsetup_r+0x50>
 8007c04:	2209      	movs	r2, #9
 8007c06:	6032      	str	r2, [r6, #0]
 8007c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c0c:	81a3      	strh	r3, [r4, #12]
 8007c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c12:	e03e      	b.n	8007c92 <__swsetup_r+0xba>
 8007c14:	4b25      	ldr	r3, [pc, #148]	; (8007cac <__swsetup_r+0xd4>)
 8007c16:	429c      	cmp	r4, r3
 8007c18:	d101      	bne.n	8007c1e <__swsetup_r+0x46>
 8007c1a:	68ac      	ldr	r4, [r5, #8]
 8007c1c:	e7eb      	b.n	8007bf6 <__swsetup_r+0x1e>
 8007c1e:	4b24      	ldr	r3, [pc, #144]	; (8007cb0 <__swsetup_r+0xd8>)
 8007c20:	429c      	cmp	r4, r3
 8007c22:	bf08      	it	eq
 8007c24:	68ec      	ldreq	r4, [r5, #12]
 8007c26:	e7e6      	b.n	8007bf6 <__swsetup_r+0x1e>
 8007c28:	0751      	lsls	r1, r2, #29
 8007c2a:	d512      	bpl.n	8007c52 <__swsetup_r+0x7a>
 8007c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c2e:	b141      	cbz	r1, 8007c42 <__swsetup_r+0x6a>
 8007c30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c34:	4299      	cmp	r1, r3
 8007c36:	d002      	beq.n	8007c3e <__swsetup_r+0x66>
 8007c38:	4630      	mov	r0, r6
 8007c3a:	f7ff fac1 	bl	80071c0 <_free_r>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	6363      	str	r3, [r4, #52]	; 0x34
 8007c42:	89a3      	ldrh	r3, [r4, #12]
 8007c44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c48:	81a3      	strh	r3, [r4, #12]
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	6063      	str	r3, [r4, #4]
 8007c4e:	6923      	ldr	r3, [r4, #16]
 8007c50:	6023      	str	r3, [r4, #0]
 8007c52:	89a3      	ldrh	r3, [r4, #12]
 8007c54:	f043 0308 	orr.w	r3, r3, #8
 8007c58:	81a3      	strh	r3, [r4, #12]
 8007c5a:	6923      	ldr	r3, [r4, #16]
 8007c5c:	b94b      	cbnz	r3, 8007c72 <__swsetup_r+0x9a>
 8007c5e:	89a3      	ldrh	r3, [r4, #12]
 8007c60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c68:	d003      	beq.n	8007c72 <__swsetup_r+0x9a>
 8007c6a:	4621      	mov	r1, r4
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	f000 f917 	bl	8007ea0 <__smakebuf_r>
 8007c72:	89a2      	ldrh	r2, [r4, #12]
 8007c74:	f012 0301 	ands.w	r3, r2, #1
 8007c78:	d00c      	beq.n	8007c94 <__swsetup_r+0xbc>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60a3      	str	r3, [r4, #8]
 8007c7e:	6963      	ldr	r3, [r4, #20]
 8007c80:	425b      	negs	r3, r3
 8007c82:	61a3      	str	r3, [r4, #24]
 8007c84:	6923      	ldr	r3, [r4, #16]
 8007c86:	b953      	cbnz	r3, 8007c9e <__swsetup_r+0xc6>
 8007c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c8c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007c90:	d1ba      	bne.n	8007c08 <__swsetup_r+0x30>
 8007c92:	bd70      	pop	{r4, r5, r6, pc}
 8007c94:	0792      	lsls	r2, r2, #30
 8007c96:	bf58      	it	pl
 8007c98:	6963      	ldrpl	r3, [r4, #20]
 8007c9a:	60a3      	str	r3, [r4, #8]
 8007c9c:	e7f2      	b.n	8007c84 <__swsetup_r+0xac>
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	e7f7      	b.n	8007c92 <__swsetup_r+0xba>
 8007ca2:	bf00      	nop
 8007ca4:	2000002c 	.word	0x2000002c
 8007ca8:	08008008 	.word	0x08008008
 8007cac:	08008028 	.word	0x08008028
 8007cb0:	08007fe8 	.word	0x08007fe8

08007cb4 <_close_r>:
 8007cb4:	b538      	push	{r3, r4, r5, lr}
 8007cb6:	4c06      	ldr	r4, [pc, #24]	; (8007cd0 <_close_r+0x1c>)
 8007cb8:	2300      	movs	r3, #0
 8007cba:	4605      	mov	r5, r0
 8007cbc:	4608      	mov	r0, r1
 8007cbe:	6023      	str	r3, [r4, #0]
 8007cc0:	f7fe fec7 	bl	8006a52 <_close>
 8007cc4:	1c43      	adds	r3, r0, #1
 8007cc6:	d102      	bne.n	8007cce <_close_r+0x1a>
 8007cc8:	6823      	ldr	r3, [r4, #0]
 8007cca:	b103      	cbz	r3, 8007cce <_close_r+0x1a>
 8007ccc:	602b      	str	r3, [r5, #0]
 8007cce:	bd38      	pop	{r3, r4, r5, pc}
 8007cd0:	20000888 	.word	0x20000888

08007cd4 <__sflush_r>:
 8007cd4:	898a      	ldrh	r2, [r1, #12]
 8007cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cda:	4605      	mov	r5, r0
 8007cdc:	0710      	lsls	r0, r2, #28
 8007cde:	460c      	mov	r4, r1
 8007ce0:	d458      	bmi.n	8007d94 <__sflush_r+0xc0>
 8007ce2:	684b      	ldr	r3, [r1, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	dc05      	bgt.n	8007cf4 <__sflush_r+0x20>
 8007ce8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	dc02      	bgt.n	8007cf4 <__sflush_r+0x20>
 8007cee:	2000      	movs	r0, #0
 8007cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cf6:	2e00      	cmp	r6, #0
 8007cf8:	d0f9      	beq.n	8007cee <__sflush_r+0x1a>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d00:	682f      	ldr	r7, [r5, #0]
 8007d02:	6a21      	ldr	r1, [r4, #32]
 8007d04:	602b      	str	r3, [r5, #0]
 8007d06:	d032      	beq.n	8007d6e <__sflush_r+0x9a>
 8007d08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	075a      	lsls	r2, r3, #29
 8007d0e:	d505      	bpl.n	8007d1c <__sflush_r+0x48>
 8007d10:	6863      	ldr	r3, [r4, #4]
 8007d12:	1ac0      	subs	r0, r0, r3
 8007d14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d16:	b10b      	cbz	r3, 8007d1c <__sflush_r+0x48>
 8007d18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d1a:	1ac0      	subs	r0, r0, r3
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	4602      	mov	r2, r0
 8007d20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d22:	6a21      	ldr	r1, [r4, #32]
 8007d24:	4628      	mov	r0, r5
 8007d26:	47b0      	blx	r6
 8007d28:	1c43      	adds	r3, r0, #1
 8007d2a:	89a3      	ldrh	r3, [r4, #12]
 8007d2c:	d106      	bne.n	8007d3c <__sflush_r+0x68>
 8007d2e:	6829      	ldr	r1, [r5, #0]
 8007d30:	291d      	cmp	r1, #29
 8007d32:	d848      	bhi.n	8007dc6 <__sflush_r+0xf2>
 8007d34:	4a29      	ldr	r2, [pc, #164]	; (8007ddc <__sflush_r+0x108>)
 8007d36:	40ca      	lsrs	r2, r1
 8007d38:	07d6      	lsls	r6, r2, #31
 8007d3a:	d544      	bpl.n	8007dc6 <__sflush_r+0xf2>
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	6062      	str	r2, [r4, #4]
 8007d40:	04d9      	lsls	r1, r3, #19
 8007d42:	6922      	ldr	r2, [r4, #16]
 8007d44:	6022      	str	r2, [r4, #0]
 8007d46:	d504      	bpl.n	8007d52 <__sflush_r+0x7e>
 8007d48:	1c42      	adds	r2, r0, #1
 8007d4a:	d101      	bne.n	8007d50 <__sflush_r+0x7c>
 8007d4c:	682b      	ldr	r3, [r5, #0]
 8007d4e:	b903      	cbnz	r3, 8007d52 <__sflush_r+0x7e>
 8007d50:	6560      	str	r0, [r4, #84]	; 0x54
 8007d52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d54:	602f      	str	r7, [r5, #0]
 8007d56:	2900      	cmp	r1, #0
 8007d58:	d0c9      	beq.n	8007cee <__sflush_r+0x1a>
 8007d5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d5e:	4299      	cmp	r1, r3
 8007d60:	d002      	beq.n	8007d68 <__sflush_r+0x94>
 8007d62:	4628      	mov	r0, r5
 8007d64:	f7ff fa2c 	bl	80071c0 <_free_r>
 8007d68:	2000      	movs	r0, #0
 8007d6a:	6360      	str	r0, [r4, #52]	; 0x34
 8007d6c:	e7c0      	b.n	8007cf0 <__sflush_r+0x1c>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	4628      	mov	r0, r5
 8007d72:	47b0      	blx	r6
 8007d74:	1c41      	adds	r1, r0, #1
 8007d76:	d1c8      	bne.n	8007d0a <__sflush_r+0x36>
 8007d78:	682b      	ldr	r3, [r5, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d0c5      	beq.n	8007d0a <__sflush_r+0x36>
 8007d7e:	2b1d      	cmp	r3, #29
 8007d80:	d001      	beq.n	8007d86 <__sflush_r+0xb2>
 8007d82:	2b16      	cmp	r3, #22
 8007d84:	d101      	bne.n	8007d8a <__sflush_r+0xb6>
 8007d86:	602f      	str	r7, [r5, #0]
 8007d88:	e7b1      	b.n	8007cee <__sflush_r+0x1a>
 8007d8a:	89a3      	ldrh	r3, [r4, #12]
 8007d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d90:	81a3      	strh	r3, [r4, #12]
 8007d92:	e7ad      	b.n	8007cf0 <__sflush_r+0x1c>
 8007d94:	690f      	ldr	r7, [r1, #16]
 8007d96:	2f00      	cmp	r7, #0
 8007d98:	d0a9      	beq.n	8007cee <__sflush_r+0x1a>
 8007d9a:	0793      	lsls	r3, r2, #30
 8007d9c:	680e      	ldr	r6, [r1, #0]
 8007d9e:	bf08      	it	eq
 8007da0:	694b      	ldreq	r3, [r1, #20]
 8007da2:	600f      	str	r7, [r1, #0]
 8007da4:	bf18      	it	ne
 8007da6:	2300      	movne	r3, #0
 8007da8:	eba6 0807 	sub.w	r8, r6, r7
 8007dac:	608b      	str	r3, [r1, #8]
 8007dae:	f1b8 0f00 	cmp.w	r8, #0
 8007db2:	dd9c      	ble.n	8007cee <__sflush_r+0x1a>
 8007db4:	4643      	mov	r3, r8
 8007db6:	463a      	mov	r2, r7
 8007db8:	6a21      	ldr	r1, [r4, #32]
 8007dba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	47b0      	blx	r6
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	dc06      	bgt.n	8007dd2 <__sflush_r+0xfe>
 8007dc4:	89a3      	ldrh	r3, [r4, #12]
 8007dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dca:	81a3      	strh	r3, [r4, #12]
 8007dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd0:	e78e      	b.n	8007cf0 <__sflush_r+0x1c>
 8007dd2:	4407      	add	r7, r0
 8007dd4:	eba8 0800 	sub.w	r8, r8, r0
 8007dd8:	e7e9      	b.n	8007dae <__sflush_r+0xda>
 8007dda:	bf00      	nop
 8007ddc:	20400001 	.word	0x20400001

08007de0 <_fflush_r>:
 8007de0:	b538      	push	{r3, r4, r5, lr}
 8007de2:	690b      	ldr	r3, [r1, #16]
 8007de4:	4605      	mov	r5, r0
 8007de6:	460c      	mov	r4, r1
 8007de8:	b1db      	cbz	r3, 8007e22 <_fflush_r+0x42>
 8007dea:	b118      	cbz	r0, 8007df4 <_fflush_r+0x14>
 8007dec:	6983      	ldr	r3, [r0, #24]
 8007dee:	b90b      	cbnz	r3, 8007df4 <_fflush_r+0x14>
 8007df0:	f7ff faf6 	bl	80073e0 <__sinit>
 8007df4:	4b0c      	ldr	r3, [pc, #48]	; (8007e28 <_fflush_r+0x48>)
 8007df6:	429c      	cmp	r4, r3
 8007df8:	d109      	bne.n	8007e0e <_fflush_r+0x2e>
 8007dfa:	686c      	ldr	r4, [r5, #4]
 8007dfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e00:	b17b      	cbz	r3, 8007e22 <_fflush_r+0x42>
 8007e02:	4621      	mov	r1, r4
 8007e04:	4628      	mov	r0, r5
 8007e06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e0a:	f7ff bf63 	b.w	8007cd4 <__sflush_r>
 8007e0e:	4b07      	ldr	r3, [pc, #28]	; (8007e2c <_fflush_r+0x4c>)
 8007e10:	429c      	cmp	r4, r3
 8007e12:	d101      	bne.n	8007e18 <_fflush_r+0x38>
 8007e14:	68ac      	ldr	r4, [r5, #8]
 8007e16:	e7f1      	b.n	8007dfc <_fflush_r+0x1c>
 8007e18:	4b05      	ldr	r3, [pc, #20]	; (8007e30 <_fflush_r+0x50>)
 8007e1a:	429c      	cmp	r4, r3
 8007e1c:	bf08      	it	eq
 8007e1e:	68ec      	ldreq	r4, [r5, #12]
 8007e20:	e7ec      	b.n	8007dfc <_fflush_r+0x1c>
 8007e22:	2000      	movs	r0, #0
 8007e24:	bd38      	pop	{r3, r4, r5, pc}
 8007e26:	bf00      	nop
 8007e28:	08008008 	.word	0x08008008
 8007e2c:	08008028 	.word	0x08008028
 8007e30:	08007fe8 	.word	0x08007fe8

08007e34 <_lseek_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	4c07      	ldr	r4, [pc, #28]	; (8007e54 <_lseek_r+0x20>)
 8007e38:	4605      	mov	r5, r0
 8007e3a:	4608      	mov	r0, r1
 8007e3c:	4611      	mov	r1, r2
 8007e3e:	2200      	movs	r2, #0
 8007e40:	6022      	str	r2, [r4, #0]
 8007e42:	461a      	mov	r2, r3
 8007e44:	f7fe fe2c 	bl	8006aa0 <_lseek>
 8007e48:	1c43      	adds	r3, r0, #1
 8007e4a:	d102      	bne.n	8007e52 <_lseek_r+0x1e>
 8007e4c:	6823      	ldr	r3, [r4, #0]
 8007e4e:	b103      	cbz	r3, 8007e52 <_lseek_r+0x1e>
 8007e50:	602b      	str	r3, [r5, #0]
 8007e52:	bd38      	pop	{r3, r4, r5, pc}
 8007e54:	20000888 	.word	0x20000888

08007e58 <__swhatbuf_r>:
 8007e58:	b570      	push	{r4, r5, r6, lr}
 8007e5a:	460e      	mov	r6, r1
 8007e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e60:	2900      	cmp	r1, #0
 8007e62:	b096      	sub	sp, #88	; 0x58
 8007e64:	4614      	mov	r4, r2
 8007e66:	461d      	mov	r5, r3
 8007e68:	da07      	bge.n	8007e7a <__swhatbuf_r+0x22>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	602b      	str	r3, [r5, #0]
 8007e6e:	89b3      	ldrh	r3, [r6, #12]
 8007e70:	061a      	lsls	r2, r3, #24
 8007e72:	d410      	bmi.n	8007e96 <__swhatbuf_r+0x3e>
 8007e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e78:	e00e      	b.n	8007e98 <__swhatbuf_r+0x40>
 8007e7a:	466a      	mov	r2, sp
 8007e7c:	f000 f862 	bl	8007f44 <_fstat_r>
 8007e80:	2800      	cmp	r0, #0
 8007e82:	dbf2      	blt.n	8007e6a <__swhatbuf_r+0x12>
 8007e84:	9a01      	ldr	r2, [sp, #4]
 8007e86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e8e:	425a      	negs	r2, r3
 8007e90:	415a      	adcs	r2, r3
 8007e92:	602a      	str	r2, [r5, #0]
 8007e94:	e7ee      	b.n	8007e74 <__swhatbuf_r+0x1c>
 8007e96:	2340      	movs	r3, #64	; 0x40
 8007e98:	2000      	movs	r0, #0
 8007e9a:	6023      	str	r3, [r4, #0]
 8007e9c:	b016      	add	sp, #88	; 0x58
 8007e9e:	bd70      	pop	{r4, r5, r6, pc}

08007ea0 <__smakebuf_r>:
 8007ea0:	898b      	ldrh	r3, [r1, #12]
 8007ea2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ea4:	079d      	lsls	r5, r3, #30
 8007ea6:	4606      	mov	r6, r0
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	d507      	bpl.n	8007ebc <__smakebuf_r+0x1c>
 8007eac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007eb0:	6023      	str	r3, [r4, #0]
 8007eb2:	6123      	str	r3, [r4, #16]
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	6163      	str	r3, [r4, #20]
 8007eb8:	b002      	add	sp, #8
 8007eba:	bd70      	pop	{r4, r5, r6, pc}
 8007ebc:	ab01      	add	r3, sp, #4
 8007ebe:	466a      	mov	r2, sp
 8007ec0:	f7ff ffca 	bl	8007e58 <__swhatbuf_r>
 8007ec4:	9900      	ldr	r1, [sp, #0]
 8007ec6:	4605      	mov	r5, r0
 8007ec8:	4630      	mov	r0, r6
 8007eca:	f7ff f9c7 	bl	800725c <_malloc_r>
 8007ece:	b948      	cbnz	r0, 8007ee4 <__smakebuf_r+0x44>
 8007ed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ed4:	059a      	lsls	r2, r3, #22
 8007ed6:	d4ef      	bmi.n	8007eb8 <__smakebuf_r+0x18>
 8007ed8:	f023 0303 	bic.w	r3, r3, #3
 8007edc:	f043 0302 	orr.w	r3, r3, #2
 8007ee0:	81a3      	strh	r3, [r4, #12]
 8007ee2:	e7e3      	b.n	8007eac <__smakebuf_r+0xc>
 8007ee4:	4b0d      	ldr	r3, [pc, #52]	; (8007f1c <__smakebuf_r+0x7c>)
 8007ee6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ee8:	89a3      	ldrh	r3, [r4, #12]
 8007eea:	6020      	str	r0, [r4, #0]
 8007eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ef0:	81a3      	strh	r3, [r4, #12]
 8007ef2:	9b00      	ldr	r3, [sp, #0]
 8007ef4:	6163      	str	r3, [r4, #20]
 8007ef6:	9b01      	ldr	r3, [sp, #4]
 8007ef8:	6120      	str	r0, [r4, #16]
 8007efa:	b15b      	cbz	r3, 8007f14 <__smakebuf_r+0x74>
 8007efc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f00:	4630      	mov	r0, r6
 8007f02:	f000 f831 	bl	8007f68 <_isatty_r>
 8007f06:	b128      	cbz	r0, 8007f14 <__smakebuf_r+0x74>
 8007f08:	89a3      	ldrh	r3, [r4, #12]
 8007f0a:	f023 0303 	bic.w	r3, r3, #3
 8007f0e:	f043 0301 	orr.w	r3, r3, #1
 8007f12:	81a3      	strh	r3, [r4, #12]
 8007f14:	89a3      	ldrh	r3, [r4, #12]
 8007f16:	431d      	orrs	r5, r3
 8007f18:	81a5      	strh	r5, [r4, #12]
 8007f1a:	e7cd      	b.n	8007eb8 <__smakebuf_r+0x18>
 8007f1c:	080073a9 	.word	0x080073a9

08007f20 <_read_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	4c07      	ldr	r4, [pc, #28]	; (8007f40 <_read_r+0x20>)
 8007f24:	4605      	mov	r5, r0
 8007f26:	4608      	mov	r0, r1
 8007f28:	4611      	mov	r1, r2
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	6022      	str	r2, [r4, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	f7fe fd56 	bl	80069e0 <_read>
 8007f34:	1c43      	adds	r3, r0, #1
 8007f36:	d102      	bne.n	8007f3e <_read_r+0x1e>
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	b103      	cbz	r3, 8007f3e <_read_r+0x1e>
 8007f3c:	602b      	str	r3, [r5, #0]
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	20000888 	.word	0x20000888

08007f44 <_fstat_r>:
 8007f44:	b538      	push	{r3, r4, r5, lr}
 8007f46:	4c07      	ldr	r4, [pc, #28]	; (8007f64 <_fstat_r+0x20>)
 8007f48:	2300      	movs	r3, #0
 8007f4a:	4605      	mov	r5, r0
 8007f4c:	4608      	mov	r0, r1
 8007f4e:	4611      	mov	r1, r2
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	f7fe fd8a 	bl	8006a6a <_fstat>
 8007f56:	1c43      	adds	r3, r0, #1
 8007f58:	d102      	bne.n	8007f60 <_fstat_r+0x1c>
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	b103      	cbz	r3, 8007f60 <_fstat_r+0x1c>
 8007f5e:	602b      	str	r3, [r5, #0]
 8007f60:	bd38      	pop	{r3, r4, r5, pc}
 8007f62:	bf00      	nop
 8007f64:	20000888 	.word	0x20000888

08007f68 <_isatty_r>:
 8007f68:	b538      	push	{r3, r4, r5, lr}
 8007f6a:	4c06      	ldr	r4, [pc, #24]	; (8007f84 <_isatty_r+0x1c>)
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	4605      	mov	r5, r0
 8007f70:	4608      	mov	r0, r1
 8007f72:	6023      	str	r3, [r4, #0]
 8007f74:	f7fe fd89 	bl	8006a8a <_isatty>
 8007f78:	1c43      	adds	r3, r0, #1
 8007f7a:	d102      	bne.n	8007f82 <_isatty_r+0x1a>
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	b103      	cbz	r3, 8007f82 <_isatty_r+0x1a>
 8007f80:	602b      	str	r3, [r5, #0]
 8007f82:	bd38      	pop	{r3, r4, r5, pc}
 8007f84:	20000888 	.word	0x20000888

08007f88 <_init>:
 8007f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8a:	bf00      	nop
 8007f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f8e:	bc08      	pop	{r3}
 8007f90:	469e      	mov	lr, r3
 8007f92:	4770      	bx	lr

08007f94 <_fini>:
 8007f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f96:	bf00      	nop
 8007f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f9a:	bc08      	pop	{r3}
 8007f9c:	469e      	mov	lr, r3
 8007f9e:	4770      	bx	lr
