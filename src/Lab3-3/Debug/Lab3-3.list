
Lab3-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009d1c  08009d1c  00019d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d74  08009d74  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009d74  08009d74  00019d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d7c  08009d7c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d7c  08009d7c  00019d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d80  08009d80  00019d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c4  20000090  08009e14  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000954  08009e14  00020954  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e238  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e93  00000000  00000000  0003e2f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018b8  00000000  00000000  00042190  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001710  00000000  00000000  00043a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025990  00000000  00000000  00045158  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001565b  00000000  00000000  0006aae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3cfb  00000000  00000000  00080143  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00153e3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c64  00000000  00000000  00153ebc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009d04 	.word	0x08009d04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08009d04 	.word	0x08009d04

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 f94d 	bl	8000848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f808 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f008 f910 	bl	80087d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f965 	bl	80008b2 <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 f92d 	bl	800085e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000028 	.word	0x20000028
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	200000c8 	.word	0x200000c8

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	200000c8 	.word	0x200000c8

08000664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff ffee 	bl	800064c <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d005      	beq.n	800068a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_Delay+0x40>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800068a:	bf00      	nop
 800068c:	f7ff ffde 	bl	800064c <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8f7      	bhi.n	800068c <HAL_Delay+0x28>
  {
  }
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000004 	.word	0x20000004

080006a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c4:	4013      	ands	r3, r2
 80006c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006da:	4a04      	ldr	r2, [pc, #16]	; (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	60d3      	str	r3, [r2, #12]
}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <__NVIC_GetPriorityGrouping+0x18>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	0a1b      	lsrs	r3, r3, #8
 80006fa:	f003 0307 	and.w	r3, r3, #7
}
 80006fe:	4618      	mov	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	2b00      	cmp	r3, #0
 800071c:	db0b      	blt.n	8000736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	f003 021f 	and.w	r2, r3, #31
 8000724:	4907      	ldr	r1, [pc, #28]	; (8000744 <__NVIC_EnableIRQ+0x38>)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	095b      	lsrs	r3, r3, #5
 800072c:	2001      	movs	r0, #1
 800072e:	fa00 f202 	lsl.w	r2, r0, r2
 8000732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000e100 	.word	0xe000e100

08000748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000758:	2b00      	cmp	r3, #0
 800075a:	db0a      	blt.n	8000772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	b2da      	uxtb	r2, r3
 8000760:	490c      	ldr	r1, [pc, #48]	; (8000794 <__NVIC_SetPriority+0x4c>)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	0112      	lsls	r2, r2, #4
 8000768:	b2d2      	uxtb	r2, r2
 800076a:	440b      	add	r3, r1
 800076c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000770:	e00a      	b.n	8000788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4908      	ldr	r1, [pc, #32]	; (8000798 <__NVIC_SetPriority+0x50>)
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	f003 030f 	and.w	r3, r3, #15
 800077e:	3b04      	subs	r3, #4
 8000780:	0112      	lsls	r2, r2, #4
 8000782:	b2d2      	uxtb	r2, r2
 8000784:	440b      	add	r3, r1
 8000786:	761a      	strb	r2, [r3, #24]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000e100 	.word	0xe000e100
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079c:	b480      	push	{r7}
 800079e:	b089      	sub	sp, #36	; 0x24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	f1c3 0307 	rsb	r3, r3, #7
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	bf28      	it	cs
 80007ba:	2304      	movcs	r3, #4
 80007bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3304      	adds	r3, #4
 80007c2:	2b06      	cmp	r3, #6
 80007c4:	d902      	bls.n	80007cc <NVIC_EncodePriority+0x30>
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3b03      	subs	r3, #3
 80007ca:	e000      	b.n	80007ce <NVIC_EncodePriority+0x32>
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	f04f 32ff 	mov.w	r2, #4294967295
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	43da      	mvns	r2, r3
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	401a      	ands	r2, r3
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e4:	f04f 31ff 	mov.w	r1, #4294967295
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	fa01 f303 	lsl.w	r3, r1, r3
 80007ee:	43d9      	mvns	r1, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	4313      	orrs	r3, r2
         );
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3724      	adds	r7, #36	; 0x24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
	...

08000804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3b01      	subs	r3, #1
 8000810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000814:	d301      	bcc.n	800081a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000816:	2301      	movs	r3, #1
 8000818:	e00f      	b.n	800083a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081a:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <SysTick_Config+0x40>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3b01      	subs	r3, #1
 8000820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000822:	210f      	movs	r1, #15
 8000824:	f04f 30ff 	mov.w	r0, #4294967295
 8000828:	f7ff ff8e 	bl	8000748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <SysTick_Config+0x40>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000832:	4b04      	ldr	r3, [pc, #16]	; (8000844 <SysTick_Config+0x40>)
 8000834:	2207      	movs	r2, #7
 8000836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	e000e010 	.word	0xe000e010

08000848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff ff29 	bl	80006a8 <__NVIC_SetPriorityGrouping>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800085e:	b580      	push	{r7, lr}
 8000860:	b086      	sub	sp, #24
 8000862:	af00      	add	r7, sp, #0
 8000864:	4603      	mov	r3, r0
 8000866:	60b9      	str	r1, [r7, #8]
 8000868:	607a      	str	r2, [r7, #4]
 800086a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000870:	f7ff ff3e 	bl	80006f0 <__NVIC_GetPriorityGrouping>
 8000874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	68b9      	ldr	r1, [r7, #8]
 800087a:	6978      	ldr	r0, [r7, #20]
 800087c:	f7ff ff8e 	bl	800079c <NVIC_EncodePriority>
 8000880:	4602      	mov	r2, r0
 8000882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff5d 	bl	8000748 <__NVIC_SetPriority>
}
 800088e:	bf00      	nop
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ff31 	bl	800070c <__NVIC_EnableIRQ>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff ffa2 	bl	8000804 <SysTick_Config>
 80008c0:	4603      	mov	r3, r0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b083      	sub	sp, #12
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d004      	beq.n	80008e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80008e4:	2301      	movs	r3, #1
 80008e6:	e00c      	b.n	8000902 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2205      	movs	r2, #5
 80008ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f022 0201 	bic.w	r2, r2, #1
 80008fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000910:	b480      	push	{r7}
 8000912:	b089      	sub	sp, #36	; 0x24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
 800092a:	e16b      	b.n	8000c04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800092c:	2201      	movs	r2, #1
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	4013      	ands	r3, r2
 800093e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	429a      	cmp	r2, r3
 8000946:	f040 815a 	bne.w	8000bfe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	2b02      	cmp	r3, #2
 8000950:	d003      	beq.n	800095a <HAL_GPIO_Init+0x4a>
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	2b12      	cmp	r3, #18
 8000958:	d123      	bne.n	80009a2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	08da      	lsrs	r2, r3, #3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3208      	adds	r2, #8
 8000962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	220f      	movs	r2, #15
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43db      	mvns	r3, r3
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	4013      	ands	r3, r2
 800097c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	691a      	ldr	r2, [r3, #16]
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	f003 0307 	and.w	r3, r3, #7
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	69ba      	ldr	r2, [r7, #24]
 8000990:	4313      	orrs	r3, r2
 8000992:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	08da      	lsrs	r2, r3, #3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3208      	adds	r2, #8
 800099c:	69b9      	ldr	r1, [r7, #24]
 800099e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2203      	movs	r2, #3
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	4013      	ands	r3, r2
 80009b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f003 0203 	and.w	r2, r3, #3
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	69ba      	ldr	r2, [r7, #24]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d00b      	beq.n	80009f6 <HAL_GPIO_Init+0xe6>
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d007      	beq.n	80009f6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009ea:	2b11      	cmp	r3, #17
 80009ec:	d003      	beq.n	80009f6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	2b12      	cmp	r3, #18
 80009f4:	d130      	bne.n	8000a58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	2203      	movs	r2, #3
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	68da      	ldr	r2, [r3, #12]
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	69ba      	ldr	r2, [r7, #24]
 8000a24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	43db      	mvns	r3, r3
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	091b      	lsrs	r3, r3, #4
 8000a42:	f003 0201 	and.w	r2, r3, #1
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	2203      	movs	r2, #3
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	69ba      	ldr	r2, [r7, #24]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	689a      	ldr	r2, [r3, #8]
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	f000 80b4 	beq.w	8000bfe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b5f      	ldr	r3, [pc, #380]	; (8000c18 <HAL_GPIO_Init+0x308>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a5e      	ldr	r2, [pc, #376]	; (8000c18 <HAL_GPIO_Init+0x308>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b5c      	ldr	r3, [pc, #368]	; (8000c18 <HAL_GPIO_Init+0x308>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ab2:	4a5a      	ldr	r2, [pc, #360]	; (8000c1c <HAL_GPIO_Init+0x30c>)
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	089b      	lsrs	r3, r3, #2
 8000ab8:	3302      	adds	r3, #2
 8000aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f003 0303 	and.w	r3, r3, #3
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	220f      	movs	r2, #15
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	69ba      	ldr	r2, [r7, #24]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a51      	ldr	r2, [pc, #324]	; (8000c20 <HAL_GPIO_Init+0x310>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d02b      	beq.n	8000b36 <HAL_GPIO_Init+0x226>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a50      	ldr	r2, [pc, #320]	; (8000c24 <HAL_GPIO_Init+0x314>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d025      	beq.n	8000b32 <HAL_GPIO_Init+0x222>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a4f      	ldr	r2, [pc, #316]	; (8000c28 <HAL_GPIO_Init+0x318>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d01f      	beq.n	8000b2e <HAL_GPIO_Init+0x21e>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a4e      	ldr	r2, [pc, #312]	; (8000c2c <HAL_GPIO_Init+0x31c>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d019      	beq.n	8000b2a <HAL_GPIO_Init+0x21a>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a4d      	ldr	r2, [pc, #308]	; (8000c30 <HAL_GPIO_Init+0x320>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d013      	beq.n	8000b26 <HAL_GPIO_Init+0x216>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a4c      	ldr	r2, [pc, #304]	; (8000c34 <HAL_GPIO_Init+0x324>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d00d      	beq.n	8000b22 <HAL_GPIO_Init+0x212>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a4b      	ldr	r2, [pc, #300]	; (8000c38 <HAL_GPIO_Init+0x328>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d007      	beq.n	8000b1e <HAL_GPIO_Init+0x20e>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a4a      	ldr	r2, [pc, #296]	; (8000c3c <HAL_GPIO_Init+0x32c>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d101      	bne.n	8000b1a <HAL_GPIO_Init+0x20a>
 8000b16:	2307      	movs	r3, #7
 8000b18:	e00e      	b.n	8000b38 <HAL_GPIO_Init+0x228>
 8000b1a:	2308      	movs	r3, #8
 8000b1c:	e00c      	b.n	8000b38 <HAL_GPIO_Init+0x228>
 8000b1e:	2306      	movs	r3, #6
 8000b20:	e00a      	b.n	8000b38 <HAL_GPIO_Init+0x228>
 8000b22:	2305      	movs	r3, #5
 8000b24:	e008      	b.n	8000b38 <HAL_GPIO_Init+0x228>
 8000b26:	2304      	movs	r3, #4
 8000b28:	e006      	b.n	8000b38 <HAL_GPIO_Init+0x228>
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	e004      	b.n	8000b38 <HAL_GPIO_Init+0x228>
 8000b2e:	2302      	movs	r3, #2
 8000b30:	e002      	b.n	8000b38 <HAL_GPIO_Init+0x228>
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <HAL_GPIO_Init+0x228>
 8000b36:	2300      	movs	r3, #0
 8000b38:	69fa      	ldr	r2, [r7, #28]
 8000b3a:	f002 0203 	and.w	r2, r2, #3
 8000b3e:	0092      	lsls	r2, r2, #2
 8000b40:	4093      	lsls	r3, r2
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b48:	4934      	ldr	r1, [pc, #208]	; (8000c1c <HAL_GPIO_Init+0x30c>)
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	089b      	lsrs	r3, r3, #2
 8000b4e:	3302      	adds	r3, #2
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b56:	4b3a      	ldr	r3, [pc, #232]	; (8000c40 <HAL_GPIO_Init+0x330>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	4013      	ands	r3, r2
 8000b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b7a:	4a31      	ldr	r2, [pc, #196]	; (8000c40 <HAL_GPIO_Init+0x330>)
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b80:	4b2f      	ldr	r3, [pc, #188]	; (8000c40 <HAL_GPIO_Init+0x330>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	69ba      	ldr	r2, [r7, #24]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d003      	beq.n	8000ba4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ba4:	4a26      	ldr	r2, [pc, #152]	; (8000c40 <HAL_GPIO_Init+0x330>)
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000baa:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <HAL_GPIO_Init+0x330>)
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d003      	beq.n	8000bce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bce:	4a1c      	ldr	r2, [pc, #112]	; (8000c40 <HAL_GPIO_Init+0x330>)
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <HAL_GPIO_Init+0x330>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	69ba      	ldr	r2, [r7, #24]
 8000be0:	4013      	ands	r3, r2
 8000be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d003      	beq.n	8000bf8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000bf8:	4a11      	ldr	r2, [pc, #68]	; (8000c40 <HAL_GPIO_Init+0x330>)
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3301      	adds	r3, #1
 8000c02:	61fb      	str	r3, [r7, #28]
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	2b0f      	cmp	r3, #15
 8000c08:	f67f ae90 	bls.w	800092c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3724      	adds	r7, #36	; 0x24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40013800 	.word	0x40013800
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40020400 	.word	0x40020400
 8000c28:	40020800 	.word	0x40020800
 8000c2c:	40020c00 	.word	0x40020c00
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40021400 	.word	0x40021400
 8000c38:	40021800 	.word	0x40021800
 8000c3c:	40021c00 	.word	0x40021c00
 8000c40:	40013c00 	.word	0x40013c00

08000c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	807b      	strh	r3, [r7, #2]
 8000c50:	4613      	mov	r3, r2
 8000c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c54:	787b      	ldrb	r3, [r7, #1]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d003      	beq.n	8000c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c5a:	887a      	ldrh	r2, [r7, #2]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c60:	e003      	b.n	8000c6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c62:	887b      	ldrh	r3, [r7, #2]
 8000c64:	041a      	lsls	r2, r3, #16
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	619a      	str	r2, [r3, #24]
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	695a      	ldr	r2, [r3, #20]
 8000c86:	887b      	ldrh	r3, [r7, #2]
 8000c88:	401a      	ands	r2, r3
 8000c8a:	887b      	ldrh	r3, [r7, #2]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d104      	bne.n	8000c9a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000c90:	887b      	ldrh	r3, [r7, #2]
 8000c92:	041a      	lsls	r2, r3, #16
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000c98:	e002      	b.n	8000ca0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000c9a:	887a      	ldrh	r2, [r7, #2]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	619a      	str	r2, [r3, #24]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cae:	b08f      	sub	sp, #60	; 0x3c
 8000cb0:	af0a      	add	r7, sp, #40	; 0x28
 8000cb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d101      	bne.n	8000cbe <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e054      	b.n	8000d68 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d106      	bne.n	8000cde <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f008 f8f7 	bl	8008ecc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d102      	bne.n	8000cf8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f004 fc97 	bl	8005630 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	687e      	ldr	r6, [r7, #4]
 8000d0a:	466d      	mov	r5, sp
 8000d0c:	f106 0410 	add.w	r4, r6, #16
 8000d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d20:	1d33      	adds	r3, r6, #4
 8000d22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d24:	6838      	ldr	r0, [r7, #0]
 8000d26:	f004 fc11 	bl	800554c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2101      	movs	r1, #1
 8000d30:	4618      	mov	r0, r3
 8000d32:	f004 fc8e 	bl	8005652 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	687e      	ldr	r6, [r7, #4]
 8000d3e:	466d      	mov	r5, sp
 8000d40:	f106 0410 	add.w	r4, r6, #16
 8000d44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d50:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d54:	1d33      	adds	r3, r6, #4
 8000d56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d58:	6838      	ldr	r0, [r7, #0]
 8000d5a:	f004 fda1 	bl	80058a0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2201      	movs	r2, #1
 8000d62:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d70 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b089      	sub	sp, #36	; 0x24
 8000d74:	af04      	add	r7, sp, #16
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	4608      	mov	r0, r1
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4603      	mov	r3, r0
 8000d80:	70fb      	strb	r3, [r7, #3]
 8000d82:	460b      	mov	r3, r1
 8000d84:	70bb      	strb	r3, [r7, #2]
 8000d86:	4613      	mov	r3, r2
 8000d88:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d101      	bne.n	8000d98 <HAL_HCD_HC_Init+0x28>
 8000d94:	2302      	movs	r3, #2
 8000d96:	e07f      	b.n	8000e98 <HAL_HCD_HC_Init+0x128>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000da0:	78fa      	ldrb	r2, [r7, #3]
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	4613      	mov	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	440b      	add	r3, r1
 8000dae:	333d      	adds	r3, #61	; 0x3d
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000db4:	78fa      	ldrb	r2, [r7, #3]
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	4613      	mov	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4413      	add	r3, r2
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	440b      	add	r3, r1
 8000dc2:	3338      	adds	r3, #56	; 0x38
 8000dc4:	787a      	ldrb	r2, [r7, #1]
 8000dc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000dc8:	78fa      	ldrb	r2, [r7, #3]
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	00db      	lsls	r3, r3, #3
 8000dd4:	440b      	add	r3, r1
 8000dd6:	3340      	adds	r3, #64	; 0x40
 8000dd8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000dda:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000ddc:	78fa      	ldrb	r2, [r7, #3]
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	4613      	mov	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	00db      	lsls	r3, r3, #3
 8000de8:	440b      	add	r3, r1
 8000dea:	3339      	adds	r3, #57	; 0x39
 8000dec:	78fa      	ldrb	r2, [r7, #3]
 8000dee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000df0:	78fa      	ldrb	r2, [r7, #3]
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	4613      	mov	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	440b      	add	r3, r1
 8000dfe:	333f      	adds	r3, #63	; 0x3f
 8000e00:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000e04:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000e06:	78fa      	ldrb	r2, [r7, #3]
 8000e08:	78bb      	ldrb	r3, [r7, #2]
 8000e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e0e:	b2d8      	uxtb	r0, r3
 8000e10:	6879      	ldr	r1, [r7, #4]
 8000e12:	4613      	mov	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4413      	add	r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	440b      	add	r3, r1
 8000e1c:	333a      	adds	r3, #58	; 0x3a
 8000e1e:	4602      	mov	r2, r0
 8000e20:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000e22:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	da0a      	bge.n	8000e40 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000e2a:	78fa      	ldrb	r2, [r7, #3]
 8000e2c:	6879      	ldr	r1, [r7, #4]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	4413      	add	r3, r2
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	440b      	add	r3, r1
 8000e38:	333b      	adds	r3, #59	; 0x3b
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]
 8000e3e:	e009      	b.n	8000e54 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000e40:	78fa      	ldrb	r2, [r7, #3]
 8000e42:	6879      	ldr	r1, [r7, #4]
 8000e44:	4613      	mov	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4413      	add	r3, r2
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	440b      	add	r3, r1
 8000e4e:	333b      	adds	r3, #59	; 0x3b
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000e54:	78fa      	ldrb	r2, [r7, #3]
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	4413      	add	r3, r2
 8000e5e:	00db      	lsls	r3, r3, #3
 8000e60:	440b      	add	r3, r1
 8000e62:	333c      	adds	r3, #60	; 0x3c
 8000e64:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e68:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6818      	ldr	r0, [r3, #0]
 8000e6e:	787c      	ldrb	r4, [r7, #1]
 8000e70:	78ba      	ldrb	r2, [r7, #2]
 8000e72:	78f9      	ldrb	r1, [r7, #3]
 8000e74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e76:	9302      	str	r3, [sp, #8]
 8000e78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e7c:	9301      	str	r3, [sp, #4]
 8000e7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	4623      	mov	r3, r4
 8000e86:	f004 fe8d 	bl	8005ba4 <USB_HC_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd90      	pop	{r4, r7, pc}

08000ea0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d101      	bne.n	8000ebe <HAL_HCD_HC_Halt+0x1e>
 8000eba:	2302      	movs	r3, #2
 8000ebc:	e00f      	b.n	8000ede <HAL_HCD_HC_Halt+0x3e>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	78fa      	ldrb	r2, [r7, #3]
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f005 f8c7 	bl	8006062 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	70fb      	strb	r3, [r7, #3]
 8000efa:	460b      	mov	r3, r1
 8000efc:	70bb      	strb	r3, [r7, #2]
 8000efe:	4613      	mov	r3, r2
 8000f00:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000f02:	78fa      	ldrb	r2, [r7, #3]
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	4613      	mov	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	440b      	add	r3, r1
 8000f10:	333b      	adds	r3, #59	; 0x3b
 8000f12:	78ba      	ldrb	r2, [r7, #2]
 8000f14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000f16:	78fa      	ldrb	r2, [r7, #3]
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	440b      	add	r3, r1
 8000f24:	333f      	adds	r3, #63	; 0x3f
 8000f26:	787a      	ldrb	r2, [r7, #1]
 8000f28:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000f2a:	7c3b      	ldrb	r3, [r7, #16]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d10a      	bne.n	8000f46 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000f30:	78fa      	ldrb	r2, [r7, #3]
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	4613      	mov	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4413      	add	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	440b      	add	r3, r1
 8000f3e:	3342      	adds	r3, #66	; 0x42
 8000f40:	2203      	movs	r2, #3
 8000f42:	701a      	strb	r2, [r3, #0]
 8000f44:	e009      	b.n	8000f5a <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f46:	78fa      	ldrb	r2, [r7, #3]
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	440b      	add	r3, r1
 8000f54:	3342      	adds	r3, #66	; 0x42
 8000f56:	2202      	movs	r2, #2
 8000f58:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000f5a:	787b      	ldrb	r3, [r7, #1]
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	f200 80d6 	bhi.w	800110e <HAL_HCD_HC_SubmitRequest+0x226>
 8000f62:	a201      	add	r2, pc, #4	; (adr r2, 8000f68 <HAL_HCD_HC_SubmitRequest+0x80>)
 8000f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f68:	08000f79 	.word	0x08000f79
 8000f6c:	080010f9 	.word	0x080010f9
 8000f70:	08000fe5 	.word	0x08000fe5
 8000f74:	0800106f 	.word	0x0800106f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000f78:	7c3b      	ldrb	r3, [r7, #16]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	f040 80c9 	bne.w	8001112 <HAL_HCD_HC_SubmitRequest+0x22a>
 8000f80:	78bb      	ldrb	r3, [r7, #2]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f040 80c5 	bne.w	8001112 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8000f88:	8b3b      	ldrh	r3, [r7, #24]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d109      	bne.n	8000fa2 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000f8e:	78fa      	ldrb	r2, [r7, #3]
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	4613      	mov	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	4413      	add	r3, r2
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	440b      	add	r3, r1
 8000f9c:	3351      	adds	r3, #81	; 0x51
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000fa2:	78fa      	ldrb	r2, [r7, #3]
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	440b      	add	r3, r1
 8000fb0:	3351      	adds	r3, #81	; 0x51
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10a      	bne.n	8000fce <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fb8:	78fa      	ldrb	r2, [r7, #3]
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	440b      	add	r3, r1
 8000fc6:	3342      	adds	r3, #66	; 0x42
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000fcc:	e0a1      	b.n	8001112 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000fce:	78fa      	ldrb	r2, [r7, #3]
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	440b      	add	r3, r1
 8000fdc:	3342      	adds	r3, #66	; 0x42
 8000fde:	2202      	movs	r2, #2
 8000fe0:	701a      	strb	r2, [r3, #0]
      break;
 8000fe2:	e096      	b.n	8001112 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000fe4:	78bb      	ldrb	r3, [r7, #2]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d120      	bne.n	800102c <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000fea:	78fa      	ldrb	r2, [r7, #3]
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3351      	adds	r3, #81	; 0x51
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d10a      	bne.n	8001016 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001000:	78fa      	ldrb	r2, [r7, #3]
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	4613      	mov	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	440b      	add	r3, r1
 800100e:	3342      	adds	r3, #66	; 0x42
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001014:	e07e      	b.n	8001114 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001016:	78fa      	ldrb	r2, [r7, #3]
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	4613      	mov	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	440b      	add	r3, r1
 8001024:	3342      	adds	r3, #66	; 0x42
 8001026:	2202      	movs	r2, #2
 8001028:	701a      	strb	r2, [r3, #0]
      break;
 800102a:	e073      	b.n	8001114 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800102c:	78fa      	ldrb	r2, [r7, #3]
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	440b      	add	r3, r1
 800103a:	3350      	adds	r3, #80	; 0x50
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d10a      	bne.n	8001058 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001042:	78fa      	ldrb	r2, [r7, #3]
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	4613      	mov	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	440b      	add	r3, r1
 8001050:	3342      	adds	r3, #66	; 0x42
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
      break;
 8001056:	e05d      	b.n	8001114 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001058:	78fa      	ldrb	r2, [r7, #3]
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	4613      	mov	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	440b      	add	r3, r1
 8001066:	3342      	adds	r3, #66	; 0x42
 8001068:	2202      	movs	r2, #2
 800106a:	701a      	strb	r2, [r3, #0]
      break;
 800106c:	e052      	b.n	8001114 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800106e:	78bb      	ldrb	r3, [r7, #2]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d120      	bne.n	80010b6 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001074:	78fa      	ldrb	r2, [r7, #3]
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	440b      	add	r3, r1
 8001082:	3351      	adds	r3, #81	; 0x51
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10a      	bne.n	80010a0 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800108a:	78fa      	ldrb	r2, [r7, #3]
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	440b      	add	r3, r1
 8001098:	3342      	adds	r3, #66	; 0x42
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800109e:	e039      	b.n	8001114 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80010a0:	78fa      	ldrb	r2, [r7, #3]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	440b      	add	r3, r1
 80010ae:	3342      	adds	r3, #66	; 0x42
 80010b0:	2202      	movs	r2, #2
 80010b2:	701a      	strb	r2, [r3, #0]
      break;
 80010b4:	e02e      	b.n	8001114 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80010b6:	78fa      	ldrb	r2, [r7, #3]
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	440b      	add	r3, r1
 80010c4:	3350      	adds	r3, #80	; 0x50
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10a      	bne.n	80010e2 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80010cc:	78fa      	ldrb	r2, [r7, #3]
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	440b      	add	r3, r1
 80010da:	3342      	adds	r3, #66	; 0x42
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
      break;
 80010e0:	e018      	b.n	8001114 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80010e2:	78fa      	ldrb	r2, [r7, #3]
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	440b      	add	r3, r1
 80010f0:	3342      	adds	r3, #66	; 0x42
 80010f2:	2202      	movs	r2, #2
 80010f4:	701a      	strb	r2, [r3, #0]
      break;
 80010f6:	e00d      	b.n	8001114 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80010f8:	78fa      	ldrb	r2, [r7, #3]
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	440b      	add	r3, r1
 8001106:	3342      	adds	r3, #66	; 0x42
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
      break;
 800110c:	e002      	b.n	8001114 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800110e:	bf00      	nop
 8001110:	e000      	b.n	8001114 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001112:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001114:	78fa      	ldrb	r2, [r7, #3]
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	4613      	mov	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	440b      	add	r3, r1
 8001122:	3344      	adds	r3, #68	; 0x44
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001128:	78fa      	ldrb	r2, [r7, #3]
 800112a:	8b39      	ldrh	r1, [r7, #24]
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	4403      	add	r3, r0
 8001138:	3348      	adds	r3, #72	; 0x48
 800113a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800113c:	78fa      	ldrb	r2, [r7, #3]
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	440b      	add	r3, r1
 800114a:	335c      	adds	r3, #92	; 0x5c
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001150:	78fa      	ldrb	r2, [r7, #3]
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	440b      	add	r3, r1
 800115e:	334c      	adds	r3, #76	; 0x4c
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001164:	78fa      	ldrb	r2, [r7, #3]
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	440b      	add	r3, r1
 8001172:	3339      	adds	r3, #57	; 0x39
 8001174:	78fa      	ldrb	r2, [r7, #3]
 8001176:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001178:	78fa      	ldrb	r2, [r7, #3]
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	440b      	add	r3, r1
 8001186:	335d      	adds	r3, #93	; 0x5d
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	78fa      	ldrb	r2, [r7, #3]
 8001192:	4613      	mov	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	3338      	adds	r3, #56	; 0x38
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	18d1      	adds	r1, r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	461a      	mov	r2, r3
 80011a8:	f004 fe06 	bl	8005db8 <USB_HC_StartXfer>
 80011ac:	4603      	mov	r3, r0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop

080011b8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 fb23 	bl	800581a <USB_GetMode>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	f040 80f1 	bne.w	80013be <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f004 fb07 	bl	80057f4 <USB_ReadInterrupts>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 80e7 	beq.w	80013bc <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f004 fafe 	bl	80057f4 <USB_ReadInterrupts>
 80011f8:	4603      	mov	r3, r0
 80011fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001202:	d104      	bne.n	800120e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800120c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f004 faee 	bl	80057f4 <USB_ReadInterrupts>
 8001218:	4603      	mov	r3, r0
 800121a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001222:	d104      	bne.n	800122e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800122c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f004 fade 	bl	80057f4 <USB_ReadInterrupts>
 8001238:	4603      	mov	r3, r0
 800123a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800123e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001242:	d104      	bne.n	800124e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800124c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f004 face 	bl	80057f4 <USB_ReadInterrupts>
 8001258:	4603      	mov	r3, r0
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b02      	cmp	r3, #2
 8001260:	d103      	bne.n	800126a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2202      	movs	r2, #2
 8001268:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f004 fac0 	bl	80057f4 <USB_ReadInterrupts>
 8001274:	4603      	mov	r3, r0
 8001276:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800127a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800127e:	d117      	bne.n	80012b0 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800128e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001292:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f007 fe97 	bl	8008fc8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2101      	movs	r1, #1
 80012a0:	4618      	mov	r0, r3
 80012a2:	f004 fbb9 	bl	8005a18 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80012ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f004 fa9d 	bl	80057f4 <USB_ReadInterrupts>
 80012ba:	4603      	mov	r3, r0
 80012bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c4:	d102      	bne.n	80012cc <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f001 f8c8 	bl	800245c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f004 fa8f 	bl	80057f4 <USB_ReadInterrupts>
 80012d6:	4603      	mov	r3, r0
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	2b08      	cmp	r3, #8
 80012de:	d106      	bne.n	80012ee <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f007 fe55 	bl	8008f90 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2208      	movs	r2, #8
 80012ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f004 fa7e 	bl	80057f4 <USB_ReadInterrupts>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001302:	d138      	bne.n	8001376 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f004 fe99 	bl	8006040 <USB_HC_ReadInterrupt>
 800130e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	e025      	b.n	8001362 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	f003 030f 	and.w	r3, r3, #15
 800131c:	68ba      	ldr	r2, [r7, #8]
 800131e:	fa22 f303 	lsr.w	r3, r2, r3
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b00      	cmp	r3, #0
 8001328:	d018      	beq.n	800135c <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	015a      	lsls	r2, r3, #5
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4413      	add	r3, r2
 8001332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800133c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001340:	d106      	bne.n	8001350 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	4619      	mov	r1, r3
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 f8cf 	bl	80014ec <HCD_HC_IN_IRQHandler>
 800134e:	e005      	b.n	800135c <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	4619      	mov	r1, r3
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 fc5f 	bl	8001c1a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	3301      	adds	r3, #1
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	429a      	cmp	r2, r3
 800136a:	d3d4      	bcc.n	8001316 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001374:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f004 fa3a 	bl	80057f4 <USB_ReadInterrupts>
 8001380:	4603      	mov	r3, r0
 8001382:	f003 0310 	and.w	r3, r3, #16
 8001386:	2b10      	cmp	r3, #16
 8001388:	d101      	bne.n	800138e <HAL_HCD_IRQHandler+0x1d6>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_HCD_IRQHandler+0x1d8>
 800138e:	2300      	movs	r3, #0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d014      	beq.n	80013be <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	699a      	ldr	r2, [r3, #24]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0210 	bic.w	r2, r2, #16
 80013a2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 ffad 	bl	8002304 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	699a      	ldr	r2, [r3, #24]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f042 0210 	orr.w	r2, r2, #16
 80013b8:	619a      	str	r2, [r3, #24]
 80013ba:	e000      	b.n	80013be <HAL_HCD_IRQHandler+0x206>
      return;
 80013bc:	bf00      	nop
    }
  }
}
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d101      	bne.n	80013da <HAL_HCD_Start+0x16>
 80013d6:	2302      	movs	r3, #2
 80013d8:	e013      	b.n	8001402 <HAL_HCD_Start+0x3e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f004 f911 	bl	800560e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2101      	movs	r1, #1
 80013f2:	4618      	mov	r0, r3
 80013f4:	f004 fb74 	bl	8005ae0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001418:	2b01      	cmp	r3, #1
 800141a:	d101      	bne.n	8001420 <HAL_HCD_Stop+0x16>
 800141c:	2302      	movs	r3, #2
 800141e:	e00d      	b.n	800143c <HAL_HCD_Stop+0x32>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f004 ff53 	bl	80062d8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f004 fb1b 	bl	8005a8c <USB_ResetPort>
 8001456:	4603      	mov	r3, r0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800146c:	78fa      	ldrb	r2, [r7, #3]
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	440b      	add	r3, r1
 800147a:	335c      	adds	r3, #92	; 0x5c
 800147c:	781b      	ldrb	r3, [r3, #0]
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	460b      	mov	r3, r1
 8001494:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001496:	78fa      	ldrb	r2, [r7, #3]
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	440b      	add	r3, r1
 80014a4:	334c      	adds	r3, #76	; 0x4c
 80014a6:	681b      	ldr	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f004 fb5d 	bl	8005b80 <USB_GetCurrentFrame>
 80014c6:	4603      	mov	r3, r0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f004 fb38 	bl	8005b52 <USB_GetHostSpeed>
 80014e2:	4603      	mov	r3, r0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	015a      	lsls	r2, r3, #5
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4413      	add	r3, r2
 800150e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b04      	cmp	r3, #4
 800151a:	d119      	bne.n	8001550 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	015a      	lsls	r2, r3, #5
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4413      	add	r3, r2
 8001524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001528:	461a      	mov	r2, r3
 800152a:	2304      	movs	r3, #4
 800152c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	015a      	lsls	r2, r3, #5
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	4413      	add	r3, r2
 8001536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	0151      	lsls	r1, r2, #5
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	440a      	add	r2, r1
 8001544:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	60d3      	str	r3, [r2, #12]
 800154e:	e095      	b.n	800167c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	015a      	lsls	r2, r3, #5
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4413      	add	r3, r2
 8001558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 0320 	and.w	r3, r3, #32
 8001562:	2b20      	cmp	r3, #32
 8001564:	d109      	bne.n	800157a <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	015a      	lsls	r2, r3, #5
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4413      	add	r3, r2
 800156e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001572:	461a      	mov	r2, r3
 8001574:	2320      	movs	r3, #32
 8001576:	6093      	str	r3, [r2, #8]
 8001578:	e080      	b.n	800167c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	015a      	lsls	r2, r3, #5
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4413      	add	r3, r2
 8001582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	2b08      	cmp	r3, #8
 800158e:	d134      	bne.n	80015fa <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	015a      	lsls	r2, r3, #5
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4413      	add	r3, r2
 8001598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	0151      	lsls	r1, r2, #5
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	440a      	add	r2, r1
 80015a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80015aa:	f043 0302 	orr.w	r3, r3, #2
 80015ae:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	440b      	add	r3, r1
 80015be:	335d      	adds	r3, #93	; 0x5d
 80015c0:	2205      	movs	r2, #5
 80015c2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	015a      	lsls	r2, r3, #5
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4413      	add	r3, r2
 80015cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015d0:	461a      	mov	r2, r3
 80015d2:	2310      	movs	r3, #16
 80015d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	015a      	lsls	r2, r3, #5
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4413      	add	r3, r2
 80015de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015e2:	461a      	mov	r2, r3
 80015e4:	2308      	movs	r3, #8
 80015e6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f004 fd35 	bl	8006062 <USB_HC_Halt>
 80015f8:	e040      	b.n	800167c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	015a      	lsls	r2, r3, #5
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4413      	add	r3, r2
 8001602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001610:	d134      	bne.n	800167c <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	015a      	lsls	r2, r3, #5
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	4413      	add	r3, r2
 800161a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	0151      	lsls	r1, r2, #5
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	440a      	add	r2, r1
 8001628:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	4611      	mov	r1, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f004 fd10 	bl	8006062 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	015a      	lsls	r2, r3, #5
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4413      	add	r3, r2
 800164a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800164e:	461a      	mov	r2, r3
 8001650:	2310      	movs	r3, #16
 8001652:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	440b      	add	r3, r1
 8001662:	335d      	adds	r3, #93	; 0x5d
 8001664:	2208      	movs	r2, #8
 8001666:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	015a      	lsls	r2, r3, #5
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	4413      	add	r3, r2
 8001670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001674:	461a      	mov	r2, r3
 8001676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800167a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	015a      	lsls	r2, r3, #5
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4413      	add	r3, r2
 8001684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800168e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001692:	d122      	bne.n	80016da <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	015a      	lsls	r2, r3, #5
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	4413      	add	r3, r2
 800169c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	0151      	lsls	r1, r2, #5
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	440a      	add	r2, r1
 80016aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016ae:	f043 0302 	orr.w	r3, r3, #2
 80016b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	4611      	mov	r1, r2
 80016be:	4618      	mov	r0, r3
 80016c0:	f004 fccf 	bl	8006062 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	015a      	lsls	r2, r3, #5
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4413      	add	r3, r2
 80016cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016d0:	461a      	mov	r2, r3
 80016d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016d6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80016d8:	e29b      	b.n	8001c12 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	015a      	lsls	r2, r3, #5
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4413      	add	r3, r2
 80016e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	f040 80c1 	bne.w	8001874 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d01b      	beq.n	8001732 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	440b      	add	r3, r1
 8001708:	3348      	adds	r3, #72	; 0x48
 800170a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	0159      	lsls	r1, r3, #5
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	440b      	add	r3, r1
 8001714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800171e:	1ad1      	subs	r1, r2, r3
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4403      	add	r3, r0
 800172e:	334c      	adds	r3, #76	; 0x4c
 8001730:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	440b      	add	r3, r1
 8001740:	335d      	adds	r3, #93	; 0x5d
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	440b      	add	r3, r1
 8001754:	3358      	adds	r3, #88	; 0x58
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	015a      	lsls	r2, r3, #5
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	4413      	add	r3, r2
 8001762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001766:	461a      	mov	r2, r3
 8001768:	2301      	movs	r3, #1
 800176a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	440b      	add	r3, r1
 800177a:	333f      	adds	r3, #63	; 0x3f
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00a      	beq.n	8001798 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	440b      	add	r3, r1
 8001790:	333f      	adds	r3, #63	; 0x3f
 8001792:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001794:	2b02      	cmp	r3, #2
 8001796:	d121      	bne.n	80017dc <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	015a      	lsls	r2, r3, #5
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4413      	add	r3, r2
 80017a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	0151      	lsls	r1, r2, #5
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	440a      	add	r2, r1
 80017ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017b2:	f043 0302 	orr.w	r3, r3, #2
 80017b6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	4611      	mov	r1, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f004 fc4d 	bl	8006062 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	015a      	lsls	r2, r3, #5
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4413      	add	r3, r2
 80017d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017d4:	461a      	mov	r2, r3
 80017d6:	2310      	movs	r3, #16
 80017d8:	6093      	str	r3, [r2, #8]
 80017da:	e034      	b.n	8001846 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	440b      	add	r3, r1
 80017ea:	333f      	adds	r3, #63	; 0x3f
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d129      	bne.n	8001846 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	015a      	lsls	r2, r3, #5
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4413      	add	r3, r2
 80017fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	0151      	lsls	r1, r2, #5
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	440a      	add	r2, r1
 8001808:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800180c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001810:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	440b      	add	r3, r1
 8001820:	335c      	adds	r3, #92	; 0x5c
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	b2d8      	uxtb	r0, r3
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
 8001838:	335c      	adds	r3, #92	; 0x5c
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4601      	mov	r1, r0
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f007 fbcf 	bl	8008fe4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	440b      	add	r3, r1
 8001854:	3350      	adds	r3, #80	; 0x50
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	f083 0301 	eor.w	r3, r3, #1
 800185c:	b2d8      	uxtb	r0, r3
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	440b      	add	r3, r1
 800186c:	3350      	adds	r3, #80	; 0x50
 800186e:	4602      	mov	r2, r0
 8001870:	701a      	strb	r2, [r3, #0]
}
 8001872:	e1ce      	b.n	8001c12 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	015a      	lsls	r2, r3, #5
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4413      	add	r3, r2
 800187c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b02      	cmp	r3, #2
 8001888:	f040 80f1 	bne.w	8001a6e <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	015a      	lsls	r2, r3, #5
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4413      	add	r3, r2
 8001894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	0151      	lsls	r1, r2, #5
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	440a      	add	r2, r1
 80018a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018a6:	f023 0302 	bic.w	r3, r3, #2
 80018aa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	440b      	add	r3, r1
 80018ba:	335d      	adds	r3, #93	; 0x5d
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d10a      	bne.n	80018d8 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	440b      	add	r3, r1
 80018d0:	335c      	adds	r3, #92	; 0x5c
 80018d2:	2201      	movs	r2, #1
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	e0b0      	b.n	8001a3a <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	440b      	add	r3, r1
 80018e6:	335d      	adds	r3, #93	; 0x5d
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b05      	cmp	r3, #5
 80018ec:	d10a      	bne.n	8001904 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	440b      	add	r3, r1
 80018fc:	335c      	adds	r3, #92	; 0x5c
 80018fe:	2205      	movs	r2, #5
 8001900:	701a      	strb	r2, [r3, #0]
 8001902:	e09a      	b.n	8001a3a <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	440b      	add	r3, r1
 8001912:	335d      	adds	r3, #93	; 0x5d
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b06      	cmp	r3, #6
 8001918:	d00a      	beq.n	8001930 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	440b      	add	r3, r1
 8001928:	335d      	adds	r3, #93	; 0x5d
 800192a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800192c:	2b08      	cmp	r3, #8
 800192e:	d156      	bne.n	80019de <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	440b      	add	r3, r1
 800193e:	3358      	adds	r3, #88	; 0x58
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	1c59      	adds	r1, r3, #1
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4403      	add	r3, r0
 8001952:	3358      	adds	r3, #88	; 0x58
 8001954:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	440b      	add	r3, r1
 8001964:	3358      	adds	r3, #88	; 0x58
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b03      	cmp	r3, #3
 800196a:	d914      	bls.n	8001996 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	440b      	add	r3, r1
 800197a:	3358      	adds	r3, #88	; 0x58
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	440b      	add	r3, r1
 800198e:	335c      	adds	r3, #92	; 0x5c
 8001990:	2204      	movs	r2, #4
 8001992:	701a      	strb	r2, [r3, #0]
 8001994:	e009      	b.n	80019aa <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	440b      	add	r3, r1
 80019a4:	335c      	adds	r3, #92	; 0x5c
 80019a6:	2202      	movs	r2, #2
 80019a8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	015a      	lsls	r2, r3, #5
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80019c0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019c8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	015a      	lsls	r2, r3, #5
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4413      	add	r3, r2
 80019d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019d6:	461a      	mov	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	e02d      	b.n	8001a3a <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	440b      	add	r3, r1
 80019ec:	335d      	adds	r3, #93	; 0x5d
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d122      	bne.n	8001a3a <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	440b      	add	r3, r1
 8001a02:	335c      	adds	r3, #92	; 0x5c
 8001a04:	2202      	movs	r2, #2
 8001a06:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	015a      	lsls	r2, r3, #5
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	4413      	add	r3, r2
 8001a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001a1e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a26:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	015a      	lsls	r2, r3, #5
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4413      	add	r3, r2
 8001a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a34:	461a      	mov	r2, r3
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	015a      	lsls	r2, r3, #5
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4413      	add	r3, r2
 8001a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a46:	461a      	mov	r2, r3
 8001a48:	2302      	movs	r3, #2
 8001a4a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	b2d8      	uxtb	r0, r3
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	440b      	add	r3, r1
 8001a5e:	335c      	adds	r3, #92	; 0x5c
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	4601      	mov	r1, r0
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f007 fabc 	bl	8008fe4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001a6c:	e0d1      	b.n	8001c12 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	015a      	lsls	r2, r3, #5
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4413      	add	r3, r2
 8001a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a80:	2b80      	cmp	r3, #128	; 0x80
 8001a82:	d13e      	bne.n	8001b02 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	015a      	lsls	r2, r3, #5
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	0151      	lsls	r1, r2, #5
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	440a      	add	r2, r1
 8001a9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a9e:	f043 0302 	orr.w	r3, r3, #2
 8001aa2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3358      	adds	r3, #88	; 0x58
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	1c59      	adds	r1, r3, #1
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	4403      	add	r3, r0
 8001ac6:	3358      	adds	r3, #88	; 0x58
 8001ac8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	440b      	add	r3, r1
 8001ad8:	335d      	adds	r3, #93	; 0x5d
 8001ada:	2206      	movs	r2, #6
 8001adc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f004 faba 	bl	8006062 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	015a      	lsls	r2, r3, #5
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	4413      	add	r3, r2
 8001af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001afa:	461a      	mov	r2, r3
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	6093      	str	r3, [r2, #8]
}
 8001b00:	e087      	b.n	8001c12 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	015a      	lsls	r2, r3, #5
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4413      	add	r3, r2
 8001b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	2b10      	cmp	r3, #16
 8001b16:	d17c      	bne.n	8001c12 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	440b      	add	r3, r1
 8001b26:	333f      	adds	r3, #63	; 0x3f
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d122      	bne.n	8001b74 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	440b      	add	r3, r1
 8001b3c:	3358      	adds	r3, #88	; 0x58
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	015a      	lsls	r2, r3, #5
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4413      	add	r3, r2
 8001b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	0151      	lsls	r1, r2, #5
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	440a      	add	r2, r1
 8001b58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b5c:	f043 0302 	orr.w	r3, r3, #2
 8001b60:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f004 fa78 	bl	8006062 <USB_HC_Halt>
 8001b72:	e045      	b.n	8001c00 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	440b      	add	r3, r1
 8001b82:	333f      	adds	r3, #63	; 0x3f
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00a      	beq.n	8001ba0 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	440b      	add	r3, r1
 8001b98:	333f      	adds	r3, #63	; 0x3f
 8001b9a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d12f      	bne.n	8001c00 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	440b      	add	r3, r1
 8001bae:	3358      	adds	r3, #88	; 0x58
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d121      	bne.n	8001c00 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	440b      	add	r3, r1
 8001bca:	335d      	adds	r3, #93	; 0x5d
 8001bcc:	2203      	movs	r2, #3
 8001bce:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	015a      	lsls	r2, r3, #5
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	0151      	lsls	r1, r2, #5
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	440a      	add	r2, r1
 8001be6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bea:	f043 0302 	orr.w	r3, r3, #2
 8001bee:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f004 fa31 	bl	8006062 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	015a      	lsls	r2, r3, #5
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4413      	add	r3, r2
 8001c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	2310      	movs	r3, #16
 8001c10:	6093      	str	r3, [r2, #8]
}
 8001c12:	bf00      	nop
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c30:	78fb      	ldrb	r3, [r7, #3]
 8001c32:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	015a      	lsls	r2, r3, #5
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d119      	bne.n	8001c7e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	015a      	lsls	r2, r3, #5
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4413      	add	r3, r2
 8001c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c56:	461a      	mov	r2, r3
 8001c58:	2304      	movs	r3, #4
 8001c5a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	015a      	lsls	r2, r3, #5
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4413      	add	r3, r2
 8001c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	0151      	lsls	r1, r2, #5
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	440a      	add	r2, r1
 8001c72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c76:	f043 0302 	orr.w	r3, r3, #2
 8001c7a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001c7c:	e33e      	b.n	80022fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	015a      	lsls	r2, r3, #5
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4413      	add	r3, r2
 8001c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 0320 	and.w	r3, r3, #32
 8001c90:	2b20      	cmp	r3, #32
 8001c92:	d141      	bne.n	8001d18 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	015a      	lsls	r2, r3, #5
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	2320      	movs	r3, #32
 8001ca4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	440b      	add	r3, r1
 8001cb4:	333d      	adds	r3, #61	; 0x3d
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	f040 831f 	bne.w	80022fc <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	440b      	add	r3, r1
 8001ccc:	333d      	adds	r3, #61	; 0x3d
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	440b      	add	r3, r1
 8001ce0:	335c      	adds	r3, #92	; 0x5c
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	015a      	lsls	r2, r3, #5
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4413      	add	r3, r2
 8001cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	0151      	lsls	r1, r2, #5
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	440a      	add	r2, r1
 8001cfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d00:	f043 0302 	orr.w	r3, r3, #2
 8001d04:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f004 f9a6 	bl	8006062 <USB_HC_Halt>
}
 8001d16:	e2f1      	b.n	80022fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	015a      	lsls	r2, r3, #5
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4413      	add	r3, r2
 8001d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2a:	2b40      	cmp	r3, #64	; 0x40
 8001d2c:	d13f      	bne.n	8001dae <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	335d      	adds	r3, #93	; 0x5d
 8001d3e:	2204      	movs	r2, #4
 8001d40:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	440b      	add	r3, r1
 8001d50:	333d      	adds	r3, #61	; 0x3d
 8001d52:	2201      	movs	r2, #1
 8001d54:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	440b      	add	r3, r1
 8001d64:	3358      	adds	r3, #88	; 0x58
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	0151      	lsls	r1, r2, #5
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	440a      	add	r2, r1
 8001d80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f004 f964 	bl	8006062 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	015a      	lsls	r2, r3, #5
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da6:	461a      	mov	r2, r3
 8001da8:	2340      	movs	r3, #64	; 0x40
 8001daa:	6093      	str	r3, [r2, #8]
}
 8001dac:	e2a6      	b.n	80022fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	015a      	lsls	r2, r3, #5
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4413      	add	r3, r2
 8001db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dc4:	d122      	bne.n	8001e0c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	0151      	lsls	r1, r2, #5
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	440a      	add	r2, r1
 8001ddc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f004 f936 	bl	8006062 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	015a      	lsls	r2, r3, #5
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e02:	461a      	mov	r2, r3
 8001e04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e08:	6093      	str	r3, [r2, #8]
}
 8001e0a:	e277      	b.n	80022fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	015a      	lsls	r2, r3, #5
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d135      	bne.n	8001e8e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	440b      	add	r3, r1
 8001e30:	3358      	adds	r3, #88	; 0x58
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	015a      	lsls	r2, r3, #5
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	0151      	lsls	r1, r2, #5
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	440a      	add	r2, r1
 8001e4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e50:	f043 0302 	orr.w	r3, r3, #2
 8001e54:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f004 f8fe 	bl	8006062 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	015a      	lsls	r2, r3, #5
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e72:	461a      	mov	r2, r3
 8001e74:	2301      	movs	r3, #1
 8001e76:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	440b      	add	r3, r1
 8001e86:	335d      	adds	r3, #93	; 0x5d
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
}
 8001e8c:	e236      	b.n	80022fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d12b      	bne.n	8001efc <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	2308      	movs	r3, #8
 8001eb4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	0151      	lsls	r1, r2, #5
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	440a      	add	r2, r1
 8001ecc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f004 f8be 	bl	8006062 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	440b      	add	r3, r1
 8001ef4:	335d      	adds	r3, #93	; 0x5d
 8001ef6:	2205      	movs	r2, #5
 8001ef8:	701a      	strb	r2, [r3, #0]
}
 8001efa:	e1ff      	b.n	80022fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	015a      	lsls	r2, r3, #5
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	2b10      	cmp	r3, #16
 8001f10:	d155      	bne.n	8001fbe <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	440b      	add	r3, r1
 8001f20:	3358      	adds	r3, #88	; 0x58
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	440b      	add	r3, r1
 8001f34:	335d      	adds	r3, #93	; 0x5d
 8001f36:	2203      	movs	r2, #3
 8001f38:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	440b      	add	r3, r1
 8001f48:	333d      	adds	r3, #61	; 0x3d
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d114      	bne.n	8001f7a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	333c      	adds	r3, #60	; 0x3c
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d109      	bne.n	8001f7a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	440b      	add	r3, r1
 8001f74:	333d      	adds	r3, #61	; 0x3d
 8001f76:	2201      	movs	r2, #1
 8001f78:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	015a      	lsls	r2, r3, #5
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4413      	add	r3, r2
 8001f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	0151      	lsls	r1, r2, #5
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	440a      	add	r2, r1
 8001f90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f94:	f043 0302 	orr.w	r3, r3, #2
 8001f98:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f004 f85c 	bl	8006062 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	015a      	lsls	r2, r3, #5
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	2310      	movs	r3, #16
 8001fba:	6093      	str	r3, [r2, #8]
}
 8001fbc:	e19e      	b.n	80022fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd0:	2b80      	cmp	r3, #128	; 0x80
 8001fd2:	d12b      	bne.n	800202c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	0151      	lsls	r1, r2, #5
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	440a      	add	r2, r1
 8001fea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fee:	f043 0302 	orr.w	r3, r3, #2
 8001ff2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f004 f82f 	bl	8006062 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	440b      	add	r3, r1
 8002012:	335d      	adds	r3, #93	; 0x5d
 8002014:	2206      	movs	r2, #6
 8002016:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	015a      	lsls	r2, r3, #5
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4413      	add	r3, r2
 8002020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002024:	461a      	mov	r2, r3
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	6093      	str	r3, [r2, #8]
}
 800202a:	e167      	b.n	80022fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	015a      	lsls	r2, r3, #5
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4413      	add	r3, r2
 8002034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002042:	d135      	bne.n	80020b0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	015a      	lsls	r2, r3, #5
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4413      	add	r3, r2
 800204c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	0151      	lsls	r1, r2, #5
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	440a      	add	r2, r1
 800205a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800205e:	f043 0302 	orr.w	r3, r3, #2
 8002062:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	4611      	mov	r1, r2
 800206e:	4618      	mov	r0, r3
 8002070:	f003 fff7 	bl	8006062 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4413      	add	r3, r2
 800207c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002080:	461a      	mov	r2, r3
 8002082:	2310      	movs	r3, #16
 8002084:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4413      	add	r3, r2
 800208e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002092:	461a      	mov	r2, r3
 8002094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002098:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	440b      	add	r3, r1
 80020a8:	335d      	adds	r3, #93	; 0x5d
 80020aa:	2208      	movs	r2, #8
 80020ac:	701a      	strb	r2, [r3, #0]
}
 80020ae:	e125      	b.n	80022fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	f040 811a 	bne.w	80022fc <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	0151      	lsls	r1, r2, #5
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	440a      	add	r2, r1
 80020de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020e2:	f023 0302 	bic.w	r3, r3, #2
 80020e6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	440b      	add	r3, r1
 80020f6:	335d      	adds	r3, #93	; 0x5d
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d137      	bne.n	800216e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	440b      	add	r3, r1
 800210c:	335c      	adds	r3, #92	; 0x5c
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	440b      	add	r3, r1
 8002120:	333f      	adds	r3, #63	; 0x3f
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d00b      	beq.n	8002140 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	440b      	add	r3, r1
 8002136:	333f      	adds	r3, #63	; 0x3f
 8002138:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800213a:	2b03      	cmp	r3, #3
 800213c:	f040 80c5 	bne.w	80022ca <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	440b      	add	r3, r1
 800214e:	3351      	adds	r3, #81	; 0x51
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	f083 0301 	eor.w	r3, r3, #1
 8002156:	b2d8      	uxtb	r0, r3
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	440b      	add	r3, r1
 8002166:	3351      	adds	r3, #81	; 0x51
 8002168:	4602      	mov	r2, r0
 800216a:	701a      	strb	r2, [r3, #0]
 800216c:	e0ad      	b.n	80022ca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	440b      	add	r3, r1
 800217c:	335d      	adds	r3, #93	; 0x5d
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b03      	cmp	r3, #3
 8002182:	d10a      	bne.n	800219a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	440b      	add	r3, r1
 8002192:	335c      	adds	r3, #92	; 0x5c
 8002194:	2202      	movs	r2, #2
 8002196:	701a      	strb	r2, [r3, #0]
 8002198:	e097      	b.n	80022ca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	440b      	add	r3, r1
 80021a8:	335d      	adds	r3, #93	; 0x5d
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d10a      	bne.n	80021c6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	440b      	add	r3, r1
 80021be:	335c      	adds	r3, #92	; 0x5c
 80021c0:	2202      	movs	r2, #2
 80021c2:	701a      	strb	r2, [r3, #0]
 80021c4:	e081      	b.n	80022ca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	440b      	add	r3, r1
 80021d4:	335d      	adds	r3, #93	; 0x5d
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b05      	cmp	r3, #5
 80021da:	d10a      	bne.n	80021f2 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	440b      	add	r3, r1
 80021ea:	335c      	adds	r3, #92	; 0x5c
 80021ec:	2205      	movs	r2, #5
 80021ee:	701a      	strb	r2, [r3, #0]
 80021f0:	e06b      	b.n	80022ca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	440b      	add	r3, r1
 8002200:	335d      	adds	r3, #93	; 0x5d
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b06      	cmp	r3, #6
 8002206:	d00a      	beq.n	800221e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	440b      	add	r3, r1
 8002216:	335d      	adds	r3, #93	; 0x5d
 8002218:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800221a:	2b08      	cmp	r3, #8
 800221c:	d155      	bne.n	80022ca <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	440b      	add	r3, r1
 800222c:	3358      	adds	r3, #88	; 0x58
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	1c59      	adds	r1, r3, #1
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4403      	add	r3, r0
 8002240:	3358      	adds	r3, #88	; 0x58
 8002242:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	440b      	add	r3, r1
 8002252:	3358      	adds	r3, #88	; 0x58
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b03      	cmp	r3, #3
 8002258:	d914      	bls.n	8002284 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	440b      	add	r3, r1
 8002268:	3358      	adds	r3, #88	; 0x58
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	440b      	add	r3, r1
 800227c:	335c      	adds	r3, #92	; 0x5c
 800227e:	2204      	movs	r2, #4
 8002280:	701a      	strb	r2, [r3, #0]
 8002282:	e009      	b.n	8002298 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	440b      	add	r3, r1
 8002292:	335c      	adds	r3, #92	; 0x5c
 8002294:	2202      	movs	r2, #2
 8002296:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022ae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022b6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c4:	461a      	mov	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d6:	461a      	mov	r2, r3
 80022d8:	2302      	movs	r3, #2
 80022da:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	b2d8      	uxtb	r0, r3
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	440b      	add	r3, r1
 80022ee:	335c      	adds	r3, #92	; 0x5c
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	4601      	mov	r1, r0
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f006 fe74 	bl	8008fe4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022fc:	bf00      	nop
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	0c5b      	lsrs	r3, r3, #17
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002338:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d003      	beq.n	8002348 <HCD_RXQLVL_IRQHandler+0x44>
 8002340:	2b05      	cmp	r3, #5
 8002342:	f000 8082 	beq.w	800244a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002346:	e083      	b.n	8002450 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d07f      	beq.n	800244e <HCD_RXQLVL_IRQHandler+0x14a>
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	440b      	add	r3, r1
 800235c:	3344      	adds	r3, #68	; 0x44
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d074      	beq.n	800244e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	440b      	add	r3, r1
 8002376:	3344      	adds	r3, #68	; 0x44
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	b292      	uxth	r2, r2
 800237e:	4619      	mov	r1, r3
 8002380:	f003 fa0f 	bl	80057a2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	440b      	add	r3, r1
 8002392:	3344      	adds	r3, #68	; 0x44
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	18d1      	adds	r1, r2, r3
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4403      	add	r3, r0
 80023a8:	3344      	adds	r3, #68	; 0x44
 80023aa:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	440b      	add	r3, r1
 80023ba:	334c      	adds	r3, #76	; 0x4c
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	18d1      	adds	r1, r2, r3
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4403      	add	r3, r0
 80023d0:	334c      	adds	r3, #76	; 0x4c
 80023d2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HCD_RXQLVL_IRQHandler+0x154>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d031      	beq.n	800244e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	015a      	lsls	r2, r3, #5
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002400:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002408:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	015a      	lsls	r2, r3, #5
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	4413      	add	r3, r2
 8002412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002416:	461a      	mov	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	440b      	add	r3, r1
 800242a:	3350      	adds	r3, #80	; 0x50
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	f083 0301 	eor.w	r3, r3, #1
 8002432:	b2d8      	uxtb	r0, r3
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	440b      	add	r3, r1
 8002442:	3350      	adds	r3, #80	; 0x50
 8002444:	4602      	mov	r2, r0
 8002446:	701a      	strb	r2, [r3, #0]
      break;
 8002448:	e001      	b.n	800244e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800244a:	bf00      	nop
 800244c:	e000      	b.n	8002450 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800244e:	bf00      	nop
  }
}
 8002450:	bf00      	nop
 8002452:	3728      	adds	r7, #40	; 0x28
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	1ff80000 	.word	0x1ff80000

0800245c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002488:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b02      	cmp	r3, #2
 8002492:	d113      	bne.n	80024bc <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b01      	cmp	r3, #1
 800249c:	d10a      	bne.n	80024b4 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699a      	ldr	r2, [r3, #24]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80024ac:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f006 fd7c 	bl	8008fac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	f043 0302 	orr.w	r3, r3, #2
 80024ba:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d147      	bne.n	8002556 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	f043 0308 	orr.w	r3, r3, #8
 80024cc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d129      	bne.n	800252c <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d113      	bne.n	8002508 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80024e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024ea:	d106      	bne.n	80024fa <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2102      	movs	r1, #2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f003 fa90 	bl	8005a18 <USB_InitFSLSPClkSel>
 80024f8:	e011      	b.n	800251e <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2101      	movs	r1, #1
 8002500:	4618      	mov	r0, r3
 8002502:	f003 fa89 	bl	8005a18 <USB_InitFSLSPClkSel>
 8002506:	e00a      	b.n	800251e <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d106      	bne.n	800251e <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002516:	461a      	mov	r2, r3
 8002518:	f64e 2360 	movw	r3, #60000	; 0xea60
 800251c:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f006 fd6e 	bl	8009000 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f006 fd41 	bl	8008fac <HAL_HCD_Connect_Callback>
 800252a:	e014      	b.n	8002556 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f006 fd75 	bl	800901c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002540:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002544:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699a      	ldr	r2, [r3, #24]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002554:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b20      	cmp	r3, #32
 800255e:	d103      	bne.n	8002568 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f043 0320 	orr.w	r3, r3, #32
 8002566:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800256e:	461a      	mov	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	6013      	str	r3, [r2, #0]
}
 8002574:	bf00      	nop
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e10f      	b.n	80027ae <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d106      	bne.n	80025a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f006 f940 	bl	8008828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2224      	movs	r2, #36	; 0x24
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0201 	bic.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025c0:	f001 f9ac 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 80025c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4a7b      	ldr	r2, [pc, #492]	; (80027b8 <HAL_I2C_Init+0x23c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d807      	bhi.n	80025e0 <HAL_I2C_Init+0x64>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4a7a      	ldr	r2, [pc, #488]	; (80027bc <HAL_I2C_Init+0x240>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	bf94      	ite	ls
 80025d8:	2301      	movls	r3, #1
 80025da:	2300      	movhi	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	e006      	b.n	80025ee <HAL_I2C_Init+0x72>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4a77      	ldr	r2, [pc, #476]	; (80027c0 <HAL_I2C_Init+0x244>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	bf94      	ite	ls
 80025e8:	2301      	movls	r3, #1
 80025ea:	2300      	movhi	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e0db      	b.n	80027ae <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4a72      	ldr	r2, [pc, #456]	; (80027c4 <HAL_I2C_Init+0x248>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	0c9b      	lsrs	r3, r3, #18
 8002600:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	430a      	orrs	r2, r1
 8002614:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	4a64      	ldr	r2, [pc, #400]	; (80027b8 <HAL_I2C_Init+0x23c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d802      	bhi.n	8002630 <HAL_I2C_Init+0xb4>
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	3301      	adds	r3, #1
 800262e:	e009      	b.n	8002644 <HAL_I2C_Init+0xc8>
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002636:	fb02 f303 	mul.w	r3, r2, r3
 800263a:	4a63      	ldr	r2, [pc, #396]	; (80027c8 <HAL_I2C_Init+0x24c>)
 800263c:	fba2 2303 	umull	r2, r3, r2, r3
 8002640:	099b      	lsrs	r3, r3, #6
 8002642:	3301      	adds	r3, #1
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	430b      	orrs	r3, r1
 800264a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002656:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4956      	ldr	r1, [pc, #344]	; (80027b8 <HAL_I2C_Init+0x23c>)
 8002660:	428b      	cmp	r3, r1
 8002662:	d80d      	bhi.n	8002680 <HAL_I2C_Init+0x104>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1e59      	subs	r1, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002672:	3301      	adds	r3, #1
 8002674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002678:	2b04      	cmp	r3, #4
 800267a:	bf38      	it	cc
 800267c:	2304      	movcc	r3, #4
 800267e:	e04f      	b.n	8002720 <HAL_I2C_Init+0x1a4>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d111      	bne.n	80026ac <HAL_I2C_Init+0x130>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1e58      	subs	r0, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6859      	ldr	r1, [r3, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	440b      	add	r3, r1
 8002696:	fbb0 f3f3 	udiv	r3, r0, r3
 800269a:	3301      	adds	r3, #1
 800269c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	bf0c      	ite	eq
 80026a4:	2301      	moveq	r3, #1
 80026a6:	2300      	movne	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	e012      	b.n	80026d2 <HAL_I2C_Init+0x156>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1e58      	subs	r0, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	0099      	lsls	r1, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c2:	3301      	adds	r3, #1
 80026c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	bf0c      	ite	eq
 80026cc:	2301      	moveq	r3, #1
 80026ce:	2300      	movne	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_I2C_Init+0x15e>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e022      	b.n	8002720 <HAL_I2C_Init+0x1a4>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10e      	bne.n	8002700 <HAL_I2C_Init+0x184>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1e58      	subs	r0, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6859      	ldr	r1, [r3, #4]
 80026ea:	460b      	mov	r3, r1
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	440b      	add	r3, r1
 80026f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f4:	3301      	adds	r3, #1
 80026f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026fe:	e00f      	b.n	8002720 <HAL_I2C_Init+0x1a4>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	1e58      	subs	r0, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6859      	ldr	r1, [r3, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	0099      	lsls	r1, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	fbb0 f3f3 	udiv	r3, r0, r3
 8002716:	3301      	adds	r3, #1
 8002718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800271c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	6809      	ldr	r1, [r1, #0]
 8002724:	4313      	orrs	r3, r2
 8002726:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69da      	ldr	r2, [r3, #28]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800274e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6911      	ldr	r1, [r2, #16]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	68d2      	ldr	r2, [r2, #12]
 800275a:	4311      	orrs	r1, r2
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	430b      	orrs	r3, r1
 8002762:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695a      	ldr	r2, [r3, #20]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	000186a0 	.word	0x000186a0
 80027bc:	001e847f 	.word	0x001e847f
 80027c0:	003d08ff 	.word	0x003d08ff
 80027c4:	431bde83 	.word	0x431bde83
 80027c8:	10624dd3 	.word	0x10624dd3

080027cc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e128      	b.n	8002a30 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a90      	ldr	r2, [pc, #576]	; (8002a38 <HAL_I2S_Init+0x26c>)
 80027f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f006 f85d 	bl	80088b8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2202      	movs	r2, #2
 8002802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002814:	f023 030f 	bic.w	r3, r3, #15
 8002818:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2202      	movs	r2, #2
 8002820:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d060      	beq.n	80028ec <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d102      	bne.n	8002838 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002832:	2310      	movs	r3, #16
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	e001      	b.n	800283c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002838:	2320      	movs	r3, #32
 800283a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b20      	cmp	r3, #32
 8002842:	d802      	bhi.n	800284a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800284a:	2001      	movs	r0, #1
 800284c:	f001 f970 	bl	8003b30 <HAL_RCCEx_GetPeriphCLKFreq>
 8002850:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800285a:	d125      	bne.n	80028a8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d010      	beq.n	8002886 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	fbb2 f2f3 	udiv	r2, r2, r3
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	461a      	mov	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	3305      	adds	r3, #5
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	e01f      	b.n	80028c6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	461a      	mov	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a2:	3305      	adds	r3, #5
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	e00e      	b.n	80028c6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	461a      	mov	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c2:	3305      	adds	r3, #5
 80028c4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4a5c      	ldr	r2, [pc, #368]	; (8002a3c <HAL_I2S_Init+0x270>)
 80028ca:	fba2 2303 	umull	r2, r3, r2, r3
 80028ce:	08db      	lsrs	r3, r3, #3
 80028d0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	085b      	lsrs	r3, r3, #1
 80028e2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	61bb      	str	r3, [r7, #24]
 80028ea:	e003      	b.n	80028f4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80028ec:	2302      	movs	r3, #2
 80028ee:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d902      	bls.n	8002900 <HAL_I2S_Init+0x134>
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	2bff      	cmp	r3, #255	; 0xff
 80028fe:	d907      	bls.n	8002910 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	f043 0210 	orr.w	r2, r3, #16
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e08f      	b.n	8002a30 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	ea42 0103 	orr.w	r1, r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	69fa      	ldr	r2, [r7, #28]
 8002920:	430a      	orrs	r2, r1
 8002922:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800292e:	f023 030f 	bic.w	r3, r3, #15
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6851      	ldr	r1, [r2, #4]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6892      	ldr	r2, [r2, #8]
 800293a:	4311      	orrs	r1, r2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	68d2      	ldr	r2, [r2, #12]
 8002940:	4311      	orrs	r1, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6992      	ldr	r2, [r2, #24]
 8002946:	430a      	orrs	r2, r1
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002952:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d161      	bne.n	8002a20 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a38      	ldr	r2, [pc, #224]	; (8002a40 <HAL_I2S_Init+0x274>)
 8002960:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a37      	ldr	r2, [pc, #220]	; (8002a44 <HAL_I2S_Init+0x278>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d101      	bne.n	8002970 <HAL_I2S_Init+0x1a4>
 800296c:	4b36      	ldr	r3, [pc, #216]	; (8002a48 <HAL_I2S_Init+0x27c>)
 800296e:	e001      	b.n	8002974 <HAL_I2S_Init+0x1a8>
 8002970:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	4932      	ldr	r1, [pc, #200]	; (8002a44 <HAL_I2S_Init+0x278>)
 800297c:	428a      	cmp	r2, r1
 800297e:	d101      	bne.n	8002984 <HAL_I2S_Init+0x1b8>
 8002980:	4a31      	ldr	r2, [pc, #196]	; (8002a48 <HAL_I2S_Init+0x27c>)
 8002982:	e001      	b.n	8002988 <HAL_I2S_Init+0x1bc>
 8002984:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002988:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800298c:	f023 030f 	bic.w	r3, r3, #15
 8002990:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a2b      	ldr	r2, [pc, #172]	; (8002a44 <HAL_I2S_Init+0x278>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d101      	bne.n	80029a0 <HAL_I2S_Init+0x1d4>
 800299c:	4b2a      	ldr	r3, [pc, #168]	; (8002a48 <HAL_I2S_Init+0x27c>)
 800299e:	e001      	b.n	80029a4 <HAL_I2S_Init+0x1d8>
 80029a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029a4:	2202      	movs	r2, #2
 80029a6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a25      	ldr	r2, [pc, #148]	; (8002a44 <HAL_I2S_Init+0x278>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d101      	bne.n	80029b6 <HAL_I2S_Init+0x1ea>
 80029b2:	4b25      	ldr	r3, [pc, #148]	; (8002a48 <HAL_I2S_Init+0x27c>)
 80029b4:	e001      	b.n	80029ba <HAL_I2S_Init+0x1ee>
 80029b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c6:	d003      	beq.n	80029d0 <HAL_I2S_Init+0x204>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d103      	bne.n	80029d8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80029d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	e001      	b.n	80029dc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80029d8:	2300      	movs	r3, #0
 80029da:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	b299      	uxth	r1, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80029f2:	4303      	orrs	r3, r0
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	430b      	orrs	r3, r1
 80029f8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80029fa:	4313      	orrs	r3, r2
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	897b      	ldrh	r3, [r7, #10]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a08:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a0d      	ldr	r2, [pc, #52]	; (8002a44 <HAL_I2S_Init+0x278>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d101      	bne.n	8002a18 <HAL_I2S_Init+0x24c>
 8002a14:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <HAL_I2S_Init+0x27c>)
 8002a16:	e001      	b.n	8002a1c <HAL_I2S_Init+0x250>
 8002a18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a1c:	897a      	ldrh	r2, [r7, #10]
 8002a1e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3720      	adds	r7, #32
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	08002b43 	.word	0x08002b43
 8002a3c:	cccccccd 	.word	0xcccccccd
 8002a40:	08002c59 	.word	0x08002c59
 8002a44:	40003800 	.word	0x40003800
 8002a48:	40003400 	.word	0x40003400

08002a4c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	881a      	ldrh	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	1c9a      	adds	r2, r3, #2
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10e      	bne.n	8002adc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002acc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ffb8 	bl	8002a4c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	b292      	uxth	r2, r2
 8002af8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afe:	1c9a      	adds	r2, r3, #2
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10e      	bne.n	8002b3a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b2a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff ff93 	bl	8002a60 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b086      	sub	sp, #24
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d13a      	bne.n	8002bd4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d109      	bne.n	8002b7c <I2S_IRQHandler+0x3a>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b72:	2b40      	cmp	r3, #64	; 0x40
 8002b74:	d102      	bne.n	8002b7c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff ffb4 	bl	8002ae4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b82:	2b40      	cmp	r3, #64	; 0x40
 8002b84:	d126      	bne.n	8002bd4 <I2S_IRQHandler+0x92>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 0320 	and.w	r3, r3, #32
 8002b90:	2b20      	cmp	r3, #32
 8002b92:	d11f      	bne.n	8002bd4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ba2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	f043 0202 	orr.w	r2, r3, #2
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff ff50 	bl	8002a74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d136      	bne.n	8002c4e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d109      	bne.n	8002bfe <I2S_IRQHandler+0xbc>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf4:	2b80      	cmp	r3, #128	; 0x80
 8002bf6:	d102      	bne.n	8002bfe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff ff45 	bl	8002a88 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d122      	bne.n	8002c4e <I2S_IRQHandler+0x10c>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d11b      	bne.n	8002c4e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c24:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c40:	f043 0204 	orr.w	r2, r3, #4
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff ff13 	bl	8002a74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c4e:	bf00      	nop
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4aa2      	ldr	r2, [pc, #648]	; (8002ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d101      	bne.n	8002c76 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002c72:	4ba2      	ldr	r3, [pc, #648]	; (8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c74:	e001      	b.n	8002c7a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002c76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a9b      	ldr	r2, [pc, #620]	; (8002ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d101      	bne.n	8002c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002c90:	4b9a      	ldr	r3, [pc, #616]	; (8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c92:	e001      	b.n	8002c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002c94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca4:	d004      	beq.n	8002cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f040 8099 	bne.w	8002de2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d107      	bne.n	8002cca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d002      	beq.n	8002cca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f925 	bl	8002f14 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d107      	bne.n	8002ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f9c8 	bl	8003074 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cea:	2b40      	cmp	r3, #64	; 0x40
 8002cec:	d13a      	bne.n	8002d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d035      	beq.n	8002d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a7e      	ldr	r2, [pc, #504]	; (8002ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d101      	bne.n	8002d06 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002d02:	4b7e      	ldr	r3, [pc, #504]	; (8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d04:	e001      	b.n	8002d0a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002d06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4979      	ldr	r1, [pc, #484]	; (8002ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d12:	428b      	cmp	r3, r1
 8002d14:	d101      	bne.n	8002d1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002d16:	4b79      	ldr	r3, [pc, #484]	; (8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d18:	e001      	b.n	8002d1e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002d1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d22:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	f043 0202 	orr.w	r2, r3, #2
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff fe88 	bl	8002a74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	f040 80be 	bne.w	8002eec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 80b8 	beq.w	8002eec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d8a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a59      	ldr	r2, [pc, #356]	; (8002ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d101      	bne.n	8002d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002d96:	4b59      	ldr	r3, [pc, #356]	; (8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d98:	e001      	b.n	8002d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002d9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4954      	ldr	r1, [pc, #336]	; (8002ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002da6:	428b      	cmp	r3, r1
 8002da8:	d101      	bne.n	8002dae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002daa:	4b54      	ldr	r3, [pc, #336]	; (8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002dac:	e001      	b.n	8002db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002dae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002db2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002db6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002db8:	2300      	movs	r3, #0
 8002dba:	60bb      	str	r3, [r7, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd2:	f043 0204 	orr.w	r2, r3, #4
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff fe4a 	bl	8002a74 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002de0:	e084      	b.n	8002eec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d107      	bne.n	8002dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f8be 	bl	8002f78 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d107      	bne.n	8002e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f8fd 	bl	8003010 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1c:	2b40      	cmp	r3, #64	; 0x40
 8002e1e:	d12f      	bne.n	8002e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f003 0320 	and.w	r3, r3, #32
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d02a      	beq.n	8002e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e38:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a2e      	ldr	r2, [pc, #184]	; (8002ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d101      	bne.n	8002e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002e44:	4b2d      	ldr	r3, [pc, #180]	; (8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e46:	e001      	b.n	8002e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002e48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4929      	ldr	r1, [pc, #164]	; (8002ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e54:	428b      	cmp	r3, r1
 8002e56:	d101      	bne.n	8002e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002e58:	4b28      	ldr	r3, [pc, #160]	; (8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e5a:	e001      	b.n	8002e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002e5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e64:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	f043 0202 	orr.w	r2, r3, #2
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff fdfa 	bl	8002a74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d131      	bne.n	8002eee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d02c      	beq.n	8002eee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a17      	ldr	r2, [pc, #92]	; (8002ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d101      	bne.n	8002ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002e9e:	4b17      	ldr	r3, [pc, #92]	; (8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ea0:	e001      	b.n	8002ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002ea2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4912      	ldr	r1, [pc, #72]	; (8002ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002eae:	428b      	cmp	r3, r1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002eb2:	4b12      	ldr	r3, [pc, #72]	; (8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002eb4:	e001      	b.n	8002eba <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002eb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ebe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ece:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002edc:	f043 0204 	orr.w	r2, r3, #4
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff fdc5 	bl	8002a74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002eea:	e000      	b.n	8002eee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002eec:	bf00      	nop
}
 8002eee:	bf00      	nop
 8002ef0:	3720      	adds	r7, #32
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40003800 	.word	0x40003800
 8002efc:	40003400 	.word	0x40003400

08002f00 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	1c99      	adds	r1, r3, #2
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6251      	str	r1, [r2, #36]	; 0x24
 8002f26:	881a      	ldrh	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d113      	bne.n	8002f6e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d106      	bne.n	8002f6e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff ffc9 	bl	8002f00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	1c99      	adds	r1, r3, #2
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6251      	str	r1, [r2, #36]	; 0x24
 8002f8a:	8819      	ldrh	r1, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a1d      	ldr	r2, [pc, #116]	; (8003008 <I2SEx_TxISR_I2SExt+0x90>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d101      	bne.n	8002f9a <I2SEx_TxISR_I2SExt+0x22>
 8002f96:	4b1d      	ldr	r3, [pc, #116]	; (800300c <I2SEx_TxISR_I2SExt+0x94>)
 8002f98:	e001      	b.n	8002f9e <I2SEx_TxISR_I2SExt+0x26>
 8002f9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f9e:	460a      	mov	r2, r1
 8002fa0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d121      	bne.n	8002ffe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a12      	ldr	r2, [pc, #72]	; (8003008 <I2SEx_TxISR_I2SExt+0x90>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d101      	bne.n	8002fc8 <I2SEx_TxISR_I2SExt+0x50>
 8002fc4:	4b11      	ldr	r3, [pc, #68]	; (800300c <I2SEx_TxISR_I2SExt+0x94>)
 8002fc6:	e001      	b.n	8002fcc <I2SEx_TxISR_I2SExt+0x54>
 8002fc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	490d      	ldr	r1, [pc, #52]	; (8003008 <I2SEx_TxISR_I2SExt+0x90>)
 8002fd4:	428b      	cmp	r3, r1
 8002fd6:	d101      	bne.n	8002fdc <I2SEx_TxISR_I2SExt+0x64>
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <I2SEx_TxISR_I2SExt+0x94>)
 8002fda:	e001      	b.n	8002fe0 <I2SEx_TxISR_I2SExt+0x68>
 8002fdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fe0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fe4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d106      	bne.n	8002ffe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ff81 	bl	8002f00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40003800 	.word	0x40003800
 800300c:	40003400 	.word	0x40003400

08003010 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68d8      	ldr	r0, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003022:	1c99      	adds	r1, r3, #2
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003028:	b282      	uxth	r2, r0
 800302a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003030:	b29b      	uxth	r3, r3
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800303e:	b29b      	uxth	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d113      	bne.n	800306c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003052:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff ff4a 	bl	8002f00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800306c:	bf00      	nop
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a20      	ldr	r2, [pc, #128]	; (8003104 <I2SEx_RxISR_I2SExt+0x90>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d101      	bne.n	800308a <I2SEx_RxISR_I2SExt+0x16>
 8003086:	4b20      	ldr	r3, [pc, #128]	; (8003108 <I2SEx_RxISR_I2SExt+0x94>)
 8003088:	e001      	b.n	800308e <I2SEx_RxISR_I2SExt+0x1a>
 800308a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800308e:	68d8      	ldr	r0, [r3, #12]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	1c99      	adds	r1, r3, #2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	62d1      	str	r1, [r2, #44]	; 0x2c
 800309a:	b282      	uxth	r2, r0
 800309c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d121      	bne.n	80030fa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a12      	ldr	r2, [pc, #72]	; (8003104 <I2SEx_RxISR_I2SExt+0x90>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d101      	bne.n	80030c4 <I2SEx_RxISR_I2SExt+0x50>
 80030c0:	4b11      	ldr	r3, [pc, #68]	; (8003108 <I2SEx_RxISR_I2SExt+0x94>)
 80030c2:	e001      	b.n	80030c8 <I2SEx_RxISR_I2SExt+0x54>
 80030c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	490d      	ldr	r1, [pc, #52]	; (8003104 <I2SEx_RxISR_I2SExt+0x90>)
 80030d0:	428b      	cmp	r3, r1
 80030d2:	d101      	bne.n	80030d8 <I2SEx_RxISR_I2SExt+0x64>
 80030d4:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <I2SEx_RxISR_I2SExt+0x94>)
 80030d6:	e001      	b.n	80030dc <I2SEx_RxISR_I2SExt+0x68>
 80030d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030e0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d106      	bne.n	80030fa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff ff03 	bl	8002f00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40003800 	.word	0x40003800
 8003108:	40003400 	.word	0x40003400

0800310c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e22d      	b.n	800357a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d075      	beq.n	8003216 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800312a:	4ba3      	ldr	r3, [pc, #652]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	2b04      	cmp	r3, #4
 8003134:	d00c      	beq.n	8003150 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003136:	4ba0      	ldr	r3, [pc, #640]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800313e:	2b08      	cmp	r3, #8
 8003140:	d112      	bne.n	8003168 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003142:	4b9d      	ldr	r3, [pc, #628]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800314a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800314e:	d10b      	bne.n	8003168 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003150:	4b99      	ldr	r3, [pc, #612]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d05b      	beq.n	8003214 <HAL_RCC_OscConfig+0x108>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d157      	bne.n	8003214 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e208      	b.n	800357a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003170:	d106      	bne.n	8003180 <HAL_RCC_OscConfig+0x74>
 8003172:	4b91      	ldr	r3, [pc, #580]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a90      	ldr	r2, [pc, #576]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	e01d      	b.n	80031bc <HAL_RCC_OscConfig+0xb0>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003188:	d10c      	bne.n	80031a4 <HAL_RCC_OscConfig+0x98>
 800318a:	4b8b      	ldr	r3, [pc, #556]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a8a      	ldr	r2, [pc, #552]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	4b88      	ldr	r3, [pc, #544]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a87      	ldr	r2, [pc, #540]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 800319c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	e00b      	b.n	80031bc <HAL_RCC_OscConfig+0xb0>
 80031a4:	4b84      	ldr	r3, [pc, #528]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a83      	ldr	r2, [pc, #524]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 80031aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	4b81      	ldr	r3, [pc, #516]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a80      	ldr	r2, [pc, #512]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 80031b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d013      	beq.n	80031ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c4:	f7fd fa42 	bl	800064c <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031cc:	f7fd fa3e 	bl	800064c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b64      	cmp	r3, #100	; 0x64
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e1cd      	b.n	800357a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031de:	4b76      	ldr	r3, [pc, #472]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f0      	beq.n	80031cc <HAL_RCC_OscConfig+0xc0>
 80031ea:	e014      	b.n	8003216 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7fd fa2e 	bl	800064c <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031f4:	f7fd fa2a 	bl	800064c <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b64      	cmp	r3, #100	; 0x64
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e1b9      	b.n	800357a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003206:	4b6c      	ldr	r3, [pc, #432]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0xe8>
 8003212:	e000      	b.n	8003216 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d063      	beq.n	80032ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003222:	4b65      	ldr	r3, [pc, #404]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00b      	beq.n	8003246 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800322e:	4b62      	ldr	r3, [pc, #392]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003236:	2b08      	cmp	r3, #8
 8003238:	d11c      	bne.n	8003274 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800323a:	4b5f      	ldr	r3, [pc, #380]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d116      	bne.n	8003274 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003246:	4b5c      	ldr	r3, [pc, #368]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d005      	beq.n	800325e <HAL_RCC_OscConfig+0x152>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d001      	beq.n	800325e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e18d      	b.n	800357a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325e:	4b56      	ldr	r3, [pc, #344]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4952      	ldr	r1, [pc, #328]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 800326e:	4313      	orrs	r3, r2
 8003270:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003272:	e03a      	b.n	80032ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d020      	beq.n	80032be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800327c:	4b4f      	ldr	r3, [pc, #316]	; (80033bc <HAL_RCC_OscConfig+0x2b0>)
 800327e:	2201      	movs	r2, #1
 8003280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003282:	f7fd f9e3 	bl	800064c <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800328a:	f7fd f9df 	bl	800064c <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e16e      	b.n	800357a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329c:	4b46      	ldr	r3, [pc, #280]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a8:	4b43      	ldr	r3, [pc, #268]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4940      	ldr	r1, [pc, #256]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	600b      	str	r3, [r1, #0]
 80032bc:	e015      	b.n	80032ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032be:	4b3f      	ldr	r3, [pc, #252]	; (80033bc <HAL_RCC_OscConfig+0x2b0>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fd f9c2 	bl	800064c <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032cc:	f7fd f9be 	bl	800064c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e14d      	b.n	800357a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032de:	4b36      	ldr	r3, [pc, #216]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d030      	beq.n	8003358 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d016      	beq.n	800332c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032fe:	4b30      	ldr	r3, [pc, #192]	; (80033c0 <HAL_RCC_OscConfig+0x2b4>)
 8003300:	2201      	movs	r2, #1
 8003302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003304:	f7fd f9a2 	bl	800064c <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800330c:	f7fd f99e 	bl	800064c <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e12d      	b.n	800357a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331e:	4b26      	ldr	r3, [pc, #152]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0x200>
 800332a:	e015      	b.n	8003358 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800332c:	4b24      	ldr	r3, [pc, #144]	; (80033c0 <HAL_RCC_OscConfig+0x2b4>)
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003332:	f7fd f98b 	bl	800064c <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800333a:	f7fd f987 	bl	800064c <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e116      	b.n	800357a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800334c:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 800334e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1f0      	bne.n	800333a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80a0 	beq.w	80034a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003366:	2300      	movs	r3, #0
 8003368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800336a:	4b13      	ldr	r3, [pc, #76]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10f      	bne.n	8003396 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	4a0e      	ldr	r2, [pc, #56]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003384:	6413      	str	r3, [r2, #64]	; 0x40
 8003386:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <HAL_RCC_OscConfig+0x2ac>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003392:	2301      	movs	r3, #1
 8003394:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003396:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <HAL_RCC_OscConfig+0x2b8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d121      	bne.n	80033e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033a2:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <HAL_RCC_OscConfig+0x2b8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a07      	ldr	r2, [pc, #28]	; (80033c4 <HAL_RCC_OscConfig+0x2b8>)
 80033a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ae:	f7fd f94d 	bl	800064c <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b4:	e011      	b.n	80033da <HAL_RCC_OscConfig+0x2ce>
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800
 80033bc:	42470000 	.word	0x42470000
 80033c0:	42470e80 	.word	0x42470e80
 80033c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c8:	f7fd f940 	bl	800064c <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e0cf      	b.n	800357a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033da:	4b6a      	ldr	r3, [pc, #424]	; (8003584 <HAL_RCC_OscConfig+0x478>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d106      	bne.n	80033fc <HAL_RCC_OscConfig+0x2f0>
 80033ee:	4b66      	ldr	r3, [pc, #408]	; (8003588 <HAL_RCC_OscConfig+0x47c>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	4a65      	ldr	r2, [pc, #404]	; (8003588 <HAL_RCC_OscConfig+0x47c>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	6713      	str	r3, [r2, #112]	; 0x70
 80033fa:	e01c      	b.n	8003436 <HAL_RCC_OscConfig+0x32a>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b05      	cmp	r3, #5
 8003402:	d10c      	bne.n	800341e <HAL_RCC_OscConfig+0x312>
 8003404:	4b60      	ldr	r3, [pc, #384]	; (8003588 <HAL_RCC_OscConfig+0x47c>)
 8003406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003408:	4a5f      	ldr	r2, [pc, #380]	; (8003588 <HAL_RCC_OscConfig+0x47c>)
 800340a:	f043 0304 	orr.w	r3, r3, #4
 800340e:	6713      	str	r3, [r2, #112]	; 0x70
 8003410:	4b5d      	ldr	r3, [pc, #372]	; (8003588 <HAL_RCC_OscConfig+0x47c>)
 8003412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003414:	4a5c      	ldr	r2, [pc, #368]	; (8003588 <HAL_RCC_OscConfig+0x47c>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	6713      	str	r3, [r2, #112]	; 0x70
 800341c:	e00b      	b.n	8003436 <HAL_RCC_OscConfig+0x32a>
 800341e:	4b5a      	ldr	r3, [pc, #360]	; (8003588 <HAL_RCC_OscConfig+0x47c>)
 8003420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003422:	4a59      	ldr	r2, [pc, #356]	; (8003588 <HAL_RCC_OscConfig+0x47c>)
 8003424:	f023 0301 	bic.w	r3, r3, #1
 8003428:	6713      	str	r3, [r2, #112]	; 0x70
 800342a:	4b57      	ldr	r3, [pc, #348]	; (8003588 <HAL_RCC_OscConfig+0x47c>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	4a56      	ldr	r2, [pc, #344]	; (8003588 <HAL_RCC_OscConfig+0x47c>)
 8003430:	f023 0304 	bic.w	r3, r3, #4
 8003434:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d015      	beq.n	800346a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343e:	f7fd f905 	bl	800064c <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003444:	e00a      	b.n	800345c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003446:	f7fd f901 	bl	800064c <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	f241 3288 	movw	r2, #5000	; 0x1388
 8003454:	4293      	cmp	r3, r2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e08e      	b.n	800357a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800345c:	4b4a      	ldr	r3, [pc, #296]	; (8003588 <HAL_RCC_OscConfig+0x47c>)
 800345e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0ee      	beq.n	8003446 <HAL_RCC_OscConfig+0x33a>
 8003468:	e014      	b.n	8003494 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800346a:	f7fd f8ef 	bl	800064c <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003470:	e00a      	b.n	8003488 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003472:	f7fd f8eb 	bl	800064c <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003480:	4293      	cmp	r3, r2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e078      	b.n	800357a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003488:	4b3f      	ldr	r3, [pc, #252]	; (8003588 <HAL_RCC_OscConfig+0x47c>)
 800348a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1ee      	bne.n	8003472 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003494:	7dfb      	ldrb	r3, [r7, #23]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d105      	bne.n	80034a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800349a:	4b3b      	ldr	r3, [pc, #236]	; (8003588 <HAL_RCC_OscConfig+0x47c>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	4a3a      	ldr	r2, [pc, #232]	; (8003588 <HAL_RCC_OscConfig+0x47c>)
 80034a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d064      	beq.n	8003578 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034ae:	4b36      	ldr	r3, [pc, #216]	; (8003588 <HAL_RCC_OscConfig+0x47c>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d05c      	beq.n	8003574 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d141      	bne.n	8003546 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c2:	4b32      	ldr	r3, [pc, #200]	; (800358c <HAL_RCC_OscConfig+0x480>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c8:	f7fd f8c0 	bl	800064c <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d0:	f7fd f8bc 	bl	800064c <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e04b      	b.n	800357a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e2:	4b29      	ldr	r3, [pc, #164]	; (8003588 <HAL_RCC_OscConfig+0x47c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69da      	ldr	r2, [r3, #28]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	019b      	lsls	r3, r3, #6
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	085b      	lsrs	r3, r3, #1
 8003506:	3b01      	subs	r3, #1
 8003508:	041b      	lsls	r3, r3, #16
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	061b      	lsls	r3, r3, #24
 8003512:	491d      	ldr	r1, [pc, #116]	; (8003588 <HAL_RCC_OscConfig+0x47c>)
 8003514:	4313      	orrs	r3, r2
 8003516:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003518:	4b1c      	ldr	r3, [pc, #112]	; (800358c <HAL_RCC_OscConfig+0x480>)
 800351a:	2201      	movs	r2, #1
 800351c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351e:	f7fd f895 	bl	800064c <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003526:	f7fd f891 	bl	800064c <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e020      	b.n	800357a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003538:	4b13      	ldr	r3, [pc, #76]	; (8003588 <HAL_RCC_OscConfig+0x47c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f0      	beq.n	8003526 <HAL_RCC_OscConfig+0x41a>
 8003544:	e018      	b.n	8003578 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003546:	4b11      	ldr	r3, [pc, #68]	; (800358c <HAL_RCC_OscConfig+0x480>)
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354c:	f7fd f87e 	bl	800064c <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003554:	f7fd f87a 	bl	800064c <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e009      	b.n	800357a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003566:	4b08      	ldr	r3, [pc, #32]	; (8003588 <HAL_RCC_OscConfig+0x47c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0x448>
 8003572:	e001      	b.n	8003578 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40007000 	.word	0x40007000
 8003588:	40023800 	.word	0x40023800
 800358c:	42470060 	.word	0x42470060

08003590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0ca      	b.n	800373a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035a4:	4b67      	ldr	r3, [pc, #412]	; (8003744 <HAL_RCC_ClockConfig+0x1b4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d90c      	bls.n	80035cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b2:	4b64      	ldr	r3, [pc, #400]	; (8003744 <HAL_RCC_ClockConfig+0x1b4>)
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	4b62      	ldr	r3, [pc, #392]	; (8003744 <HAL_RCC_ClockConfig+0x1b4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0b6      	b.n	800373a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d020      	beq.n	800361a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e4:	4b58      	ldr	r3, [pc, #352]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4a57      	ldr	r2, [pc, #348]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 80035ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035fc:	4b52      	ldr	r3, [pc, #328]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	4a51      	ldr	r2, [pc, #324]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 8003602:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003606:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003608:	4b4f      	ldr	r3, [pc, #316]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	494c      	ldr	r1, [pc, #304]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 8003616:	4313      	orrs	r3, r2
 8003618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d044      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d107      	bne.n	800363e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	4b46      	ldr	r3, [pc, #280]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d119      	bne.n	800366e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e07d      	b.n	800373a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d003      	beq.n	800364e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800364a:	2b03      	cmp	r3, #3
 800364c:	d107      	bne.n	800365e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364e:	4b3e      	ldr	r3, [pc, #248]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e06d      	b.n	800373a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365e:	4b3a      	ldr	r3, [pc, #232]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e065      	b.n	800373a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800366e:	4b36      	ldr	r3, [pc, #216]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f023 0203 	bic.w	r2, r3, #3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	4933      	ldr	r1, [pc, #204]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 800367c:	4313      	orrs	r3, r2
 800367e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003680:	f7fc ffe4 	bl	800064c <HAL_GetTick>
 8003684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003686:	e00a      	b.n	800369e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003688:	f7fc ffe0 	bl	800064c <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	f241 3288 	movw	r2, #5000	; 0x1388
 8003696:	4293      	cmp	r3, r2
 8003698:	d901      	bls.n	800369e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e04d      	b.n	800373a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369e:	4b2a      	ldr	r3, [pc, #168]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 020c 	and.w	r2, r3, #12
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d1eb      	bne.n	8003688 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036b0:	4b24      	ldr	r3, [pc, #144]	; (8003744 <HAL_RCC_ClockConfig+0x1b4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d20c      	bcs.n	80036d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036be:	4b21      	ldr	r3, [pc, #132]	; (8003744 <HAL_RCC_ClockConfig+0x1b4>)
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c6:	4b1f      	ldr	r3, [pc, #124]	; (8003744 <HAL_RCC_ClockConfig+0x1b4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d001      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e030      	b.n	800373a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e4:	4b18      	ldr	r3, [pc, #96]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	4915      	ldr	r1, [pc, #84]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d009      	beq.n	8003716 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003702:	4b11      	ldr	r3, [pc, #68]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	490d      	ldr	r1, [pc, #52]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 8003712:	4313      	orrs	r3, r2
 8003714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003716:	f000 f81d 	bl	8003754 <HAL_RCC_GetSysClockFreq>
 800371a:	4601      	mov	r1, r0
 800371c:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	4a09      	ldr	r2, [pc, #36]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	5cd3      	ldrb	r3, [r2, r3]
 800372a:	fa21 f303 	lsr.w	r3, r1, r3
 800372e:	4a08      	ldr	r2, [pc, #32]	; (8003750 <HAL_RCC_ClockConfig+0x1c0>)
 8003730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003732:	2000      	movs	r0, #0
 8003734:	f7fc ff46 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023c00 	.word	0x40023c00
 8003748:	40023800 	.word	0x40023800
 800374c:	08009d28 	.word	0x08009d28
 8003750:	20000028 	.word	0x20000028

08003754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	607b      	str	r3, [r7, #4]
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	2300      	movs	r3, #0
 8003764:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800376a:	4b63      	ldr	r3, [pc, #396]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b04      	cmp	r3, #4
 8003774:	d007      	beq.n	8003786 <HAL_RCC_GetSysClockFreq+0x32>
 8003776:	2b08      	cmp	r3, #8
 8003778:	d008      	beq.n	800378c <HAL_RCC_GetSysClockFreq+0x38>
 800377a:	2b00      	cmp	r3, #0
 800377c:	f040 80b4 	bne.w	80038e8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003780:	4b5e      	ldr	r3, [pc, #376]	; (80038fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003782:	60bb      	str	r3, [r7, #8]
       break;
 8003784:	e0b3      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003786:	4b5e      	ldr	r3, [pc, #376]	; (8003900 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003788:	60bb      	str	r3, [r7, #8]
      break;
 800378a:	e0b0      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800378c:	4b5a      	ldr	r3, [pc, #360]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003794:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003796:	4b58      	ldr	r3, [pc, #352]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d04a      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a2:	4b55      	ldr	r3, [pc, #340]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	099b      	lsrs	r3, r3, #6
 80037a8:	f04f 0400 	mov.w	r4, #0
 80037ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	ea03 0501 	and.w	r5, r3, r1
 80037b8:	ea04 0602 	and.w	r6, r4, r2
 80037bc:	4629      	mov	r1, r5
 80037be:	4632      	mov	r2, r6
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	f04f 0400 	mov.w	r4, #0
 80037c8:	0154      	lsls	r4, r2, #5
 80037ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037ce:	014b      	lsls	r3, r1, #5
 80037d0:	4619      	mov	r1, r3
 80037d2:	4622      	mov	r2, r4
 80037d4:	1b49      	subs	r1, r1, r5
 80037d6:	eb62 0206 	sbc.w	r2, r2, r6
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	f04f 0400 	mov.w	r4, #0
 80037e2:	0194      	lsls	r4, r2, #6
 80037e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037e8:	018b      	lsls	r3, r1, #6
 80037ea:	1a5b      	subs	r3, r3, r1
 80037ec:	eb64 0402 	sbc.w	r4, r4, r2
 80037f0:	f04f 0100 	mov.w	r1, #0
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	00e2      	lsls	r2, r4, #3
 80037fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037fe:	00d9      	lsls	r1, r3, #3
 8003800:	460b      	mov	r3, r1
 8003802:	4614      	mov	r4, r2
 8003804:	195b      	adds	r3, r3, r5
 8003806:	eb44 0406 	adc.w	r4, r4, r6
 800380a:	f04f 0100 	mov.w	r1, #0
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	0262      	lsls	r2, r4, #9
 8003814:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003818:	0259      	lsls	r1, r3, #9
 800381a:	460b      	mov	r3, r1
 800381c:	4614      	mov	r4, r2
 800381e:	4618      	mov	r0, r3
 8003820:	4621      	mov	r1, r4
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f04f 0400 	mov.w	r4, #0
 8003828:	461a      	mov	r2, r3
 800382a:	4623      	mov	r3, r4
 800382c:	f7fc fd28 	bl	8000280 <__aeabi_uldivmod>
 8003830:	4603      	mov	r3, r0
 8003832:	460c      	mov	r4, r1
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	e049      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003838:	4b2f      	ldr	r3, [pc, #188]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	099b      	lsrs	r3, r3, #6
 800383e:	f04f 0400 	mov.w	r4, #0
 8003842:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	ea03 0501 	and.w	r5, r3, r1
 800384e:	ea04 0602 	and.w	r6, r4, r2
 8003852:	4629      	mov	r1, r5
 8003854:	4632      	mov	r2, r6
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	f04f 0400 	mov.w	r4, #0
 800385e:	0154      	lsls	r4, r2, #5
 8003860:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003864:	014b      	lsls	r3, r1, #5
 8003866:	4619      	mov	r1, r3
 8003868:	4622      	mov	r2, r4
 800386a:	1b49      	subs	r1, r1, r5
 800386c:	eb62 0206 	sbc.w	r2, r2, r6
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	f04f 0400 	mov.w	r4, #0
 8003878:	0194      	lsls	r4, r2, #6
 800387a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800387e:	018b      	lsls	r3, r1, #6
 8003880:	1a5b      	subs	r3, r3, r1
 8003882:	eb64 0402 	sbc.w	r4, r4, r2
 8003886:	f04f 0100 	mov.w	r1, #0
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	00e2      	lsls	r2, r4, #3
 8003890:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003894:	00d9      	lsls	r1, r3, #3
 8003896:	460b      	mov	r3, r1
 8003898:	4614      	mov	r4, r2
 800389a:	195b      	adds	r3, r3, r5
 800389c:	eb44 0406 	adc.w	r4, r4, r6
 80038a0:	f04f 0100 	mov.w	r1, #0
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	02a2      	lsls	r2, r4, #10
 80038aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80038ae:	0299      	lsls	r1, r3, #10
 80038b0:	460b      	mov	r3, r1
 80038b2:	4614      	mov	r4, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	4621      	mov	r1, r4
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f04f 0400 	mov.w	r4, #0
 80038be:	461a      	mov	r2, r3
 80038c0:	4623      	mov	r3, r4
 80038c2:	f7fc fcdd 	bl	8000280 <__aeabi_uldivmod>
 80038c6:	4603      	mov	r3, r0
 80038c8:	460c      	mov	r4, r1
 80038ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038cc:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	0c1b      	lsrs	r3, r3, #16
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	3301      	adds	r3, #1
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e4:	60bb      	str	r3, [r7, #8]
      break;
 80038e6:	e002      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038e8:	4b04      	ldr	r3, [pc, #16]	; (80038fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80038ea:	60bb      	str	r3, [r7, #8]
      break;
 80038ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ee:	68bb      	ldr	r3, [r7, #8]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038f8:	40023800 	.word	0x40023800
 80038fc:	00f42400 	.word	0x00f42400
 8003900:	007a1200 	.word	0x007a1200

08003904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003908:	4b03      	ldr	r3, [pc, #12]	; (8003918 <HAL_RCC_GetHCLKFreq+0x14>)
 800390a:	681b      	ldr	r3, [r3, #0]
}
 800390c:	4618      	mov	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	20000028 	.word	0x20000028

0800391c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003920:	f7ff fff0 	bl	8003904 <HAL_RCC_GetHCLKFreq>
 8003924:	4601      	mov	r1, r0
 8003926:	4b05      	ldr	r3, [pc, #20]	; (800393c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	0a9b      	lsrs	r3, r3, #10
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	4a03      	ldr	r2, [pc, #12]	; (8003940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003932:	5cd3      	ldrb	r3, [r2, r3]
 8003934:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003938:	4618      	mov	r0, r3
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40023800 	.word	0x40023800
 8003940:	08009d38 	.word	0x08009d38

08003944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003948:	f7ff ffdc 	bl	8003904 <HAL_RCC_GetHCLKFreq>
 800394c:	4601      	mov	r1, r0
 800394e:	4b05      	ldr	r3, [pc, #20]	; (8003964 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	0b5b      	lsrs	r3, r3, #13
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	4a03      	ldr	r2, [pc, #12]	; (8003968 <HAL_RCC_GetPCLK2Freq+0x24>)
 800395a:	5cd3      	ldrb	r3, [r2, r3]
 800395c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003960:	4618      	mov	r0, r3
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40023800 	.word	0x40023800
 8003968:	08009d38 	.word	0x08009d38

0800396c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d105      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003990:	2b00      	cmp	r3, #0
 8003992:	d035      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003994:	4b62      	ldr	r3, [pc, #392]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800399a:	f7fc fe57 	bl	800064c <HAL_GetTick>
 800399e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039a0:	e008      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80039a2:	f7fc fe53 	bl	800064c <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e0b0      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039b4:	4b5b      	ldr	r3, [pc, #364]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1f0      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	019a      	lsls	r2, r3, #6
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	071b      	lsls	r3, r3, #28
 80039cc:	4955      	ldr	r1, [pc, #340]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039d4:	4b52      	ldr	r3, [pc, #328]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039da:	f7fc fe37 	bl	800064c <HAL_GetTick>
 80039de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039e0:	e008      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80039e2:	f7fc fe33 	bl	800064c <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e090      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039f4:	4b4b      	ldr	r3, [pc, #300]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 8083 	beq.w	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	4b44      	ldr	r3, [pc, #272]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	4a43      	ldr	r2, [pc, #268]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a1e:	4b41      	ldr	r3, [pc, #260]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003a2a:	4b3f      	ldr	r3, [pc, #252]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a3e      	ldr	r2, [pc, #248]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a36:	f7fc fe09 	bl	800064c <HAL_GetTick>
 8003a3a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a3e:	f7fc fe05 	bl	800064c <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e062      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a50:	4b35      	ldr	r3, [pc, #212]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a5c:	4b31      	ldr	r3, [pc, #196]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a64:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d02f      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d028      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a7a:	4b2a      	ldr	r3, [pc, #168]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a82:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a84:	4b29      	ldr	r3, [pc, #164]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a8a:	4b28      	ldr	r3, [pc, #160]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a90:	4a24      	ldr	r2, [pc, #144]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a96:	4b23      	ldr	r3, [pc, #140]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d114      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003aa2:	f7fc fdd3 	bl	800064c <HAL_GetTick>
 8003aa6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa8:	e00a      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aaa:	f7fc fdcf 	bl	800064c <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e02a      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac0:	4b18      	ldr	r3, [pc, #96]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0ee      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ad8:	d10d      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003ada:	4b12      	ldr	r3, [pc, #72]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aee:	490d      	ldr	r1, [pc, #52]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	608b      	str	r3, [r1, #8]
 8003af4:	e005      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003af6:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	4a0a      	ldr	r2, [pc, #40]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003afc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b00:	6093      	str	r3, [r2, #8]
 8003b02:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b0e:	4905      	ldr	r1, [pc, #20]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	42470068 	.word	0x42470068
 8003b24:	40023800 	.word	0x40023800
 8003b28:	40007000 	.word	0x40007000
 8003b2c:	42470e40 	.word	0x42470e40

08003b30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d13d      	bne.n	8003bca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003b4e:	4b22      	ldr	r3, [pc, #136]	; (8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b56:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d004      	beq.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d12f      	bne.n	8003bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003b62:	4b1e      	ldr	r3, [pc, #120]	; (8003bdc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003b64:	617b      	str	r3, [r7, #20]
          break;
 8003b66:	e02f      	b.n	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b68:	4b1b      	ldr	r3, [pc, #108]	; (8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b74:	d108      	bne.n	8003b88 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b76:	4b18      	ldr	r3, [pc, #96]	; (8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b7e:	4a18      	ldr	r2, [pc, #96]	; (8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	e007      	b.n	8003b98 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b88:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b90:	4a14      	ldr	r2, [pc, #80]	; (8003be4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b96:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003b98:	4b0f      	ldr	r3, [pc, #60]	; (8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b9e:	099b      	lsrs	r3, r3, #6
 8003ba0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	fb02 f303 	mul.w	r3, r2, r3
 8003baa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003bac:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb2:	0f1b      	lsrs	r3, r3, #28
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbe:	617b      	str	r3, [r7, #20]
          break;
 8003bc0:	e002      	b.n	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]
          break;
 8003bc6:	bf00      	nop
        }
      }
      break;
 8003bc8:	bf00      	nop
    }
  }
  return frequency;
 8003bca:	697b      	ldr	r3, [r7, #20]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	371c      	adds	r7, #28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	00bb8000 	.word	0x00bb8000
 8003be0:	007a1200 	.word	0x007a1200
 8003be4:	00f42400 	.word	0x00f42400

08003be8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e056      	b.n	8003ca8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d106      	bne.n	8003c1a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f004 feb7 	bl	8008988 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c30:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	ea42 0103 	orr.w	r1, r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	0c1b      	lsrs	r3, r3, #16
 8003c78:	f003 0104 	and.w	r1, r3, #4
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	69da      	ldr	r2, [r3, #28]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e01d      	b.n	8003cfe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f004 fe9e 	bl	8008a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3304      	adds	r3, #4
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f000 fb4e 	bl	8004390 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b085      	sub	sp, #20
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68da      	ldr	r2, [r3, #12]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f042 0201 	orr.w	r2, r2, #1
 8003d1c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2b06      	cmp	r3, #6
 8003d2e:	d007      	beq.n	8003d40 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0201 	orr.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b082      	sub	sp, #8
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e01d      	b.n	8003d9c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d106      	bne.n	8003d7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f815 	bl	8003da4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	f000 faff 	bl	8004390 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	6839      	ldr	r1, [r7, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fdca 	bl	8004964 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a15      	ldr	r2, [pc, #84]	; (8003e2c <HAL_TIM_PWM_Start+0x74>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d004      	beq.n	8003de4 <HAL_TIM_PWM_Start+0x2c>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a14      	ldr	r2, [pc, #80]	; (8003e30 <HAL_TIM_PWM_Start+0x78>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d101      	bne.n	8003de8 <HAL_TIM_PWM_Start+0x30>
 8003de4:	2301      	movs	r3, #1
 8003de6:	e000      	b.n	8003dea <HAL_TIM_PWM_Start+0x32>
 8003de8:	2300      	movs	r3, #0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d007      	beq.n	8003dfe <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dfc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b06      	cmp	r3, #6
 8003e0e:	d007      	beq.n	8003e20 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40010000 	.word	0x40010000
 8003e30:	40010400 	.word	0x40010400

08003e34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d122      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d11b      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f06f 0202 	mvn.w	r2, #2
 8003e60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fa6b 	bl	8004352 <HAL_TIM_IC_CaptureCallback>
 8003e7c:	e005      	b.n	8003e8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fa5d 	bl	800433e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fa6e 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d122      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d11b      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f06f 0204 	mvn.w	r2, #4
 8003eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2202      	movs	r2, #2
 8003eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fa41 	bl	8004352 <HAL_TIM_IC_CaptureCallback>
 8003ed0:	e005      	b.n	8003ede <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fa33 	bl	800433e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 fa44 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d122      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0308 	and.w	r3, r3, #8
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d11b      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0208 	mvn.w	r2, #8
 8003f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2204      	movs	r2, #4
 8003f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fa17 	bl	8004352 <HAL_TIM_IC_CaptureCallback>
 8003f24:	e005      	b.n	8003f32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 fa09 	bl	800433e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 fa1a 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f003 0310 	and.w	r3, r3, #16
 8003f42:	2b10      	cmp	r3, #16
 8003f44:	d122      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	2b10      	cmp	r3, #16
 8003f52:	d11b      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0210 	mvn.w	r2, #16
 8003f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2208      	movs	r2, #8
 8003f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f9ed 	bl	8004352 <HAL_TIM_IC_CaptureCallback>
 8003f78:	e005      	b.n	8003f86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f9df 	bl	800433e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f9f0 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d10e      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d107      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0201 	mvn.w	r2, #1
 8003fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f003 ffe0 	bl	8007f78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc2:	2b80      	cmp	r3, #128	; 0x80
 8003fc4:	d10e      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd0:	2b80      	cmp	r3, #128	; 0x80
 8003fd2:	d107      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 fd34 	bl	8004a4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fee:	2b40      	cmp	r3, #64	; 0x40
 8003ff0:	d10e      	bne.n	8004010 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffc:	2b40      	cmp	r3, #64	; 0x40
 8003ffe:	d107      	bne.n	8004010 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f9b5 	bl	800437a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b20      	cmp	r3, #32
 800401c:	d10e      	bne.n	800403c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	2b20      	cmp	r3, #32
 800402a:	d107      	bne.n	800403c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0220 	mvn.w	r2, #32
 8004034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fcfe 	bl	8004a38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800403c:	bf00      	nop
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800405a:	2302      	movs	r3, #2
 800405c:	e0b4      	b.n	80041c8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2202      	movs	r2, #2
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b0c      	cmp	r3, #12
 8004072:	f200 809f 	bhi.w	80041b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004076:	a201      	add	r2, pc, #4	; (adr r2, 800407c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407c:	080040b1 	.word	0x080040b1
 8004080:	080041b5 	.word	0x080041b5
 8004084:	080041b5 	.word	0x080041b5
 8004088:	080041b5 	.word	0x080041b5
 800408c:	080040f1 	.word	0x080040f1
 8004090:	080041b5 	.word	0x080041b5
 8004094:	080041b5 	.word	0x080041b5
 8004098:	080041b5 	.word	0x080041b5
 800409c:	08004133 	.word	0x08004133
 80040a0:	080041b5 	.word	0x080041b5
 80040a4:	080041b5 	.word	0x080041b5
 80040a8:	080041b5 	.word	0x080041b5
 80040ac:	08004173 	.word	0x08004173
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68b9      	ldr	r1, [r7, #8]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fa0a 	bl	80044d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0208 	orr.w	r2, r2, #8
 80040ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699a      	ldr	r2, [r3, #24]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0204 	bic.w	r2, r2, #4
 80040da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6999      	ldr	r1, [r3, #24]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	691a      	ldr	r2, [r3, #16]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	619a      	str	r2, [r3, #24]
      break;
 80040ee:	e062      	b.n	80041b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fa5a 	bl	80045b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699a      	ldr	r2, [r3, #24]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800410a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6999      	ldr	r1, [r3, #24]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	021a      	lsls	r2, r3, #8
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	619a      	str	r2, [r3, #24]
      break;
 8004130:	e041      	b.n	80041b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68b9      	ldr	r1, [r7, #8]
 8004138:	4618      	mov	r0, r3
 800413a:	f000 faaf 	bl	800469c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69da      	ldr	r2, [r3, #28]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f042 0208 	orr.w	r2, r2, #8
 800414c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69da      	ldr	r2, [r3, #28]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0204 	bic.w	r2, r2, #4
 800415c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	69d9      	ldr	r1, [r3, #28]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	61da      	str	r2, [r3, #28]
      break;
 8004170:	e021      	b.n	80041b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68b9      	ldr	r1, [r7, #8]
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fb03 	bl	8004784 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69da      	ldr	r2, [r3, #28]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800418c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	69da      	ldr	r2, [r3, #28]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69d9      	ldr	r1, [r3, #28]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	021a      	lsls	r2, r3, #8
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	61da      	str	r2, [r3, #28]
      break;
 80041b2:	e000      	b.n	80041b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80041b4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_TIM_ConfigClockSource+0x18>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e0a6      	b.n	8004336 <HAL_TIM_ConfigClockSource+0x166>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004206:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800420e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b40      	cmp	r3, #64	; 0x40
 800421e:	d067      	beq.n	80042f0 <HAL_TIM_ConfigClockSource+0x120>
 8004220:	2b40      	cmp	r3, #64	; 0x40
 8004222:	d80b      	bhi.n	800423c <HAL_TIM_ConfigClockSource+0x6c>
 8004224:	2b10      	cmp	r3, #16
 8004226:	d073      	beq.n	8004310 <HAL_TIM_ConfigClockSource+0x140>
 8004228:	2b10      	cmp	r3, #16
 800422a:	d802      	bhi.n	8004232 <HAL_TIM_ConfigClockSource+0x62>
 800422c:	2b00      	cmp	r3, #0
 800422e:	d06f      	beq.n	8004310 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004230:	e078      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004232:	2b20      	cmp	r3, #32
 8004234:	d06c      	beq.n	8004310 <HAL_TIM_ConfigClockSource+0x140>
 8004236:	2b30      	cmp	r3, #48	; 0x30
 8004238:	d06a      	beq.n	8004310 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800423a:	e073      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800423c:	2b70      	cmp	r3, #112	; 0x70
 800423e:	d00d      	beq.n	800425c <HAL_TIM_ConfigClockSource+0x8c>
 8004240:	2b70      	cmp	r3, #112	; 0x70
 8004242:	d804      	bhi.n	800424e <HAL_TIM_ConfigClockSource+0x7e>
 8004244:	2b50      	cmp	r3, #80	; 0x50
 8004246:	d033      	beq.n	80042b0 <HAL_TIM_ConfigClockSource+0xe0>
 8004248:	2b60      	cmp	r3, #96	; 0x60
 800424a:	d041      	beq.n	80042d0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800424c:	e06a      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800424e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004252:	d066      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0x152>
 8004254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004258:	d017      	beq.n	800428a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800425a:	e063      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	6899      	ldr	r1, [r3, #8]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f000 fb5a 	bl	8004924 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800427e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	609a      	str	r2, [r3, #8]
      break;
 8004288:	e04c      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6899      	ldr	r1, [r3, #8]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f000 fb43 	bl	8004924 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042ac:	609a      	str	r2, [r3, #8]
      break;
 80042ae:	e039      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6818      	ldr	r0, [r3, #0]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	6859      	ldr	r1, [r3, #4]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	461a      	mov	r2, r3
 80042be:	f000 fab7 	bl	8004830 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2150      	movs	r1, #80	; 0x50
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fb10 	bl	80048ee <TIM_ITRx_SetConfig>
      break;
 80042ce:	e029      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6818      	ldr	r0, [r3, #0]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	6859      	ldr	r1, [r3, #4]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	461a      	mov	r2, r3
 80042de:	f000 fad6 	bl	800488e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2160      	movs	r1, #96	; 0x60
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 fb00 	bl	80048ee <TIM_ITRx_SetConfig>
      break;
 80042ee:	e019      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6818      	ldr	r0, [r3, #0]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	6859      	ldr	r1, [r3, #4]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	461a      	mov	r2, r3
 80042fe:	f000 fa97 	bl	8004830 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2140      	movs	r1, #64	; 0x40
 8004308:	4618      	mov	r0, r3
 800430a:	f000 faf0 	bl	80048ee <TIM_ITRx_SetConfig>
      break;
 800430e:	e009      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4619      	mov	r1, r3
 800431a:	4610      	mov	r0, r2
 800431c:	f000 fae7 	bl	80048ee <TIM_ITRx_SetConfig>
      break;
 8004320:	e000      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004322:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
	...

08004390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a40      	ldr	r2, [pc, #256]	; (80044a4 <TIM_Base_SetConfig+0x114>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d013      	beq.n	80043d0 <TIM_Base_SetConfig+0x40>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ae:	d00f      	beq.n	80043d0 <TIM_Base_SetConfig+0x40>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a3d      	ldr	r2, [pc, #244]	; (80044a8 <TIM_Base_SetConfig+0x118>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d00b      	beq.n	80043d0 <TIM_Base_SetConfig+0x40>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a3c      	ldr	r2, [pc, #240]	; (80044ac <TIM_Base_SetConfig+0x11c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d007      	beq.n	80043d0 <TIM_Base_SetConfig+0x40>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a3b      	ldr	r2, [pc, #236]	; (80044b0 <TIM_Base_SetConfig+0x120>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d003      	beq.n	80043d0 <TIM_Base_SetConfig+0x40>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a3a      	ldr	r2, [pc, #232]	; (80044b4 <TIM_Base_SetConfig+0x124>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d108      	bne.n	80043e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a2f      	ldr	r2, [pc, #188]	; (80044a4 <TIM_Base_SetConfig+0x114>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d02b      	beq.n	8004442 <TIM_Base_SetConfig+0xb2>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f0:	d027      	beq.n	8004442 <TIM_Base_SetConfig+0xb2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a2c      	ldr	r2, [pc, #176]	; (80044a8 <TIM_Base_SetConfig+0x118>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d023      	beq.n	8004442 <TIM_Base_SetConfig+0xb2>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a2b      	ldr	r2, [pc, #172]	; (80044ac <TIM_Base_SetConfig+0x11c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d01f      	beq.n	8004442 <TIM_Base_SetConfig+0xb2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a2a      	ldr	r2, [pc, #168]	; (80044b0 <TIM_Base_SetConfig+0x120>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d01b      	beq.n	8004442 <TIM_Base_SetConfig+0xb2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a29      	ldr	r2, [pc, #164]	; (80044b4 <TIM_Base_SetConfig+0x124>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d017      	beq.n	8004442 <TIM_Base_SetConfig+0xb2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a28      	ldr	r2, [pc, #160]	; (80044b8 <TIM_Base_SetConfig+0x128>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d013      	beq.n	8004442 <TIM_Base_SetConfig+0xb2>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a27      	ldr	r2, [pc, #156]	; (80044bc <TIM_Base_SetConfig+0x12c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d00f      	beq.n	8004442 <TIM_Base_SetConfig+0xb2>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a26      	ldr	r2, [pc, #152]	; (80044c0 <TIM_Base_SetConfig+0x130>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00b      	beq.n	8004442 <TIM_Base_SetConfig+0xb2>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a25      	ldr	r2, [pc, #148]	; (80044c4 <TIM_Base_SetConfig+0x134>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d007      	beq.n	8004442 <TIM_Base_SetConfig+0xb2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a24      	ldr	r2, [pc, #144]	; (80044c8 <TIM_Base_SetConfig+0x138>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d003      	beq.n	8004442 <TIM_Base_SetConfig+0xb2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a23      	ldr	r2, [pc, #140]	; (80044cc <TIM_Base_SetConfig+0x13c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d108      	bne.n	8004454 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a0a      	ldr	r2, [pc, #40]	; (80044a4 <TIM_Base_SetConfig+0x114>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d003      	beq.n	8004488 <TIM_Base_SetConfig+0xf8>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a0c      	ldr	r2, [pc, #48]	; (80044b4 <TIM_Base_SetConfig+0x124>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d103      	bne.n	8004490 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	615a      	str	r2, [r3, #20]
}
 8004496:	bf00      	nop
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40010000 	.word	0x40010000
 80044a8:	40000400 	.word	0x40000400
 80044ac:	40000800 	.word	0x40000800
 80044b0:	40000c00 	.word	0x40000c00
 80044b4:	40010400 	.word	0x40010400
 80044b8:	40014000 	.word	0x40014000
 80044bc:	40014400 	.word	0x40014400
 80044c0:	40014800 	.word	0x40014800
 80044c4:	40001800 	.word	0x40001800
 80044c8:	40001c00 	.word	0x40001c00
 80044cc:	40002000 	.word	0x40002000

080044d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	f023 0201 	bic.w	r2, r3, #1
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f023 0303 	bic.w	r3, r3, #3
 8004506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	4313      	orrs	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f023 0302 	bic.w	r3, r3, #2
 8004518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	4313      	orrs	r3, r2
 8004522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a20      	ldr	r2, [pc, #128]	; (80045a8 <TIM_OC1_SetConfig+0xd8>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d003      	beq.n	8004534 <TIM_OC1_SetConfig+0x64>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a1f      	ldr	r2, [pc, #124]	; (80045ac <TIM_OC1_SetConfig+0xdc>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d10c      	bne.n	800454e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f023 0308 	bic.w	r3, r3, #8
 800453a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	4313      	orrs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f023 0304 	bic.w	r3, r3, #4
 800454c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a15      	ldr	r2, [pc, #84]	; (80045a8 <TIM_OC1_SetConfig+0xd8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d003      	beq.n	800455e <TIM_OC1_SetConfig+0x8e>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a14      	ldr	r2, [pc, #80]	; (80045ac <TIM_OC1_SetConfig+0xdc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d111      	bne.n	8004582 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800456c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4313      	orrs	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	621a      	str	r2, [r3, #32]
}
 800459c:	bf00      	nop
 800459e:	371c      	adds	r7, #28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	40010000 	.word	0x40010000
 80045ac:	40010400 	.word	0x40010400

080045b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	f023 0210 	bic.w	r2, r3, #16
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	021b      	lsls	r3, r3, #8
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f023 0320 	bic.w	r3, r3, #32
 80045fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	4313      	orrs	r3, r2
 8004606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a22      	ldr	r2, [pc, #136]	; (8004694 <TIM_OC2_SetConfig+0xe4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d003      	beq.n	8004618 <TIM_OC2_SetConfig+0x68>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a21      	ldr	r2, [pc, #132]	; (8004698 <TIM_OC2_SetConfig+0xe8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d10d      	bne.n	8004634 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800461e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	4313      	orrs	r3, r2
 800462a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004632:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a17      	ldr	r2, [pc, #92]	; (8004694 <TIM_OC2_SetConfig+0xe4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d003      	beq.n	8004644 <TIM_OC2_SetConfig+0x94>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a16      	ldr	r2, [pc, #88]	; (8004698 <TIM_OC2_SetConfig+0xe8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d113      	bne.n	800466c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800464a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004652:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	4313      	orrs	r3, r2
 800466a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	621a      	str	r2, [r3, #32]
}
 8004686:	bf00      	nop
 8004688:	371c      	adds	r7, #28
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40010000 	.word	0x40010000
 8004698:	40010400 	.word	0x40010400

0800469c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0303 	bic.w	r3, r3, #3
 80046d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	4313      	orrs	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a21      	ldr	r2, [pc, #132]	; (800477c <TIM_OC3_SetConfig+0xe0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d003      	beq.n	8004702 <TIM_OC3_SetConfig+0x66>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a20      	ldr	r2, [pc, #128]	; (8004780 <TIM_OC3_SetConfig+0xe4>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d10d      	bne.n	800471e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004708:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	021b      	lsls	r3, r3, #8
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800471c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a16      	ldr	r2, [pc, #88]	; (800477c <TIM_OC3_SetConfig+0xe0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d003      	beq.n	800472e <TIM_OC3_SetConfig+0x92>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a15      	ldr	r2, [pc, #84]	; (8004780 <TIM_OC3_SetConfig+0xe4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d113      	bne.n	8004756 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800473c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	621a      	str	r2, [r3, #32]
}
 8004770:	bf00      	nop
 8004772:	371c      	adds	r7, #28
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	40010000 	.word	0x40010000
 8004780:	40010400 	.word	0x40010400

08004784 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004784:	b480      	push	{r7}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	021b      	lsls	r3, r3, #8
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	031b      	lsls	r3, r3, #12
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a12      	ldr	r2, [pc, #72]	; (8004828 <TIM_OC4_SetConfig+0xa4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d003      	beq.n	80047ec <TIM_OC4_SetConfig+0x68>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a11      	ldr	r2, [pc, #68]	; (800482c <TIM_OC4_SetConfig+0xa8>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d109      	bne.n	8004800 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	019b      	lsls	r3, r3, #6
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	621a      	str	r2, [r3, #32]
}
 800481a:	bf00      	nop
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40010000 	.word	0x40010000
 800482c:	40010400 	.word	0x40010400

08004830 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	f023 0201 	bic.w	r2, r3, #1
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800485a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f023 030a 	bic.w	r3, r3, #10
 800486c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4313      	orrs	r3, r2
 8004874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	621a      	str	r2, [r3, #32]
}
 8004882:	bf00      	nop
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800488e:	b480      	push	{r7}
 8004890:	b087      	sub	sp, #28
 8004892:	af00      	add	r7, sp, #0
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	f023 0210 	bic.w	r2, r3, #16
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	031b      	lsls	r3, r3, #12
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	621a      	str	r2, [r3, #32]
}
 80048e2:	bf00      	nop
 80048e4:	371c      	adds	r7, #28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b085      	sub	sp, #20
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004904:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	f043 0307 	orr.w	r3, r3, #7
 8004910:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	609a      	str	r2, [r3, #8]
}
 8004918:	bf00      	nop
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004924:	b480      	push	{r7}
 8004926:	b087      	sub	sp, #28
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
 8004930:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800493e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	021a      	lsls	r2, r3, #8
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	431a      	orrs	r2, r3
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4313      	orrs	r3, r2
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	4313      	orrs	r3, r2
 8004950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	609a      	str	r2, [r3, #8]
}
 8004958:	bf00      	nop
 800495a:	371c      	adds	r7, #28
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f003 031f 	and.w	r3, r3, #31
 8004976:	2201      	movs	r2, #1
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a1a      	ldr	r2, [r3, #32]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	43db      	mvns	r3, r3
 8004986:	401a      	ands	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a1a      	ldr	r2, [r3, #32]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f003 031f 	and.w	r3, r3, #31
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	fa01 f303 	lsl.w	r3, r1, r3
 800499c:	431a      	orrs	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	621a      	str	r2, [r3, #32]
}
 80049a2:	bf00      	nop
 80049a4:	371c      	adds	r7, #28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b085      	sub	sp, #20
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e032      	b.n	8004a2c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2202      	movs	r2, #2
 80049d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049fe:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e03f      	b.n	8004af2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f004 f8b0 	bl	8008bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2224      	movs	r2, #36	; 0x24
 8004a90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fb47 	bl	8005138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	691a      	ldr	r2, [r3, #16]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ab8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695a      	ldr	r2, [r3, #20]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ac8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ad8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b088      	sub	sp, #32
 8004afe:	af02      	add	r7, sp, #8
 8004b00:	60f8      	str	r0, [r7, #12]
 8004b02:	60b9      	str	r1, [r7, #8]
 8004b04:	603b      	str	r3, [r7, #0]
 8004b06:	4613      	mov	r3, r2
 8004b08:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b20      	cmp	r3, #32
 8004b18:	f040 8083 	bne.w	8004c22 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <HAL_UART_Transmit+0x2e>
 8004b22:	88fb      	ldrh	r3, [r7, #6]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e07b      	b.n	8004c24 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d101      	bne.n	8004b3a <HAL_UART_Transmit+0x40>
 8004b36:	2302      	movs	r3, #2
 8004b38:	e074      	b.n	8004c24 <HAL_UART_Transmit+0x12a>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2221      	movs	r2, #33	; 0x21
 8004b4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004b50:	f7fb fd7c 	bl	800064c <HAL_GetTick>
 8004b54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	88fa      	ldrh	r2, [r7, #6]
 8004b5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	88fa      	ldrh	r2, [r7, #6]
 8004b60:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b62:	e042      	b.n	8004bea <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7a:	d122      	bne.n	8004bc2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	2200      	movs	r2, #0
 8004b84:	2180      	movs	r1, #128	; 0x80
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f96a 	bl	8004e60 <UART_WaitOnFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e046      	b.n	8004c24 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ba8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d103      	bne.n	8004bba <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	3302      	adds	r3, #2
 8004bb6:	60bb      	str	r3, [r7, #8]
 8004bb8:	e017      	b.n	8004bea <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	60bb      	str	r3, [r7, #8]
 8004bc0:	e013      	b.n	8004bea <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2180      	movs	r1, #128	; 0x80
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f000 f947 	bl	8004e60 <UART_WaitOnFlagUntilTimeout>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e023      	b.n	8004c24 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	60ba      	str	r2, [r7, #8]
 8004be2:	781a      	ldrb	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1b7      	bne.n	8004b64 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	2140      	movs	r1, #64	; 0x40
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 f92e 	bl	8004e60 <UART_WaitOnFlagUntilTimeout>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e00a      	b.n	8004c24 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	e000      	b.n	8004c24 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004c22:	2302      	movs	r3, #2
  }
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10d      	bne.n	8004c7e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	f003 0320 	and.w	r3, r3, #32
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d008      	beq.n	8004c7e <HAL_UART_IRQHandler+0x52>
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f9dc 	bl	8005034 <UART_Receive_IT>
      return;
 8004c7c:	e0cc      	b.n	8004e18 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 80ab 	beq.w	8004ddc <HAL_UART_IRQHandler+0x1b0>
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d105      	bne.n	8004c9c <HAL_UART_IRQHandler+0x70>
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 80a0 	beq.w	8004ddc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <HAL_UART_IRQHandler+0x90>
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb4:	f043 0201 	orr.w	r2, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_UART_IRQHandler+0xb0>
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd4:	f043 0202 	orr.w	r2, r3, #2
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <HAL_UART_IRQHandler+0xd0>
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf4:	f043 0204 	orr.w	r2, r3, #4
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <HAL_UART_IRQHandler+0xf0>
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d14:	f043 0208 	orr.w	r2, r3, #8
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d078      	beq.n	8004e16 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d007      	beq.n	8004d3e <HAL_UART_IRQHandler+0x112>
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	f003 0320 	and.w	r3, r3, #32
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f97b 	bl	8005034 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d48:	2b40      	cmp	r3, #64	; 0x40
 8004d4a:	bf0c      	ite	eq
 8004d4c:	2301      	moveq	r3, #1
 8004d4e:	2300      	movne	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d102      	bne.n	8004d66 <HAL_UART_IRQHandler+0x13a>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d031      	beq.n	8004dca <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f8c4 	bl	8004ef4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d76:	2b40      	cmp	r3, #64	; 0x40
 8004d78:	d123      	bne.n	8004dc2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695a      	ldr	r2, [r3, #20]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d88:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d013      	beq.n	8004dba <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d96:	4a22      	ldr	r2, [pc, #136]	; (8004e20 <HAL_UART_IRQHandler+0x1f4>)
 8004d98:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fb fd93 	bl	80008ca <HAL_DMA_Abort_IT>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d016      	beq.n	8004dd8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004db4:	4610      	mov	r0, r2
 8004db6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db8:	e00e      	b.n	8004dd8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f846 	bl	8004e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc0:	e00a      	b.n	8004dd8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f842 	bl	8004e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc8:	e006      	b.n	8004dd8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f83e 	bl	8004e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004dd6:	e01e      	b.n	8004e16 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd8:	bf00      	nop
    return;
 8004dda:	e01c      	b.n	8004e16 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d008      	beq.n	8004df8 <HAL_UART_IRQHandler+0x1cc>
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f8b1 	bl	8004f58 <UART_Transmit_IT>
    return;
 8004df6:	e00f      	b.n	8004e18 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <HAL_UART_IRQHandler+0x1ec>
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f8f9 	bl	8005004 <UART_EndTransmit_IT>
    return;
 8004e12:	bf00      	nop
 8004e14:	e000      	b.n	8004e18 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004e16:	bf00      	nop
  }
}
 8004e18:	3720      	adds	r7, #32
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	08004f31 	.word	0x08004f31

08004e24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	603b      	str	r3, [r7, #0]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e70:	e02c      	b.n	8004ecc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e78:	d028      	beq.n	8004ecc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d007      	beq.n	8004e90 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e80:	f7fb fbe4 	bl	800064c <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d21d      	bcs.n	8004ecc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e9e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695a      	ldr	r2, [r3, #20]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0201 	bic.w	r2, r2, #1
 8004eae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e00f      	b.n	8004eec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	bf0c      	ite	eq
 8004edc:	2301      	moveq	r3, #1
 8004ede:	2300      	movne	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d0c3      	beq.n	8004e72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f0a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695a      	ldr	r2, [r3, #20]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0201 	bic.w	r2, r2, #1
 8004f1a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f7ff ff7e 	bl	8004e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f50:	bf00      	nop
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b21      	cmp	r3, #33	; 0x21
 8004f6a:	d144      	bne.n	8004ff6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f74:	d11a      	bne.n	8004fac <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	461a      	mov	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f8a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d105      	bne.n	8004fa0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	1c9a      	adds	r2, r3, #2
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	621a      	str	r2, [r3, #32]
 8004f9e:	e00e      	b.n	8004fbe <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	621a      	str	r2, [r3, #32]
 8004faa:	e008      	b.n	8004fbe <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	1c59      	adds	r1, r3, #1
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6211      	str	r1, [r2, #32]
 8004fb6:	781a      	ldrb	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	4619      	mov	r1, r3
 8004fcc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10f      	bne.n	8004ff2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68da      	ldr	r2, [r3, #12]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fe0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68da      	ldr	r2, [r3, #12]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ff0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	e000      	b.n	8004ff8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004ff6:	2302      	movs	r3, #2
  }
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800501a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff fefd 	bl	8004e24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005042:	b2db      	uxtb	r3, r3
 8005044:	2b22      	cmp	r3, #34	; 0x22
 8005046:	d171      	bne.n	800512c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005050:	d123      	bne.n	800509a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005056:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10e      	bne.n	800507e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	b29b      	uxth	r3, r3
 8005068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005076:	1c9a      	adds	r2, r3, #2
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	629a      	str	r2, [r3, #40]	; 0x28
 800507c:	e029      	b.n	80050d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	b29b      	uxth	r3, r3
 8005086:	b2db      	uxtb	r3, r3
 8005088:	b29a      	uxth	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	629a      	str	r2, [r3, #40]	; 0x28
 8005098:	e01b      	b.n	80050d2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10a      	bne.n	80050b8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6858      	ldr	r0, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ac:	1c59      	adds	r1, r3, #1
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6291      	str	r1, [r2, #40]	; 0x28
 80050b2:	b2c2      	uxtb	r2, r0
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	e00c      	b.n	80050d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c4:	1c58      	adds	r0, r3, #1
 80050c6:	6879      	ldr	r1, [r7, #4]
 80050c8:	6288      	str	r0, [r1, #40]	; 0x28
 80050ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	3b01      	subs	r3, #1
 80050da:	b29b      	uxth	r3, r3
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	4619      	mov	r1, r3
 80050e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d120      	bne.n	8005128 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0220 	bic.w	r2, r2, #32
 80050f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005104:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	695a      	ldr	r2, [r3, #20]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0201 	bic.w	r2, r2, #1
 8005114:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2220      	movs	r2, #32
 800511a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7ff fe8a 	bl	8004e38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	e002      	b.n	800512e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005128:	2300      	movs	r3, #0
 800512a:	e000      	b.n	800512e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800512c:	2302      	movs	r3, #2
  }
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
	...

08005138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005138:	b5b0      	push	{r4, r5, r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689a      	ldr	r2, [r3, #8]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005178:	f023 030c 	bic.w	r3, r3, #12
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6812      	ldr	r2, [r2, #0]
 8005180:	68f9      	ldr	r1, [r7, #12]
 8005182:	430b      	orrs	r3, r1
 8005184:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699a      	ldr	r2, [r3, #24]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a4:	f040 80e4 	bne.w	8005370 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4aab      	ldr	r2, [pc, #684]	; (800545c <UART_SetConfig+0x324>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d004      	beq.n	80051bc <UART_SetConfig+0x84>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4aaa      	ldr	r2, [pc, #680]	; (8005460 <UART_SetConfig+0x328>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d16c      	bne.n	8005296 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80051bc:	f7fe fbc2 	bl	8003944 <HAL_RCC_GetPCLK2Freq>
 80051c0:	4602      	mov	r2, r0
 80051c2:	4613      	mov	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	009a      	lsls	r2, r3, #2
 80051ca:	441a      	add	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d6:	4aa3      	ldr	r2, [pc, #652]	; (8005464 <UART_SetConfig+0x32c>)
 80051d8:	fba2 2303 	umull	r2, r3, r2, r3
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	011c      	lsls	r4, r3, #4
 80051e0:	f7fe fbb0 	bl	8003944 <HAL_RCC_GetPCLK2Freq>
 80051e4:	4602      	mov	r2, r0
 80051e6:	4613      	mov	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	009a      	lsls	r2, r3, #2
 80051ee:	441a      	add	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	fbb2 f5f3 	udiv	r5, r2, r3
 80051fa:	f7fe fba3 	bl	8003944 <HAL_RCC_GetPCLK2Freq>
 80051fe:	4602      	mov	r2, r0
 8005200:	4613      	mov	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	009a      	lsls	r2, r3, #2
 8005208:	441a      	add	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	fbb2 f3f3 	udiv	r3, r2, r3
 8005214:	4a93      	ldr	r2, [pc, #588]	; (8005464 <UART_SetConfig+0x32c>)
 8005216:	fba2 2303 	umull	r2, r3, r2, r3
 800521a:	095b      	lsrs	r3, r3, #5
 800521c:	2264      	movs	r2, #100	; 0x64
 800521e:	fb02 f303 	mul.w	r3, r2, r3
 8005222:	1aeb      	subs	r3, r5, r3
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	3332      	adds	r3, #50	; 0x32
 8005228:	4a8e      	ldr	r2, [pc, #568]	; (8005464 <UART_SetConfig+0x32c>)
 800522a:	fba2 2303 	umull	r2, r3, r2, r3
 800522e:	095b      	lsrs	r3, r3, #5
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005236:	441c      	add	r4, r3
 8005238:	f7fe fb84 	bl	8003944 <HAL_RCC_GetPCLK2Freq>
 800523c:	4602      	mov	r2, r0
 800523e:	4613      	mov	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	009a      	lsls	r2, r3, #2
 8005246:	441a      	add	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	fbb2 f5f3 	udiv	r5, r2, r3
 8005252:	f7fe fb77 	bl	8003944 <HAL_RCC_GetPCLK2Freq>
 8005256:	4602      	mov	r2, r0
 8005258:	4613      	mov	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	009a      	lsls	r2, r3, #2
 8005260:	441a      	add	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	fbb2 f3f3 	udiv	r3, r2, r3
 800526c:	4a7d      	ldr	r2, [pc, #500]	; (8005464 <UART_SetConfig+0x32c>)
 800526e:	fba2 2303 	umull	r2, r3, r2, r3
 8005272:	095b      	lsrs	r3, r3, #5
 8005274:	2264      	movs	r2, #100	; 0x64
 8005276:	fb02 f303 	mul.w	r3, r2, r3
 800527a:	1aeb      	subs	r3, r5, r3
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	3332      	adds	r3, #50	; 0x32
 8005280:	4a78      	ldr	r2, [pc, #480]	; (8005464 <UART_SetConfig+0x32c>)
 8005282:	fba2 2303 	umull	r2, r3, r2, r3
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	f003 0207 	and.w	r2, r3, #7
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4422      	add	r2, r4
 8005292:	609a      	str	r2, [r3, #8]
 8005294:	e154      	b.n	8005540 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005296:	f7fe fb41 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 800529a:	4602      	mov	r2, r0
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	009a      	lsls	r2, r3, #2
 80052a4:	441a      	add	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b0:	4a6c      	ldr	r2, [pc, #432]	; (8005464 <UART_SetConfig+0x32c>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	011c      	lsls	r4, r3, #4
 80052ba:	f7fe fb2f 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 80052be:	4602      	mov	r2, r0
 80052c0:	4613      	mov	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4413      	add	r3, r2
 80052c6:	009a      	lsls	r2, r3, #2
 80052c8:	441a      	add	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	fbb2 f5f3 	udiv	r5, r2, r3
 80052d4:	f7fe fb22 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 80052d8:	4602      	mov	r2, r0
 80052da:	4613      	mov	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	009a      	lsls	r2, r3, #2
 80052e2:	441a      	add	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ee:	4a5d      	ldr	r2, [pc, #372]	; (8005464 <UART_SetConfig+0x32c>)
 80052f0:	fba2 2303 	umull	r2, r3, r2, r3
 80052f4:	095b      	lsrs	r3, r3, #5
 80052f6:	2264      	movs	r2, #100	; 0x64
 80052f8:	fb02 f303 	mul.w	r3, r2, r3
 80052fc:	1aeb      	subs	r3, r5, r3
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	3332      	adds	r3, #50	; 0x32
 8005302:	4a58      	ldr	r2, [pc, #352]	; (8005464 <UART_SetConfig+0x32c>)
 8005304:	fba2 2303 	umull	r2, r3, r2, r3
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005310:	441c      	add	r4, r3
 8005312:	f7fe fb03 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 8005316:	4602      	mov	r2, r0
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	009a      	lsls	r2, r3, #2
 8005320:	441a      	add	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	fbb2 f5f3 	udiv	r5, r2, r3
 800532c:	f7fe faf6 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 8005330:	4602      	mov	r2, r0
 8005332:	4613      	mov	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	009a      	lsls	r2, r3, #2
 800533a:	441a      	add	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	fbb2 f3f3 	udiv	r3, r2, r3
 8005346:	4a47      	ldr	r2, [pc, #284]	; (8005464 <UART_SetConfig+0x32c>)
 8005348:	fba2 2303 	umull	r2, r3, r2, r3
 800534c:	095b      	lsrs	r3, r3, #5
 800534e:	2264      	movs	r2, #100	; 0x64
 8005350:	fb02 f303 	mul.w	r3, r2, r3
 8005354:	1aeb      	subs	r3, r5, r3
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	3332      	adds	r3, #50	; 0x32
 800535a:	4a42      	ldr	r2, [pc, #264]	; (8005464 <UART_SetConfig+0x32c>)
 800535c:	fba2 2303 	umull	r2, r3, r2, r3
 8005360:	095b      	lsrs	r3, r3, #5
 8005362:	f003 0207 	and.w	r2, r3, #7
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4422      	add	r2, r4
 800536c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800536e:	e0e7      	b.n	8005540 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a39      	ldr	r2, [pc, #228]	; (800545c <UART_SetConfig+0x324>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d004      	beq.n	8005384 <UART_SetConfig+0x24c>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a38      	ldr	r2, [pc, #224]	; (8005460 <UART_SetConfig+0x328>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d171      	bne.n	8005468 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005384:	f7fe fade 	bl	8003944 <HAL_RCC_GetPCLK2Freq>
 8005388:	4602      	mov	r2, r0
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	009a      	lsls	r2, r3, #2
 8005392:	441a      	add	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	fbb2 f3f3 	udiv	r3, r2, r3
 800539e:	4a31      	ldr	r2, [pc, #196]	; (8005464 <UART_SetConfig+0x32c>)
 80053a0:	fba2 2303 	umull	r2, r3, r2, r3
 80053a4:	095b      	lsrs	r3, r3, #5
 80053a6:	011c      	lsls	r4, r3, #4
 80053a8:	f7fe facc 	bl	8003944 <HAL_RCC_GetPCLK2Freq>
 80053ac:	4602      	mov	r2, r0
 80053ae:	4613      	mov	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	009a      	lsls	r2, r3, #2
 80053b6:	441a      	add	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	fbb2 f5f3 	udiv	r5, r2, r3
 80053c2:	f7fe fabf 	bl	8003944 <HAL_RCC_GetPCLK2Freq>
 80053c6:	4602      	mov	r2, r0
 80053c8:	4613      	mov	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	009a      	lsls	r2, r3, #2
 80053d0:	441a      	add	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053dc:	4a21      	ldr	r2, [pc, #132]	; (8005464 <UART_SetConfig+0x32c>)
 80053de:	fba2 2303 	umull	r2, r3, r2, r3
 80053e2:	095b      	lsrs	r3, r3, #5
 80053e4:	2264      	movs	r2, #100	; 0x64
 80053e6:	fb02 f303 	mul.w	r3, r2, r3
 80053ea:	1aeb      	subs	r3, r5, r3
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	3332      	adds	r3, #50	; 0x32
 80053f0:	4a1c      	ldr	r2, [pc, #112]	; (8005464 <UART_SetConfig+0x32c>)
 80053f2:	fba2 2303 	umull	r2, r3, r2, r3
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053fc:	441c      	add	r4, r3
 80053fe:	f7fe faa1 	bl	8003944 <HAL_RCC_GetPCLK2Freq>
 8005402:	4602      	mov	r2, r0
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	009a      	lsls	r2, r3, #2
 800540c:	441a      	add	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	fbb2 f5f3 	udiv	r5, r2, r3
 8005418:	f7fe fa94 	bl	8003944 <HAL_RCC_GetPCLK2Freq>
 800541c:	4602      	mov	r2, r0
 800541e:	4613      	mov	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	009a      	lsls	r2, r3, #2
 8005426:	441a      	add	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005432:	4a0c      	ldr	r2, [pc, #48]	; (8005464 <UART_SetConfig+0x32c>)
 8005434:	fba2 2303 	umull	r2, r3, r2, r3
 8005438:	095b      	lsrs	r3, r3, #5
 800543a:	2264      	movs	r2, #100	; 0x64
 800543c:	fb02 f303 	mul.w	r3, r2, r3
 8005440:	1aeb      	subs	r3, r5, r3
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	3332      	adds	r3, #50	; 0x32
 8005446:	4a07      	ldr	r2, [pc, #28]	; (8005464 <UART_SetConfig+0x32c>)
 8005448:	fba2 2303 	umull	r2, r3, r2, r3
 800544c:	095b      	lsrs	r3, r3, #5
 800544e:	f003 020f 	and.w	r2, r3, #15
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4422      	add	r2, r4
 8005458:	609a      	str	r2, [r3, #8]
 800545a:	e071      	b.n	8005540 <UART_SetConfig+0x408>
 800545c:	40011000 	.word	0x40011000
 8005460:	40011400 	.word	0x40011400
 8005464:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005468:	f7fe fa58 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 800546c:	4602      	mov	r2, r0
 800546e:	4613      	mov	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	009a      	lsls	r2, r3, #2
 8005476:	441a      	add	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005482:	4a31      	ldr	r2, [pc, #196]	; (8005548 <UART_SetConfig+0x410>)
 8005484:	fba2 2303 	umull	r2, r3, r2, r3
 8005488:	095b      	lsrs	r3, r3, #5
 800548a:	011c      	lsls	r4, r3, #4
 800548c:	f7fe fa46 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 8005490:	4602      	mov	r2, r0
 8005492:	4613      	mov	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	009a      	lsls	r2, r3, #2
 800549a:	441a      	add	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	fbb2 f5f3 	udiv	r5, r2, r3
 80054a6:	f7fe fa39 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 80054aa:	4602      	mov	r2, r0
 80054ac:	4613      	mov	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	009a      	lsls	r2, r3, #2
 80054b4:	441a      	add	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c0:	4a21      	ldr	r2, [pc, #132]	; (8005548 <UART_SetConfig+0x410>)
 80054c2:	fba2 2303 	umull	r2, r3, r2, r3
 80054c6:	095b      	lsrs	r3, r3, #5
 80054c8:	2264      	movs	r2, #100	; 0x64
 80054ca:	fb02 f303 	mul.w	r3, r2, r3
 80054ce:	1aeb      	subs	r3, r5, r3
 80054d0:	011b      	lsls	r3, r3, #4
 80054d2:	3332      	adds	r3, #50	; 0x32
 80054d4:	4a1c      	ldr	r2, [pc, #112]	; (8005548 <UART_SetConfig+0x410>)
 80054d6:	fba2 2303 	umull	r2, r3, r2, r3
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054e0:	441c      	add	r4, r3
 80054e2:	f7fe fa1b 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 80054e6:	4602      	mov	r2, r0
 80054e8:	4613      	mov	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	009a      	lsls	r2, r3, #2
 80054f0:	441a      	add	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	fbb2 f5f3 	udiv	r5, r2, r3
 80054fc:	f7fe fa0e 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 8005500:	4602      	mov	r2, r0
 8005502:	4613      	mov	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	009a      	lsls	r2, r3, #2
 800550a:	441a      	add	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	fbb2 f3f3 	udiv	r3, r2, r3
 8005516:	4a0c      	ldr	r2, [pc, #48]	; (8005548 <UART_SetConfig+0x410>)
 8005518:	fba2 2303 	umull	r2, r3, r2, r3
 800551c:	095b      	lsrs	r3, r3, #5
 800551e:	2264      	movs	r2, #100	; 0x64
 8005520:	fb02 f303 	mul.w	r3, r2, r3
 8005524:	1aeb      	subs	r3, r5, r3
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	3332      	adds	r3, #50	; 0x32
 800552a:	4a07      	ldr	r2, [pc, #28]	; (8005548 <UART_SetConfig+0x410>)
 800552c:	fba2 2303 	umull	r2, r3, r2, r3
 8005530:	095b      	lsrs	r3, r3, #5
 8005532:	f003 020f 	and.w	r2, r3, #15
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4422      	add	r2, r4
 800553c:	609a      	str	r2, [r3, #8]
}
 800553e:	e7ff      	b.n	8005540 <UART_SetConfig+0x408>
 8005540:	bf00      	nop
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bdb0      	pop	{r4, r5, r7, pc}
 8005548:	51eb851f 	.word	0x51eb851f

0800554c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800554c:	b084      	sub	sp, #16
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	f107 001c 	add.w	r0, r7, #28
 800555a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005560:	2b01      	cmp	r3, #1
 8005562:	d122      	bne.n	80055aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005568:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800558c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800558e:	2b01      	cmp	r3, #1
 8005590:	d105      	bne.n	800559e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f94a 	bl	8005838 <USB_CoreReset>
 80055a4:	4603      	mov	r3, r0
 80055a6:	73fb      	strb	r3, [r7, #15]
 80055a8:	e01a      	b.n	80055e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f93e 	bl	8005838 <USB_CoreReset>
 80055bc:	4603      	mov	r3, r0
 80055be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80055c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d106      	bne.n	80055d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	639a      	str	r2, [r3, #56]	; 0x38
 80055d2:	e005      	b.n	80055e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d10b      	bne.n	80055fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f043 0206 	orr.w	r2, r3, #6
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f043 0220 	orr.w	r2, r3, #32
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800560a:	b004      	add	sp, #16
 800560c:	4770      	bx	lr

0800560e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f043 0201 	orr.w	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f023 0201 	bic.w	r2, r3, #1
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b082      	sub	sp, #8
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	460b      	mov	r3, r1
 800565c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800566a:	78fb      	ldrb	r3, [r7, #3]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d106      	bne.n	800567e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	60da      	str	r2, [r3, #12]
 800567c:	e00b      	b.n	8005696 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800567e:	78fb      	ldrb	r3, [r7, #3]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d106      	bne.n	8005692 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	60da      	str	r2, [r3, #12]
 8005690:	e001      	b.n	8005696 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e003      	b.n	800569e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005696:	2032      	movs	r0, #50	; 0x32
 8005698:	f7fa ffe4 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
	...

080056a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	019b      	lsls	r3, r3, #6
 80056ba:	f043 0220 	orr.w	r2, r3, #32
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	3301      	adds	r3, #1
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4a09      	ldr	r2, [pc, #36]	; (80056f0 <USB_FlushTxFifo+0x48>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d901      	bls.n	80056d4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e006      	b.n	80056e2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	f003 0320 	and.w	r3, r3, #32
 80056dc:	2b20      	cmp	r3, #32
 80056de:	d0f0      	beq.n	80056c2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	00030d40 	.word	0x00030d40

080056f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80056fc:	2300      	movs	r3, #0
 80056fe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2210      	movs	r2, #16
 8005704:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3301      	adds	r3, #1
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4a09      	ldr	r2, [pc, #36]	; (8005734 <USB_FlushRxFifo+0x40>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d901      	bls.n	8005718 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e006      	b.n	8005726 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	f003 0310 	and.w	r3, r3, #16
 8005720:	2b10      	cmp	r3, #16
 8005722:	d0f0      	beq.n	8005706 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	00030d40 	.word	0x00030d40

08005738 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005738:	b480      	push	{r7}
 800573a:	b089      	sub	sp, #36	; 0x24
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	4611      	mov	r1, r2
 8005744:	461a      	mov	r2, r3
 8005746:	460b      	mov	r3, r1
 8005748:	71fb      	strb	r3, [r7, #7]
 800574a:	4613      	mov	r3, r2
 800574c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005756:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800575a:	2b00      	cmp	r3, #0
 800575c:	d11a      	bne.n	8005794 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800575e:	88bb      	ldrh	r3, [r7, #4]
 8005760:	3303      	adds	r3, #3
 8005762:	089b      	lsrs	r3, r3, #2
 8005764:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005766:	2300      	movs	r3, #0
 8005768:	61bb      	str	r3, [r7, #24]
 800576a:	e00f      	b.n	800578c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800576c:	79fb      	ldrb	r3, [r7, #7]
 800576e:	031a      	lsls	r2, r3, #12
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	4413      	add	r3, r2
 8005774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005778:	461a      	mov	r2, r3
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	3304      	adds	r3, #4
 8005784:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	3301      	adds	r3, #1
 800578a:	61bb      	str	r3, [r7, #24]
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	429a      	cmp	r2, r3
 8005792:	d3eb      	bcc.n	800576c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3724      	adds	r7, #36	; 0x24
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b089      	sub	sp, #36	; 0x24
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	4613      	mov	r3, r2
 80057ae:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80057b8:	88fb      	ldrh	r3, [r7, #6]
 80057ba:	3303      	adds	r3, #3
 80057bc:	089b      	lsrs	r3, r3, #2
 80057be:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80057c0:	2300      	movs	r3, #0
 80057c2:	61bb      	str	r3, [r7, #24]
 80057c4:	e00b      	b.n	80057de <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	601a      	str	r2, [r3, #0]
    pDest++;
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	3304      	adds	r3, #4
 80057d6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	3301      	adds	r3, #1
 80057dc:	61bb      	str	r3, [r7, #24]
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d3ef      	bcc.n	80057c6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80057e6:	69fb      	ldr	r3, [r7, #28]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3724      	adds	r7, #36	; 0x24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4013      	ands	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800580c:	68fb      	ldr	r3, [r7, #12]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f003 0301 	and.w	r3, r3, #1
}
 800582a:	4618      	mov	r0, r3
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
	...

08005838 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	3301      	adds	r3, #1
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4a13      	ldr	r2, [pc, #76]	; (800589c <USB_CoreReset+0x64>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d901      	bls.n	8005856 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e01b      	b.n	800588e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	daf2      	bge.n	8005844 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f043 0201 	orr.w	r2, r3, #1
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	3301      	adds	r3, #1
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4a09      	ldr	r2, [pc, #36]	; (800589c <USB_CoreReset+0x64>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d901      	bls.n	8005880 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e006      	b.n	800588e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b01      	cmp	r3, #1
 800588a:	d0f0      	beq.n	800586e <USB_CoreReset+0x36>

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	00030d40 	.word	0x00030d40

080058a0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058a0:	b084      	sub	sp, #16
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b084      	sub	sp, #16
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
 80058aa:	f107 001c 	add.w	r0, r7, #28
 80058ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058bc:	461a      	mov	r2, r3
 80058be:	2300      	movs	r3, #0
 80058c0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058de:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d018      	beq.n	8005924 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d10a      	bne.n	800590e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005906:	f043 0304 	orr.w	r3, r3, #4
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	e014      	b.n	8005938 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800591c:	f023 0304 	bic.w	r3, r3, #4
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	e009      	b.n	8005938 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005932:	f023 0304 	bic.w	r3, r3, #4
 8005936:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005938:	2110      	movs	r1, #16
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7ff feb4 	bl	80056a8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7ff fed7 	bl	80056f4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005946:	2300      	movs	r3, #0
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	e015      	b.n	8005978 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	4413      	add	r3, r2
 8005954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005958:	461a      	mov	r2, r3
 800595a:	f04f 33ff 	mov.w	r3, #4294967295
 800595e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4413      	add	r3, r2
 8005968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596c:	461a      	mov	r2, r3
 800596e:	2300      	movs	r3, #0
 8005970:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	3301      	adds	r3, #1
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	429a      	cmp	r2, r3
 800597e:	d3e5      	bcc.n	800594c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005980:	2101      	movs	r1, #1
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f8ac 	bl	8005ae0 <USB_DriveVbus>

  HAL_Delay(200U);
 8005988:	20c8      	movs	r0, #200	; 0xc8
 800598a:	f7fa fe6b 	bl	8000664 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f04f 32ff 	mov.w	r2, #4294967295
 800599a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00b      	beq.n	80059c0 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059ae:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a14      	ldr	r2, [pc, #80]	; (8005a04 <USB_HostInit+0x164>)
 80059b4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a13      	ldr	r2, [pc, #76]	; (8005a08 <USB_HostInit+0x168>)
 80059ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80059be:	e009      	b.n	80059d4 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2280      	movs	r2, #128	; 0x80
 80059c4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a10      	ldr	r2, [pc, #64]	; (8005a0c <USB_HostInit+0x16c>)
 80059ca:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a10      	ldr	r2, [pc, #64]	; (8005a10 <USB_HostInit+0x170>)
 80059d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d105      	bne.n	80059e6 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	f043 0210 	orr.w	r2, r3, #16
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699a      	ldr	r2, [r3, #24]
 80059ea:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <USB_HostInit+0x174>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059fe:	b004      	add	sp, #16
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	01000200 	.word	0x01000200
 8005a08:	00e00300 	.word	0x00e00300
 8005a0c:	00600080 	.word	0x00600080
 8005a10:	004000e0 	.word	0x004000e0
 8005a14:	a3200008 	.word	0xa3200008

08005a18 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	460b      	mov	r3, r1
 8005a22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a36:	f023 0303 	bic.w	r3, r3, #3
 8005a3a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	78fb      	ldrb	r3, [r7, #3]
 8005a46:	f003 0303 	and.w	r3, r3, #3
 8005a4a:	68f9      	ldr	r1, [r7, #12]
 8005a4c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a50:	4313      	orrs	r3, r2
 8005a52:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005a54:	78fb      	ldrb	r3, [r7, #3]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d107      	bne.n	8005a6a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a60:	461a      	mov	r2, r3
 8005a62:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005a66:	6053      	str	r3, [r2, #4]
 8005a68:	e009      	b.n	8005a7e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005a6a:	78fb      	ldrb	r3, [r7, #3]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d106      	bne.n	8005a7e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a76:	461a      	mov	r2, r3
 8005a78:	f241 7370 	movw	r3, #6000	; 0x1770
 8005a7c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005aac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aba:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005abc:	2064      	movs	r0, #100	; 0x64
 8005abe:	f7fa fdd1 	bl	8000664 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005aca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ace:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005ad0:	200a      	movs	r0, #10
 8005ad2:	f7fa fdc7 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b04:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d109      	bne.n	8005b24 <USB_DriveVbus+0x44>
 8005b10:	78fb      	ldrb	r3, [r7, #3]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d106      	bne.n	8005b24 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b22:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2e:	d109      	bne.n	8005b44 <USB_DriveVbus+0x64>
 8005b30:	78fb      	ldrb	r3, [r7, #3]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d106      	bne.n	8005b44 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b42:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b085      	sub	sp, #20
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	0c5b      	lsrs	r3, r3, #17
 8005b70:	f003 0303 	and.w	r3, r3, #3
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	b29b      	uxth	r3, r3
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
	...

08005ba4 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	4608      	mov	r0, r1
 8005bae:	4611      	mov	r1, r2
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	70fb      	strb	r3, [r7, #3]
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	70bb      	strb	r3, [r7, #2]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005bc6:	78fb      	ldrb	r3, [r7, #3]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005bda:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d87e      	bhi.n	8005ce0 <USB_HC_Init+0x13c>
 8005be2:	a201      	add	r2, pc, #4	; (adr r2, 8005be8 <USB_HC_Init+0x44>)
 8005be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be8:	08005bf9 	.word	0x08005bf9
 8005bec:	08005ca3 	.word	0x08005ca3
 8005bf0:	08005bf9 	.word	0x08005bf9
 8005bf4:	08005c65 	.word	0x08005c65
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005bf8:	78fb      	ldrb	r3, [r7, #3]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c04:	461a      	mov	r2, r3
 8005c06:	f240 439d 	movw	r3, #1181	; 0x49d
 8005c0a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005c0c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	da10      	bge.n	8005c36 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c14:	78fb      	ldrb	r3, [r7, #3]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	78fa      	ldrb	r2, [r7, #3]
 8005c24:	0151      	lsls	r1, r2, #5
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	440a      	add	r2, r1
 8005c2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c32:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005c34:	e057      	b.n	8005ce6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d051      	beq.n	8005ce6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005c42:	78fb      	ldrb	r3, [r7, #3]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	78fa      	ldrb	r2, [r7, #3]
 8005c52:	0151      	lsls	r1, r2, #5
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	440a      	add	r2, r1
 8005c58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c5c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005c60:	60d3      	str	r3, [r2, #12]
      break;
 8005c62:	e040      	b.n	8005ce6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c64:	78fb      	ldrb	r3, [r7, #3]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c70:	461a      	mov	r2, r3
 8005c72:	f240 639d 	movw	r3, #1693	; 0x69d
 8005c76:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	da34      	bge.n	8005cea <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	78fa      	ldrb	r2, [r7, #3]
 8005c90:	0151      	lsls	r1, r2, #5
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	440a      	add	r2, r1
 8005c96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c9e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005ca0:	e023      	b.n	8005cea <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ca2:	78fb      	ldrb	r3, [r7, #3]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cae:	461a      	mov	r2, r3
 8005cb0:	f240 2325 	movw	r3, #549	; 0x225
 8005cb4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005cb6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	da17      	bge.n	8005cee <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005cbe:	78fb      	ldrb	r3, [r7, #3]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	78fa      	ldrb	r2, [r7, #3]
 8005cce:	0151      	lsls	r1, r2, #5
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	440a      	add	r2, r1
 8005cd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cd8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005cdc:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005cde:	e006      	b.n	8005cee <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ce4:	e004      	b.n	8005cf0 <USB_HC_Init+0x14c>
      break;
 8005ce6:	bf00      	nop
 8005ce8:	e002      	b.n	8005cf0 <USB_HC_Init+0x14c>
      break;
 8005cea:	bf00      	nop
 8005cec:	e000      	b.n	8005cf0 <USB_HC_Init+0x14c>
      break;
 8005cee:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cf6:	699a      	ldr	r2, [r3, #24]
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	f003 030f 	and.w	r3, r3, #15
 8005cfe:	2101      	movs	r1, #1
 8005d00:	fa01 f303 	lsl.w	r3, r1, r3
 8005d04:	68b9      	ldr	r1, [r7, #8]
 8005d06:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005d1a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	da03      	bge.n	8005d2a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d26:	613b      	str	r3, [r7, #16]
 8005d28:	e001      	b.n	8005d2e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005d2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d103      	bne.n	8005d3e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005d36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	e001      	b.n	8005d42 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d42:	787b      	ldrb	r3, [r7, #1]
 8005d44:	059b      	lsls	r3, r3, #22
 8005d46:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d4a:	78bb      	ldrb	r3, [r7, #2]
 8005d4c:	02db      	lsls	r3, r3, #11
 8005d4e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d52:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d58:	049b      	lsls	r3, r3, #18
 8005d5a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d5e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005d62:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d66:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d6c:	78fb      	ldrb	r3, [r7, #3]
 8005d6e:	0159      	lsls	r1, r3, #5
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	440b      	add	r3, r1
 8005d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d78:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d7e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005d80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d84:	2b03      	cmp	r3, #3
 8005d86:	d10f      	bne.n	8005da8 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005d88:	78fb      	ldrb	r3, [r7, #3]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	78fa      	ldrb	r2, [r7, #3]
 8005d98:	0151      	lsls	r1, r2, #5
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	440a      	add	r2, r1
 8005d9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005da2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005da6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop

08005db8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08c      	sub	sp, #48	; 0x30
 8005dbc:	af02      	add	r7, sp, #8
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	785b      	ldrb	r3, [r3, #1]
 8005dce:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005dd4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d028      	beq.n	8005e34 <USB_HC_StartXfer+0x7c>
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	791b      	ldrb	r3, [r3, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d124      	bne.n	8005e34 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005dea:	79fb      	ldrb	r3, [r7, #7]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10b      	bne.n	8005e08 <USB_HC_StartXfer+0x50>
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	795b      	ldrb	r3, [r3, #5]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d107      	bne.n	8005e08 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	785b      	ldrb	r3, [r3, #1]
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 fa2e 	bl	8006260 <USB_DoPing>
      return HAL_OK;
 8005e04:	2300      	movs	r3, #0
 8005e06:	e112      	b.n	800602e <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8005e08:	79fb      	ldrb	r3, [r7, #7]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d112      	bne.n	8005e34 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	0151      	lsls	r1, r2, #5
 8005e20:	6a3a      	ldr	r2, [r7, #32]
 8005e22:	440a      	add	r2, r1
 8005e24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e28:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005e2c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2200      	movs	r2, #0
 8005e32:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d018      	beq.n	8005e6e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	8912      	ldrh	r2, [r2, #8]
 8005e44:	4413      	add	r3, r2
 8005e46:	3b01      	subs	r3, #1
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	8912      	ldrh	r2, [r2, #8]
 8005e4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e50:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005e52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005e54:	8b7b      	ldrh	r3, [r7, #26]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d90b      	bls.n	8005e72 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005e5a:	8b7b      	ldrh	r3, [r7, #26]
 8005e5c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005e5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	8912      	ldrh	r2, [r2, #8]
 8005e64:	fb02 f203 	mul.w	r2, r2, r3
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	611a      	str	r2, [r3, #16]
 8005e6c:	e001      	b.n	8005e72 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	78db      	ldrb	r3, [r3, #3]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d006      	beq.n	8005e88 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005e7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	8912      	ldrh	r2, [r2, #8]
 8005e80:	fb02 f203 	mul.w	r2, r2, r3
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e92:	04d9      	lsls	r1, r3, #19
 8005e94:	4b68      	ldr	r3, [pc, #416]	; (8006038 <USB_HC_StartXfer+0x280>)
 8005e96:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e98:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	7a9b      	ldrb	r3, [r3, #10]
 8005e9e:	075b      	lsls	r3, r3, #29
 8005ea0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ea4:	69f9      	ldr	r1, [r7, #28]
 8005ea6:	0148      	lsls	r0, r1, #5
 8005ea8:	6a39      	ldr	r1, [r7, #32]
 8005eaa:	4401      	add	r1, r0
 8005eac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005eb0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005eb2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005eb4:	79fb      	ldrb	r3, [r7, #7]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d009      	beq.n	8005ece <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	68d9      	ldr	r1, [r3, #12]
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eca:	460a      	mov	r2, r1
 8005ecc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	bf0c      	ite	eq
 8005ede:	2301      	moveq	r3, #1
 8005ee0:	2300      	movne	r3, #0
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	69fa      	ldr	r2, [r7, #28]
 8005ef6:	0151      	lsls	r1, r2, #5
 8005ef8:	6a3a      	ldr	r2, [r7, #32]
 8005efa:	440a      	add	r2, r1
 8005efc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f00:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f04:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	7e7b      	ldrb	r3, [r7, #25]
 8005f16:	075b      	lsls	r3, r3, #29
 8005f18:	69f9      	ldr	r1, [r7, #28]
 8005f1a:	0148      	lsls	r0, r1, #5
 8005f1c:	6a39      	ldr	r1, [r7, #32]
 8005f1e:	4401      	add	r1, r0
 8005f20:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005f24:	4313      	orrs	r3, r2
 8005f26:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a41      	ldr	r2, [pc, #260]	; (800603c <USB_HC_StartXfer+0x284>)
 8005f38:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f3a:	4b40      	ldr	r3, [pc, #256]	; (800603c <USB_HC_StartXfer+0x284>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f42:	4a3e      	ldr	r2, [pc, #248]	; (800603c <USB_HC_StartXfer+0x284>)
 8005f44:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	78db      	ldrb	r3, [r3, #3]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d006      	beq.n	8005f5c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005f4e:	4b3b      	ldr	r3, [pc, #236]	; (800603c <USB_HC_StartXfer+0x284>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f56:	4a39      	ldr	r2, [pc, #228]	; (800603c <USB_HC_StartXfer+0x284>)
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	e005      	b.n	8005f68 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005f5c:	4b37      	ldr	r3, [pc, #220]	; (800603c <USB_HC_StartXfer+0x284>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f64:	4a35      	ldr	r2, [pc, #212]	; (800603c <USB_HC_StartXfer+0x284>)
 8005f66:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f68:	4b34      	ldr	r3, [pc, #208]	; (800603c <USB_HC_StartXfer+0x284>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f70:	4a32      	ldr	r2, [pc, #200]	; (800603c <USB_HC_StartXfer+0x284>)
 8005f72:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f80:	461a      	mov	r2, r3
 8005f82:	4b2e      	ldr	r3, [pc, #184]	; (800603c <USB_HC_StartXfer+0x284>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005f88:	79fb      	ldrb	r3, [r7, #7]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d14e      	bne.n	800602c <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	78db      	ldrb	r3, [r3, #3]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d14a      	bne.n	800602c <USB_HC_StartXfer+0x274>
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d046      	beq.n	800602c <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	79db      	ldrb	r3, [r3, #7]
 8005fa2:	2b03      	cmp	r3, #3
 8005fa4:	d830      	bhi.n	8006008 <USB_HC_StartXfer+0x250>
 8005fa6:	a201      	add	r2, pc, #4	; (adr r2, 8005fac <USB_HC_StartXfer+0x1f4>)
 8005fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fac:	08005fbd 	.word	0x08005fbd
 8005fb0:	08005fe1 	.word	0x08005fe1
 8005fb4:	08005fbd 	.word	0x08005fbd
 8005fb8:	08005fe1 	.word	0x08005fe1
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	3303      	adds	r3, #3
 8005fc2:	089b      	lsrs	r3, r3, #2
 8005fc4:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005fc6:	8afa      	ldrh	r2, [r7, #22]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d91c      	bls.n	800600c <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	f043 0220 	orr.w	r2, r3, #32
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	619a      	str	r2, [r3, #24]
          }
          break;
 8005fde:	e015      	b.n	800600c <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	3303      	adds	r3, #3
 8005fe6:	089b      	lsrs	r3, r3, #2
 8005fe8:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005fea:	8afa      	ldrh	r2, [r7, #22]
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d90a      	bls.n	8006010 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	619a      	str	r2, [r3, #24]
          }
          break;
 8006006:	e003      	b.n	8006010 <USB_HC_StartXfer+0x258>

        default:
          break;
 8006008:	bf00      	nop
 800600a:	e002      	b.n	8006012 <USB_HC_StartXfer+0x25a>
          break;
 800600c:	bf00      	nop
 800600e:	e000      	b.n	8006012 <USB_HC_StartXfer+0x25a>
          break;
 8006010:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	68d9      	ldr	r1, [r3, #12]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	785a      	ldrb	r2, [r3, #1]
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	b298      	uxth	r0, r3
 8006020:	2300      	movs	r3, #0
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	4603      	mov	r3, r0
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f7ff fb86 	bl	8005738 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3728      	adds	r7, #40	; 0x28
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	1ff80000 	.word	0x1ff80000
 800603c:	200000ac 	.word	0x200000ac

08006040 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	b29b      	uxth	r3, r3
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006062:	b480      	push	{r7}
 8006064:	b087      	sub	sp, #28
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
 800606a:	460b      	mov	r3, r1
 800606c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006072:	78fb      	ldrb	r3, [r7, #3]
 8006074:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	4413      	add	r3, r2
 8006082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	0c9b      	lsrs	r3, r3, #18
 800608a:	f003 0303 	and.w	r3, r3, #3
 800608e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d002      	beq.n	800609c <USB_HC_Halt+0x3a>
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b02      	cmp	r3, #2
 800609a:	d16c      	bne.n	8006176 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	0151      	lsls	r1, r2, #5
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	440a      	add	r2, r1
 80060b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060ba:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d143      	bne.n	8006150 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	0151      	lsls	r1, r2, #5
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	440a      	add	r2, r1
 80060de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060e6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	0151      	lsls	r1, r2, #5
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	440a      	add	r2, r1
 80060fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006102:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006106:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	4413      	add	r3, r2
 8006110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	0151      	lsls	r1, r2, #5
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	440a      	add	r2, r1
 800611e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006122:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006126:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	3301      	adds	r3, #1
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006134:	d81d      	bhi.n	8006172 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	4413      	add	r3, r2
 800613e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800614c:	d0ec      	beq.n	8006128 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800614e:	e080      	b.n	8006252 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	4413      	add	r3, r2
 8006158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	0151      	lsls	r1, r2, #5
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	440a      	add	r2, r1
 8006166:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800616a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800616e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006170:	e06f      	b.n	8006252 <USB_HC_Halt+0x1f0>
          break;
 8006172:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006174:	e06d      	b.n	8006252 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	4413      	add	r3, r2
 800617e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	0151      	lsls	r1, r2, #5
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	440a      	add	r2, r1
 800618c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006190:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006194:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d143      	bne.n	800622e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	0151      	lsls	r1, r2, #5
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	440a      	add	r2, r1
 80061bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061c4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	0151      	lsls	r1, r2, #5
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	440a      	add	r2, r1
 80061dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061e4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	0151      	lsls	r1, r2, #5
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	440a      	add	r2, r1
 80061fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006200:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006204:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	3301      	adds	r3, #1
 800620a:	617b      	str	r3, [r7, #20]
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006212:	d81d      	bhi.n	8006250 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	4413      	add	r3, r2
 800621c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006226:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800622a:	d0ec      	beq.n	8006206 <USB_HC_Halt+0x1a4>
 800622c:	e011      	b.n	8006252 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	4413      	add	r3, r2
 8006236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	0151      	lsls	r1, r2, #5
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	440a      	add	r2, r1
 8006244:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006248:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800624c:	6013      	str	r3, [r2, #0]
 800624e:	e000      	b.n	8006252 <USB_HC_Halt+0x1f0>
          break;
 8006250:	bf00      	nop
    }
  }

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	371c      	adds	r7, #28
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006270:	78fb      	ldrb	r3, [r7, #3]
 8006272:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006274:	2301      	movs	r3, #1
 8006276:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	04da      	lsls	r2, r3, #19
 800627c:	4b15      	ldr	r3, [pc, #84]	; (80062d4 <USB_DoPing+0x74>)
 800627e:	4013      	ands	r3, r2
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	0151      	lsls	r1, r2, #5
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	440a      	add	r2, r1
 8006288:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800628c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006290:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	015a      	lsls	r2, r3, #5
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	4413      	add	r3, r2
 800629a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062a8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062b0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062be:	461a      	mov	r2, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	371c      	adds	r7, #28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	1ff80000 	.word	0x1ff80000

080062d8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7ff f9a1 	bl	8005630 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80062ee:	2110      	movs	r1, #16
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff f9d9 	bl	80056a8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7ff f9fc 	bl	80056f4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80062fc:	2300      	movs	r3, #0
 80062fe:	613b      	str	r3, [r7, #16]
 8006300:	e01f      	b.n	8006342 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4413      	add	r3, r2
 800630a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006318:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006320:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006328:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4413      	add	r3, r2
 8006332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006336:	461a      	mov	r2, r3
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	3301      	adds	r3, #1
 8006340:	613b      	str	r3, [r7, #16]
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	2b0f      	cmp	r3, #15
 8006346:	d9dc      	bls.n	8006302 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006348:	2300      	movs	r3, #0
 800634a:	613b      	str	r3, [r7, #16]
 800634c:	e034      	b.n	80063b8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	4413      	add	r3, r2
 8006356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006364:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800636c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006374:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	015a      	lsls	r2, r3, #5
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	4413      	add	r3, r2
 800637e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006382:	461a      	mov	r2, r3
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	3301      	adds	r3, #1
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006394:	d80c      	bhi.n	80063b0 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4413      	add	r3, r2
 800639e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063ac:	d0ec      	beq.n	8006388 <USB_StopHost+0xb0>
 80063ae:	e000      	b.n	80063b2 <USB_StopHost+0xda>
        break;
 80063b0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	3301      	adds	r3, #1
 80063b6:	613b      	str	r3, [r7, #16]
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	2b0f      	cmp	r3, #15
 80063bc:	d9c7      	bls.n	800634e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063c4:	461a      	mov	r2, r3
 80063c6:	f04f 33ff 	mov.w	r3, #4294967295
 80063ca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f04f 32ff 	mov.w	r2, #4294967295
 80063d2:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7ff f91a 	bl	800560e <USB_EnableGlobalInt>

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 80063e4:	b590      	push	{r4, r7, lr}
 80063e6:	b089      	sub	sp, #36	; 0x24
 80063e8:	af04      	add	r7, sp, #16
 80063ea:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 80063ec:	2302      	movs	r3, #2
 80063ee:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 80063f0:	2301      	movs	r3, #1
 80063f2:	2202      	movs	r2, #2
 80063f4:	2102      	movs	r1, #2
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fc3a 	bl	8006c70 <USBH_FindInterface>
 80063fc:	4603      	mov	r3, r0
 80063fe:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8006400:	7bbb      	ldrb	r3, [r7, #14]
 8006402:	2bff      	cmp	r3, #255	; 0xff
 8006404:	f000 812a 	beq.w	800665c <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8006408:	7bbb      	ldrb	r3, [r7, #14]
 800640a:	4619      	mov	r1, r3
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fc13 	bl	8006c38 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8006418:	2050      	movs	r0, #80	; 0x50
 800641a:	f003 f855 	bl	80094c8 <malloc>
 800641e:	4603      	mov	r3, r0
 8006420:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800642c:	7bbb      	ldrb	r3, [r7, #14]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	211a      	movs	r1, #26
 8006432:	fb01 f303 	mul.w	r3, r1, r3
 8006436:	4413      	add	r3, r2
 8006438:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	b25b      	sxtb	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	da15      	bge.n	8006470 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006444:	7bbb      	ldrb	r3, [r7, #14]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	211a      	movs	r1, #26
 800644a:	fb01 f303 	mul.w	r3, r1, r3
 800644e:	4413      	add	r3, r2
 8006450:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006454:	781a      	ldrb	r2, [r3, #0]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800645a:	7bbb      	ldrb	r3, [r7, #14]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	211a      	movs	r1, #26
 8006460:	fb01 f303 	mul.w	r3, r1, r3
 8006464:	4413      	add	r3, r2
 8006466:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800646a:	881a      	ldrh	r2, [r3, #0]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	785b      	ldrb	r3, [r3, #1]
 8006474:	4619      	mov	r1, r3
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f001 fd21 	bl	8007ebe <USBH_AllocPipe>
 800647c:	4603      	mov	r3, r0
 800647e:	461a      	mov	r2, r3
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	7819      	ldrb	r1, [r3, #0]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	7858      	ldrb	r0, [r3, #1]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	8952      	ldrh	r2, [r2, #10]
 800649c:	9202      	str	r2, [sp, #8]
 800649e:	2203      	movs	r2, #3
 80064a0:	9201      	str	r2, [sp, #4]
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	4623      	mov	r3, r4
 80064a6:	4602      	mov	r2, r0
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f001 fcd9 	bl	8007e60 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	2200      	movs	r2, #0
 80064b4:	4619      	mov	r1, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f002 ff2c 	bl	8009314 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 80064bc:	2300      	movs	r3, #0
 80064be:	2200      	movs	r2, #0
 80064c0:	210a      	movs	r1, #10
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fbd4 	bl	8006c70 <USBH_FindInterface>
 80064c8:	4603      	mov	r3, r0
 80064ca:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 80064cc:	7bbb      	ldrb	r3, [r7, #14]
 80064ce:	2bff      	cmp	r3, #255	; 0xff
 80064d0:	f000 80c4 	beq.w	800665c <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80064d4:	7bbb      	ldrb	r3, [r7, #14]
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	211a      	movs	r1, #26
 80064da:	fb01 f303 	mul.w	r3, r1, r3
 80064de:	4413      	add	r3, r2
 80064e0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	b25b      	sxtb	r3, r3
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	da16      	bge.n	800651a <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80064ec:	7bbb      	ldrb	r3, [r7, #14]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	211a      	movs	r1, #26
 80064f2:	fb01 f303 	mul.w	r3, r1, r3
 80064f6:	4413      	add	r3, r2
 80064f8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80064fc:	781a      	ldrb	r2, [r3, #0]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006502:	7bbb      	ldrb	r3, [r7, #14]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	211a      	movs	r1, #26
 8006508:	fb01 f303 	mul.w	r3, r1, r3
 800650c:	4413      	add	r3, r2
 800650e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006512:	881a      	ldrh	r2, [r3, #0]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	835a      	strh	r2, [r3, #26]
 8006518:	e015      	b.n	8006546 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800651a:	7bbb      	ldrb	r3, [r7, #14]
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	211a      	movs	r1, #26
 8006520:	fb01 f303 	mul.w	r3, r1, r3
 8006524:	4413      	add	r3, r2
 8006526:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800652a:	781a      	ldrb	r2, [r3, #0]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006530:	7bbb      	ldrb	r3, [r7, #14]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	211a      	movs	r1, #26
 8006536:	fb01 f303 	mul.w	r3, r1, r3
 800653a:	4413      	add	r3, r2
 800653c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006540:	881a      	ldrh	r2, [r3, #0]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006546:	7bbb      	ldrb	r3, [r7, #14]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	211a      	movs	r1, #26
 800654c:	fb01 f303 	mul.w	r3, r1, r3
 8006550:	4413      	add	r3, r2
 8006552:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	b25b      	sxtb	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	da16      	bge.n	800658c <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800655e:	7bbb      	ldrb	r3, [r7, #14]
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	211a      	movs	r1, #26
 8006564:	fb01 f303 	mul.w	r3, r1, r3
 8006568:	4413      	add	r3, r2
 800656a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800656e:	781a      	ldrb	r2, [r3, #0]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006574:	7bbb      	ldrb	r3, [r7, #14]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	211a      	movs	r1, #26
 800657a:	fb01 f303 	mul.w	r3, r1, r3
 800657e:	4413      	add	r3, r2
 8006580:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006584:	881a      	ldrh	r2, [r3, #0]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	835a      	strh	r2, [r3, #26]
 800658a:	e015      	b.n	80065b8 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800658c:	7bbb      	ldrb	r3, [r7, #14]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	211a      	movs	r1, #26
 8006592:	fb01 f303 	mul.w	r3, r1, r3
 8006596:	4413      	add	r3, r2
 8006598:	f203 3352 	addw	r3, r3, #850	; 0x352
 800659c:	781a      	ldrb	r2, [r3, #0]
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80065a2:	7bbb      	ldrb	r3, [r7, #14]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	211a      	movs	r1, #26
 80065a8:	fb01 f303 	mul.w	r3, r1, r3
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80065b2:	881a      	ldrh	r2, [r3, #0]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	7b9b      	ldrb	r3, [r3, #14]
 80065bc:	4619      	mov	r1, r3
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f001 fc7d 	bl	8007ebe <USBH_AllocPipe>
 80065c4:	4603      	mov	r3, r0
 80065c6:	461a      	mov	r2, r3
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	7bdb      	ldrb	r3, [r3, #15]
 80065d0:	4619      	mov	r1, r3
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f001 fc73 	bl	8007ebe <USBH_AllocPipe>
 80065d8:	4603      	mov	r3, r0
 80065da:	461a      	mov	r2, r3
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	7b59      	ldrb	r1, [r3, #13]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	7b98      	ldrb	r0, [r3, #14]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	8b12      	ldrh	r2, [r2, #24]
 80065f8:	9202      	str	r2, [sp, #8]
 80065fa:	2202      	movs	r2, #2
 80065fc:	9201      	str	r2, [sp, #4]
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	4623      	mov	r3, r4
 8006602:	4602      	mov	r2, r0
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f001 fc2b 	bl	8007e60 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	7b19      	ldrb	r1, [r3, #12]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	7bd8      	ldrb	r0, [r3, #15]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	8b52      	ldrh	r2, [r2, #26]
 8006622:	9202      	str	r2, [sp, #8]
 8006624:	2202      	movs	r2, #2
 8006626:	9201      	str	r2, [sp, #4]
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	4623      	mov	r3, r4
 800662c:	4602      	mov	r2, r0
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f001 fc16 	bl	8007e60 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	7b5b      	ldrb	r3, [r3, #13]
 8006640:	2200      	movs	r2, #0
 8006642:	4619      	mov	r1, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f002 fe65 	bl	8009314 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	7b1b      	ldrb	r3, [r3, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	4619      	mov	r1, r3
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f002 fe5e 	bl	8009314 <USBH_LL_SetToggle>
      status = USBH_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800665c:	7bfb      	ldrb	r3, [r7, #15]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	bd90      	pop	{r4, r7, pc}

08006666 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b084      	sub	sp, #16
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00e      	beq.n	800669e <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	4619      	mov	r1, r3
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f001 fc09 	bl	8007e9e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f001 fc31 	bl	8007efa <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	7b1b      	ldrb	r3, [r3, #12]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00e      	beq.n	80066c4 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	7b1b      	ldrb	r3, [r3, #12]
 80066aa:	4619      	mov	r1, r3
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f001 fbf6 	bl	8007e9e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	7b1b      	ldrb	r3, [r3, #12]
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f001 fc1e 	bl	8007efa <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	7b5b      	ldrb	r3, [r3, #13]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00e      	beq.n	80066ea <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	7b5b      	ldrb	r3, [r3, #13]
 80066d0:	4619      	mov	r1, r3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f001 fbe3 	bl	8007e9e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	7b5b      	ldrb	r3, [r3, #13]
 80066dc:	4619      	mov	r1, r3
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f001 fc0b 	bl	8007efa <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00b      	beq.n	800670e <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	4618      	mov	r0, r3
 8006700:	f002 feea 	bl	80094d8 <free>
    phost->pActiveClass->pData = 0U;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800670a:	2200      	movs	r2, #0
 800670c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8006720:	2302      	movs	r3, #2
 8006722:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800672a:	69db      	ldr	r3, [r3, #28]
 800672c:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	3340      	adds	r3, #64	; 0x40
 8006732:	4619      	mov	r1, r3
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f8b2 	bl	800689e <GetLineCoding>
 800673a:	4603      	mov	r3, r0
 800673c:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800673e:	7bfb      	ldrb	r3, [r7, #15]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d105      	bne.n	8006750 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800674a:	2102      	movs	r1, #2
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	4798      	blx	r3
  }
  return status;
 8006750:	7bfb      	ldrb	r3, [r7, #15]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
	...

0800675c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006764:	2301      	movs	r3, #1
 8006766:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800677c:	2b04      	cmp	r3, #4
 800677e:	d877      	bhi.n	8006870 <USBH_CDC_Process+0x114>
 8006780:	a201      	add	r2, pc, #4	; (adr r2, 8006788 <USBH_CDC_Process+0x2c>)
 8006782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006786:	bf00      	nop
 8006788:	0800679d 	.word	0x0800679d
 800678c:	080067a3 	.word	0x080067a3
 8006790:	080067d3 	.word	0x080067d3
 8006794:	08006847 	.word	0x08006847
 8006798:	08006855 	.word	0x08006855
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 800679c:	2300      	movs	r3, #0
 800679e:	73fb      	strb	r3, [r7, #15]
    break;
 80067a0:	e06d      	b.n	800687e <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067a6:	4619      	mov	r1, r3
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f897 	bl	80068dc <SetLineCoding>
 80067ae:	4603      	mov	r3, r0
 80067b0:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80067b2:	7bbb      	ldrb	r3, [r7, #14]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d104      	bne.n	80067c2 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80067c0:	e058      	b.n	8006874 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 80067c2:	7bbb      	ldrb	r3, [r7, #14]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d055      	beq.n	8006874 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2204      	movs	r2, #4
 80067cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80067d0:	e050      	b.n	8006874 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	3340      	adds	r3, #64	; 0x40
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f860 	bl	800689e <GetLineCoding>
 80067de:	4603      	mov	r3, r0
 80067e0:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80067e2:	7bbb      	ldrb	r3, [r7, #14]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d126      	bne.n	8006836 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067fa:	791b      	ldrb	r3, [r3, #4]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d13b      	bne.n	8006878 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800680a:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800680c:	429a      	cmp	r2, r3
 800680e:	d133      	bne.n	8006878 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800681a:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800681c:	429a      	cmp	r2, r3
 800681e:	d12b      	bne.n	8006878 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006828:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800682a:	429a      	cmp	r2, r3
 800682c:	d124      	bne.n	8006878 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f95a 	bl	8006ae8 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006834:	e020      	b.n	8006878 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8006836:	7bbb      	ldrb	r3, [r7, #14]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d01d      	beq.n	8006878 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2204      	movs	r2, #4
 8006840:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006844:	e018      	b.n	8006878 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f867 	bl	800691a <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f8dc 	bl	8006a0a <CDC_ProcessReception>
    break;
 8006852:	e014      	b.n	800687e <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8006854:	2100      	movs	r1, #0
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fece 	bl	80075f8 <USBH_ClrFeature>
 800685c:	4603      	mov	r3, r0
 800685e:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8006860:	7bbb      	ldrb	r3, [r7, #14]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10a      	bne.n	800687c <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800686e:	e005      	b.n	800687c <USBH_CDC_Process+0x120>

  default:
    break;
 8006870:	bf00      	nop
 8006872:	e004      	b.n	800687e <USBH_CDC_Process+0x122>
    break;
 8006874:	bf00      	nop
 8006876:	e002      	b.n	800687e <USBH_CDC_Process+0x122>
    break;
 8006878:	bf00      	nop
 800687a:	e000      	b.n	800687e <USBH_CDC_Process+0x122>
    break;
 800687c:	bf00      	nop

  }

  return status;
 800687e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006880:	4618      	mov	r0, r3
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b082      	sub	sp, #8
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	22a1      	movs	r2, #161	; 0xa1
 80068ac:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2221      	movs	r2, #33	; 0x21
 80068b2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2207      	movs	r2, #7
 80068c4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2207      	movs	r2, #7
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 f873 	bl	80079b8 <USBH_CtlReq>
 80068d2:	4603      	mov	r3, r0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2221      	movs	r2, #33	; 0x21
 80068ea:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2220      	movs	r2, #32
 80068f0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2207      	movs	r2, #7
 8006902:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2207      	movs	r2, #7
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f001 f854 	bl	80079b8 <USBH_CtlReq>
 8006910:	4603      	mov	r3, r0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b086      	sub	sp, #24
 800691e:	af02      	add	r7, sp, #8
 8006920:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006928:	69db      	ldr	r3, [r3, #28]
 800692a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800692c:	2300      	movs	r3, #0
 800692e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006936:	2b01      	cmp	r3, #1
 8006938:	d002      	beq.n	8006940 <CDC_ProcessTransmission+0x26>
 800693a:	2b02      	cmp	r3, #2
 800693c:	d025      	beq.n	800698a <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800693e:	e060      	b.n	8006a02 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	8b12      	ldrh	r2, [r2, #24]
 8006948:	4293      	cmp	r3, r2
 800694a:	d90c      	bls.n	8006966 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	69d9      	ldr	r1, [r3, #28]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8b1a      	ldrh	r2, [r3, #24]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	7b58      	ldrb	r0, [r3, #13]
 8006958:	2301      	movs	r3, #1
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	4603      	mov	r3, r0
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f001 fa3b 	bl	8007dda <USBH_BulkSendData>
 8006964:	e00c      	b.n	8006980 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800696e:	b29a      	uxth	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	7b58      	ldrb	r0, [r3, #13]
 8006974:	2301      	movs	r3, #1
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	4603      	mov	r3, r0
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f001 fa2d 	bl	8007dda <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2202      	movs	r2, #2
 8006984:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006988:	e03b      	b.n	8006a02 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	7b5b      	ldrb	r3, [r3, #13]
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f002 fc95 	bl	80092c0 <USBH_LL_GetURBState>
 8006996:	4603      	mov	r3, r0
 8006998:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800699a:	7afb      	ldrb	r3, [r7, #11]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d128      	bne.n	80069f2 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	8b12      	ldrh	r2, [r2, #24]
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d90e      	bls.n	80069ca <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	8b12      	ldrh	r2, [r2, #24]
 80069b4:	1a9a      	subs	r2, r3, r2
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	8b12      	ldrh	r2, [r2, #24]
 80069c2:	441a      	add	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	61da      	str	r2, [r3, #28]
 80069c8:	e002      	b.n	80069d0 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d004      	beq.n	80069e2 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80069e0:	e00e      	b.n	8006a00 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f868 	bl	8006ac0 <USBH_CDC_TransmitCallback>
    break;
 80069f0:	e006      	b.n	8006a00 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 80069f2:	7afb      	ldrb	r3, [r7, #11]
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d103      	bne.n	8006a00 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006a00:	bf00      	nop
  }
}
 8006a02:	bf00      	nop
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b086      	sub	sp, #24
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	d002      	beq.n	8006a30 <CDC_ProcessReception+0x26>
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	d00e      	beq.n	8006a4c <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8006a2e:	e043      	b.n	8006ab8 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	6a19      	ldr	r1, [r3, #32]
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	8b5a      	ldrh	r2, [r3, #26]
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	7b1b      	ldrb	r3, [r3, #12]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f001 f9f1 	bl	8007e24 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2204      	movs	r2, #4
 8006a46:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006a4a:	e035      	b.n	8006ab8 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	7b1b      	ldrb	r3, [r3, #12]
 8006a50:	4619      	mov	r1, r3
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f002 fc34 	bl	80092c0 <USBH_LL_GetURBState>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8006a5c:	7cfb      	ldrb	r3, [r7, #19]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d129      	bne.n	8006ab6 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	7b1b      	ldrb	r3, [r3, #12]
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f002 fb97 	bl	800919c <USBH_LL_GetLastXferSize>
 8006a6e:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d016      	beq.n	8006aa8 <CDC_ProcessReception+0x9e>
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	8b5b      	ldrh	r3, [r3, #26]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d910      	bls.n	8006aa8 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	1ad2      	subs	r2, r2, r3
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	6a1a      	ldr	r2, [r3, #32]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	441a      	add	r2, r3
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2203      	movs	r2, #3
 8006aa2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006aa6:	e006      	b.n	8006ab6 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f80f 	bl	8006ad4 <USBH_CDC_ReceiveCallback>
    break;
 8006ab6:	bf00      	nop
  }
}
 8006ab8:	bf00      	nop
 8006aba:	3718      	adds	r7, #24
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]

}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]

}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]

}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	4613      	mov	r3, r2
 8006b08:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006b10:	2302      	movs	r3, #2
 8006b12:	e019      	b.n	8006b48 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	79fa      	ldrb	r2, [r7, #7]
 8006b18:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f000 f80f 	bl	8006b50 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d003      	beq.n	8006b40 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f002 fa79 	bl	8009038 <USBH_LL_Init>

  return USBH_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006b5c:	e008      	b.n	8006b70 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	32e0      	adds	r2, #224	; 0xe0
 8006b64:	2100      	movs	r1, #0
 8006b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2b0e      	cmp	r3, #14
 8006b74:	d9f3      	bls.n	8006b5e <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006b76:	2300      	movs	r3, #0
 8006b78:	60fb      	str	r3, [r7, #12]
 8006b7a:	e009      	b.n	8006b90 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b86:	2200      	movs	r2, #0
 8006b88:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b96:	d3f1      	bcc.n	8006b7c <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2240      	movs	r2, #64	; 0x40
 8006bbc:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b085      	sub	sp, #20
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d017      	beq.n	8006c26 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10f      	bne.n	8006c20 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c06:	1c59      	adds	r1, r3, #1
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	33dc      	adds	r3, #220	; 0xdc
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	73fb      	strb	r3, [r7, #15]
 8006c1e:	e004      	b.n	8006c2a <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006c20:	2302      	movs	r3, #2
 8006c22:	73fb      	strb	r3, [r7, #15]
 8006c24:	e001      	b.n	8006c2a <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006c26:	2302      	movs	r3, #2
 8006c28:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	460b      	mov	r3, r1
 8006c42:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8006c4e:	78fa      	ldrb	r2, [r7, #3]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d204      	bcs.n	8006c5e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	78fa      	ldrb	r2, [r7, #3]
 8006c58:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8006c5c:	e001      	b.n	8006c62 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006c5e:	2302      	movs	r3, #2
 8006c60:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	4608      	mov	r0, r1
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	4603      	mov	r3, r0
 8006c80:	70fb      	strb	r3, [r7, #3]
 8006c82:	460b      	mov	r3, r1
 8006c84:	70bb      	strb	r3, [r7, #2]
 8006c86:	4613      	mov	r3, r2
 8006c88:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006c98:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c9a:	e025      	b.n	8006ce8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006c9c:	7dfb      	ldrb	r3, [r7, #23]
 8006c9e:	221a      	movs	r2, #26
 8006ca0:	fb02 f303 	mul.w	r3, r2, r3
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	4413      	add	r3, r2
 8006caa:	3302      	adds	r3, #2
 8006cac:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	795b      	ldrb	r3, [r3, #5]
 8006cb2:	78fa      	ldrb	r2, [r7, #3]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d002      	beq.n	8006cbe <USBH_FindInterface+0x4e>
 8006cb8:	78fb      	ldrb	r3, [r7, #3]
 8006cba:	2bff      	cmp	r3, #255	; 0xff
 8006cbc:	d111      	bne.n	8006ce2 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006cc2:	78ba      	ldrb	r2, [r7, #2]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d002      	beq.n	8006cce <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006cc8:	78bb      	ldrb	r3, [r7, #2]
 8006cca:	2bff      	cmp	r3, #255	; 0xff
 8006ccc:	d109      	bne.n	8006ce2 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006cd2:	787a      	ldrb	r2, [r7, #1]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d002      	beq.n	8006cde <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006cd8:	787b      	ldrb	r3, [r7, #1]
 8006cda:	2bff      	cmp	r3, #255	; 0xff
 8006cdc:	d101      	bne.n	8006ce2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006cde:	7dfb      	ldrb	r3, [r7, #23]
 8006ce0:	e006      	b.n	8006cf0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006ce2:	7dfb      	ldrb	r3, [r7, #23]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ce8:	7dfb      	ldrb	r3, [r7, #23]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d9d6      	bls.n	8006c9c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006cee:	23ff      	movs	r3, #255	; 0xff
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	371c      	adds	r7, #28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f002 f9d3 	bl	80090b0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f002 faea 	bl	80092e6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af04      	add	r7, sp, #16
 8006d22:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006d24:	2302      	movs	r3, #2
 8006d26:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 faec 	bl	800730a <USBH_IsPortEnabled>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10c      	bne.n	8006d52 <USBH_Process+0x36>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d007      	beq.n	8006d52 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	2b03      	cmp	r3, #3
 8006d4a:	d002      	beq.n	8006d52 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2203      	movs	r2, #3
 8006d50:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b0b      	cmp	r3, #11
 8006d5a:	f200 814c 	bhi.w	8006ff6 <USBH_Process+0x2da>
 8006d5e:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <USBH_Process+0x48>)
 8006d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d64:	08006d95 	.word	0x08006d95
 8006d68:	08006db7 	.word	0x08006db7
 8006d6c:	08006dcb 	.word	0x08006dcb
 8006d70:	08006fd1 	.word	0x08006fd1
 8006d74:	08006ff7 	.word	0x08006ff7
 8006d78:	08006e59 	.word	0x08006e59
 8006d7c:	08006f87 	.word	0x08006f87
 8006d80:	08006e89 	.word	0x08006e89
 8006d84:	08006ea9 	.word	0x08006ea9
 8006d88:	08006ec9 	.word	0x08006ec9
 8006d8c:	08006ef7 	.word	0x08006ef7
 8006d90:	08006fb9 	.word	0x08006fb9
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 812c 	beq.w	8006ffa <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8006da8:	20c8      	movs	r0, #200	; 0xc8
 8006daa:	f002 fae6 	bl	800937a <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f002 f9d9 	bl	8009166 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006db4:	e121      	b.n	8006ffa <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	f040 811e 	bne.w	8006ffe <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006dc8:	e119      	b.n	8006ffe <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8006dca:	2064      	movs	r0, #100	; 0x64
 8006dcc:	f002 fad5 	bl	800937a <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f002 f9a3 	bl	800911c <USBH_LL_GetSpeed>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	461a      	mov	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2205      	movs	r2, #5
 8006de4:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8006de6:	2100      	movs	r1, #0
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 f868 	bl	8007ebe <USBH_AllocPipe>
 8006dee:	4603      	mov	r3, r0
 8006df0:	461a      	mov	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8006df6:	2180      	movs	r1, #128	; 0x80
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f001 f860 	bl	8007ebe <USBH_AllocPipe>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	461a      	mov	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	7919      	ldrb	r1, [r3, #4]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006e1a:	b292      	uxth	r2, r2
 8006e1c:	9202      	str	r2, [sp, #8]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	9201      	str	r2, [sp, #4]
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	4603      	mov	r3, r0
 8006e26:	2280      	movs	r2, #128	; 0x80
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f001 f819 	bl	8007e60 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	7959      	ldrb	r1, [r3, #5]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006e42:	b292      	uxth	r2, r2
 8006e44:	9202      	str	r2, [sp, #8]
 8006e46:	2200      	movs	r2, #0
 8006e48:	9201      	str	r2, [sp, #4]
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2200      	movs	r2, #0
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f001 f805 	bl	8007e60 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006e56:	e0e3      	b.n	8007020 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f8e7 	bl	800702c <USBH_HandleEnum>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f040 80ce 	bne.w	8007002 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d103      	bne.n	8006e80 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2208      	movs	r2, #8
 8006e7c:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8006e7e:	e0c0      	b.n	8007002 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2207      	movs	r2, #7
 8006e84:	701a      	strb	r2, [r3, #0]
    break;
 8006e86:	e0bc      	b.n	8007002 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 80b9 	beq.w	8007006 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2208      	movs	r2, #8
 8006ea4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006ea6:	e0ae      	b.n	8007006 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fb59 	bl	800756a <USBH_SetCfg>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f040 80a5 	bne.w	800700a <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2209      	movs	r2, #9
 8006ec4:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006ec6:	e0a0      	b.n	800700a <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8006ece:	f003 0320 	and.w	r3, r3, #32
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00b      	beq.n	8006eee <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fb69 	bl	80075b0 <USBH_SetFeature>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f040 8094 	bne.w	800700e <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	220a      	movs	r2, #10
 8006eea:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006eec:	e08f      	b.n	800700e <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	220a      	movs	r2, #10
 8006ef2:	701a      	strb	r2, [r3, #0]
    break;
 8006ef4:	e08b      	b.n	800700e <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 8088 	beq.w	8007012 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	73fb      	strb	r3, [r7, #15]
 8006f0e:	e017      	b.n	8006f40 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	33dc      	adds	r3, #220	; 0xdc
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	791a      	ldrb	r2, [r3, #4]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d108      	bne.n	8006f3a <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	33dc      	adds	r3, #220	; 0xdc
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f3a:	7bfb      	ldrb	r3, [r7, #15]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	73fb      	strb	r3, [r7, #15]
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d0e4      	beq.n	8006f10 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d016      	beq.n	8006f7e <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	4798      	blx	r3
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d109      	bne.n	8006f76 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2206      	movs	r2, #6
 8006f66:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f6e:	2103      	movs	r1, #3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006f74:	e04d      	b.n	8007012 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	220d      	movs	r2, #13
 8006f7a:	701a      	strb	r2, [r3, #0]
    break;
 8006f7c:	e049      	b.n	8007012 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	220d      	movs	r2, #13
 8006f82:	701a      	strb	r2, [r3, #0]
    break;
 8006f84:	e045      	b.n	8007012 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00f      	beq.n	8006fb0 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	4798      	blx	r3
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8006fa0:	7bbb      	ldrb	r3, [r7, #14]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d136      	bne.n	8007016 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	220b      	movs	r2, #11
 8006fac:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8006fae:	e032      	b.n	8007016 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	220d      	movs	r2, #13
 8006fb4:	701a      	strb	r2, [r3, #0]
    break;
 8006fb6:	e02e      	b.n	8007016 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d02b      	beq.n	800701a <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	4798      	blx	r3
    }
    break;
 8006fce:	e024      	b.n	800701a <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f7ff fdbd 	bl	8006b50 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d01e      	beq.n	800701e <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8006ff4:	e013      	b.n	800701e <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8006ff6:	bf00      	nop
 8006ff8:	e012      	b.n	8007020 <USBH_Process+0x304>
    break;
 8006ffa:	bf00      	nop
 8006ffc:	e010      	b.n	8007020 <USBH_Process+0x304>
    break;
 8006ffe:	bf00      	nop
 8007000:	e00e      	b.n	8007020 <USBH_Process+0x304>
    break;
 8007002:	bf00      	nop
 8007004:	e00c      	b.n	8007020 <USBH_Process+0x304>
    break;
 8007006:	bf00      	nop
 8007008:	e00a      	b.n	8007020 <USBH_Process+0x304>
    break;
 800700a:	bf00      	nop
 800700c:	e008      	b.n	8007020 <USBH_Process+0x304>
    break;
 800700e:	bf00      	nop
 8007010:	e006      	b.n	8007020 <USBH_Process+0x304>
    break;
 8007012:	bf00      	nop
 8007014:	e004      	b.n	8007020 <USBH_Process+0x304>
    break;
 8007016:	bf00      	nop
 8007018:	e002      	b.n	8007020 <USBH_Process+0x304>
    break;
 800701a:	bf00      	nop
 800701c:	e000      	b.n	8007020 <USBH_Process+0x304>
    break;
 800701e:	bf00      	nop
  }
 return USBH_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop

0800702c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b088      	sub	sp, #32
 8007030:	af04      	add	r7, sp, #16
 8007032:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007034:	2301      	movs	r3, #1
 8007036:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	785b      	ldrb	r3, [r3, #1]
 800703c:	2b07      	cmp	r3, #7
 800703e:	f200 80f8 	bhi.w	8007232 <USBH_HandleEnum+0x206>
 8007042:	a201      	add	r2, pc, #4	; (adr r2, 8007048 <USBH_HandleEnum+0x1c>)
 8007044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007048:	08007069 	.word	0x08007069
 800704c:	080070db 	.word	0x080070db
 8007050:	080070f3 	.word	0x080070f3
 8007054:	08007169 	.word	0x08007169
 8007058:	0800717f 	.word	0x0800717f
 800705c:	0800719b 	.word	0x0800719b
 8007060:	080071cf 	.word	0x080071cf
 8007064:	08007203 	.word	0x08007203
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8007068:	2108      	movs	r1, #8
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f9ad 	bl	80073ca <USBH_Get_DevDesc>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	f040 80df 	bne.w	8007236 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	7919      	ldrb	r1, [r3, #4]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800709c:	b292      	uxth	r2, r2
 800709e:	9202      	str	r2, [sp, #8]
 80070a0:	2200      	movs	r2, #0
 80070a2:	9201      	str	r2, [sp, #4]
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	4603      	mov	r3, r0
 80070a8:	2280      	movs	r2, #128	; 0x80
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fed8 	bl	8007e60 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	7959      	ldrb	r1, [r3, #5]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80070c4:	b292      	uxth	r2, r2
 80070c6:	9202      	str	r2, [sp, #8]
 80070c8:	2200      	movs	r2, #0
 80070ca:	9201      	str	r2, [sp, #4]
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	4603      	mov	r3, r0
 80070d0:	2200      	movs	r2, #0
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fec4 	bl	8007e60 <USBH_OpenPipe>

    }
    break;
 80070d8:	e0ad      	b.n	8007236 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80070da:	2112      	movs	r1, #18
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f974 	bl	80073ca <USBH_Get_DevDesc>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f040 80a8 	bne.w	800723a <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2202      	movs	r2, #2
 80070ee:	705a      	strb	r2, [r3, #1]

    }
    break;
 80070f0:	e0a3      	b.n	800723a <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80070f2:	2101      	movs	r1, #1
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fa14 	bl	8007522 <USBH_SetAddress>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f040 809e 	bne.w	800723e <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8007102:	2002      	movs	r0, #2
 8007104:	f002 f939 	bl	800937a <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2203      	movs	r2, #3
 8007114:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	7919      	ldrb	r1, [r3, #4]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800712a:	b292      	uxth	r2, r2
 800712c:	9202      	str	r2, [sp, #8]
 800712e:	2200      	movs	r2, #0
 8007130:	9201      	str	r2, [sp, #4]
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	4603      	mov	r3, r0
 8007136:	2280      	movs	r2, #128	; 0x80
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fe91 	bl	8007e60 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	7959      	ldrb	r1, [r3, #5]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007152:	b292      	uxth	r2, r2
 8007154:	9202      	str	r2, [sp, #8]
 8007156:	2200      	movs	r2, #0
 8007158:	9201      	str	r2, [sp, #4]
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	4603      	mov	r3, r0
 800715e:	2200      	movs	r2, #0
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fe7d 	bl	8007e60 <USBH_OpenPipe>
    }
    break;
 8007166:	e06a      	b.n	800723e <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8007168:	2109      	movs	r1, #9
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f955 	bl	800741a <USBH_Get_CfgDesc>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d165      	bne.n	8007242 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2204      	movs	r2, #4
 800717a:	705a      	strb	r2, [r3, #1]
    }
    break;
 800717c:	e061      	b.n	8007242 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f947 	bl	800741a <USBH_Get_CfgDesc>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d159      	bne.n	8007246 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2205      	movs	r2, #5
 8007196:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007198:	e055      	b.n	8007246 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d010      	beq.n	80071c6 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80071b0:	23ff      	movs	r3, #255	; 0xff
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f955 	bl	8007462 <USBH_Get_StringDesc>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d145      	bne.n	800724a <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2206      	movs	r2, #6
 80071c2:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80071c4:	e041      	b.n	800724a <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2206      	movs	r2, #6
 80071ca:	705a      	strb	r2, [r3, #1]
    break;
 80071cc:	e03d      	b.n	800724a <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d010      	beq.n	80071fa <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80071e4:	23ff      	movs	r3, #255	; 0xff
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f93b 	bl	8007462 <USBH_Get_StringDesc>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d12d      	bne.n	800724e <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2207      	movs	r2, #7
 80071f6:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80071f8:	e029      	b.n	800724e <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2207      	movs	r2, #7
 80071fe:	705a      	strb	r2, [r3, #1]
    break;
 8007200:	e025      	b.n	800724e <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00f      	beq.n	800722c <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007218:	23ff      	movs	r3, #255	; 0xff
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f921 	bl	8007462 <USBH_Get_StringDesc>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d115      	bne.n	8007252 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800722a:	e012      	b.n	8007252 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 800722c:	2300      	movs	r3, #0
 800722e:	73fb      	strb	r3, [r7, #15]
    break;
 8007230:	e00f      	b.n	8007252 <USBH_HandleEnum+0x226>

  default:
    break;
 8007232:	bf00      	nop
 8007234:	e00e      	b.n	8007254 <USBH_HandleEnum+0x228>
    break;
 8007236:	bf00      	nop
 8007238:	e00c      	b.n	8007254 <USBH_HandleEnum+0x228>
    break;
 800723a:	bf00      	nop
 800723c:	e00a      	b.n	8007254 <USBH_HandleEnum+0x228>
    break;
 800723e:	bf00      	nop
 8007240:	e008      	b.n	8007254 <USBH_HandleEnum+0x228>
    break;
 8007242:	bf00      	nop
 8007244:	e006      	b.n	8007254 <USBH_HandleEnum+0x228>
    break;
 8007246:	bf00      	nop
 8007248:	e004      	b.n	8007254 <USBH_HandleEnum+0x228>
    break;
 800724a:	bf00      	nop
 800724c:	e002      	b.n	8007254 <USBH_HandleEnum+0x228>
    break;
 800724e:	bf00      	nop
 8007250:	e000      	b.n	8007254 <USBH_HandleEnum+0x228>
    break;
 8007252:	bf00      	nop
  }
  return Status;
 8007254:	7bfb      	ldrb	r3, [r7, #15]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop

08007260 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	683a      	ldr	r2, [r7, #0]
 800726e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8007272:	bf00      	nop
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b082      	sub	sp, #8
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 f804 	bl	80072a2 <USBH_HandleSof>
}
 800729a:	bf00      	nop
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b082      	sub	sp, #8
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b0b      	cmp	r3, #11
 80072b2:	d10a      	bne.n	80072ca <USBH_HandleSof+0x28>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d005      	beq.n	80072ca <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	4798      	blx	r3
  }
}
 80072ca:	bf00      	nop
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b083      	sub	sp, #12
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80072e2:	bf00      	nop
}
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b083      	sub	sp, #12
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80072fe:	bf00      	nop
}
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800730a:	b480      	push	{r7}
 800730c:	b083      	sub	sp, #12
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8007318:	4618      	mov	r0, r3
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10f      	bne.n	8007356 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00e      	beq.n	8007366 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800734e:	2104      	movs	r1, #4
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	4798      	blx	r3
 8007354:	e007      	b.n	8007366 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800735c:	2b01      	cmp	r3, #1
 800735e:	d102      	bne.n	8007366 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2202      	movs	r2, #2
 8007364:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f001 feb4 	bl	80090e6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	791b      	ldrb	r3, [r3, #4]
 8007382:	4619      	mov	r1, r3
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fdb8 	bl	8007efa <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	795b      	ldrb	r3, [r3, #5]
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fdb2 	bl	8007efa <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d005      	beq.n	80073b4 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80073ae:	2105      	movs	r1, #5
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f001 fe7b 	bl	80090b0 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2203      	movs	r2, #3
 80073be:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b086      	sub	sp, #24
 80073ce:	af02      	add	r7, sp, #8
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	460b      	mov	r3, r1
 80073d4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80073dc:	78fb      	ldrb	r3, [r7, #3]
 80073de:	b29b      	uxth	r3, r3
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	4613      	mov	r3, r2
 80073e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073e8:	2100      	movs	r1, #0
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f864 	bl	80074b8 <USBH_GetDescriptor>
 80073f0:	4603      	mov	r3, r0
 80073f2:	73fb      	strb	r3, [r7, #15]
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10a      	bne.n	8007410 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f203 3022 	addw	r0, r3, #802	; 0x322
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007406:	78fa      	ldrb	r2, [r7, #3]
 8007408:	b292      	uxth	r2, r2
 800740a:	4619      	mov	r1, r3
 800740c:	f000 f918 	bl	8007640 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8007410:	7bfb      	ldrb	r3, [r7, #15]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800741a:	b580      	push	{r7, lr}
 800741c:	b086      	sub	sp, #24
 800741e:	af02      	add	r7, sp, #8
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	460b      	mov	r3, r1
 8007424:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	331c      	adds	r3, #28
 800742a:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800742c:	887b      	ldrh	r3, [r7, #2]
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007436:	2100      	movs	r1, #0
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f83d 	bl	80074b8 <USBH_GetDescriptor>
 800743e:	4603      	mov	r3, r0
 8007440:	72fb      	strb	r3, [r7, #11]
 8007442:	7afb      	ldrb	r3, [r7, #11]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d107      	bne.n	8007458 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800744e:	887a      	ldrh	r2, [r7, #2]
 8007450:	68f9      	ldr	r1, [r7, #12]
 8007452:	4618      	mov	r0, r3
 8007454:	f000 f964 	bl	8007720 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8007458:	7afb      	ldrb	r3, [r7, #11]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b088      	sub	sp, #32
 8007466:	af02      	add	r7, sp, #8
 8007468:	60f8      	str	r0, [r7, #12]
 800746a:	607a      	str	r2, [r7, #4]
 800746c:	461a      	mov	r2, r3
 800746e:	460b      	mov	r3, r1
 8007470:	72fb      	strb	r3, [r7, #11]
 8007472:	4613      	mov	r3, r2
 8007474:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8007476:	7afb      	ldrb	r3, [r7, #11]
 8007478:	b29b      	uxth	r3, r3
 800747a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800747e:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007486:	893b      	ldrh	r3, [r7, #8]
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	460b      	mov	r3, r1
 800748c:	2100      	movs	r1, #0
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f000 f812 	bl	80074b8 <USBH_GetDescriptor>
 8007494:	4603      	mov	r3, r0
 8007496:	75fb      	strb	r3, [r7, #23]
 8007498:	7dfb      	ldrb	r3, [r7, #23]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d107      	bne.n	80074ae <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80074a4:	893a      	ldrh	r2, [r7, #8]
 80074a6:	6879      	ldr	r1, [r7, #4]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 fa37 	bl	800791c <USBH_ParseStringDesc>
  }
  return status;
 80074ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3718      	adds	r7, #24
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	607b      	str	r3, [r7, #4]
 80074c2:	460b      	mov	r3, r1
 80074c4:	72fb      	strb	r3, [r7, #11]
 80074c6:	4613      	mov	r3, r2
 80074c8:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	789b      	ldrb	r3, [r3, #2]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d11c      	bne.n	800750c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80074d2:	7afb      	ldrb	r3, [r7, #11]
 80074d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2206      	movs	r2, #6
 80074e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	893a      	ldrh	r2, [r7, #8]
 80074e8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80074ea:	893b      	ldrh	r3, [r7, #8]
 80074ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80074f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074f4:	d104      	bne.n	8007500 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f240 4209 	movw	r2, #1033	; 0x409
 80074fc:	829a      	strh	r2, [r3, #20]
 80074fe:	e002      	b.n	8007506 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	8b3a      	ldrh	r2, [r7, #24]
 800750a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800750c:	8b3b      	ldrh	r3, [r7, #24]
 800750e:	461a      	mov	r2, r3
 8007510:	6879      	ldr	r1, [r7, #4]
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f000 fa50 	bl	80079b8 <USBH_CtlReq>
 8007518:	4603      	mov	r3, r0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b082      	sub	sp, #8
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	460b      	mov	r3, r1
 800752c:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	789b      	ldrb	r3, [r3, #2]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d10f      	bne.n	8007556 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2205      	movs	r2, #5
 8007540:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007542:	78fb      	ldrb	r3, [r7, #3]
 8007544:	b29a      	uxth	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007556:	2200      	movs	r2, #0
 8007558:	2100      	movs	r1, #0
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fa2c 	bl	80079b8 <USBH_CtlReq>
 8007560:	4603      	mov	r3, r0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b082      	sub	sp, #8
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	460b      	mov	r3, r1
 8007574:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	789b      	ldrb	r3, [r3, #2]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d10e      	bne.n	800759c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2209      	movs	r2, #9
 8007588:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	887a      	ldrh	r2, [r7, #2]
 800758e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 800759c:	2200      	movs	r2, #0
 800759e:	2100      	movs	r1, #0
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 fa09 	bl	80079b8 <USBH_CtlReq>
 80075a6:	4603      	mov	r3, r0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	789b      	ldrb	r3, [r3, #2]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d10f      	bne.n	80075e4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2203      	movs	r2, #3
 80075ce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80075d0:	78fb      	ldrb	r3, [r7, #3]
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80075e4:	2200      	movs	r2, #0
 80075e6:	2100      	movs	r1, #0
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f9e5 	bl	80079b8 <USBH_CtlReq>
 80075ee:	4603      	mov	r3, r0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	460b      	mov	r3, r1
 8007602:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	789b      	ldrb	r3, [r3, #2]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d10f      	bne.n	800762c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800761e:	78fb      	ldrb	r3, [r7, #3]
 8007620:	b29a      	uxth	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800762c:	2200      	movs	r2, #0
 800762e:	2100      	movs	r1, #0
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f9c1 	bl	80079b8 <USBH_CtlReq>
 8007636:	4603      	mov	r3, r0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	4613      	mov	r3, r2
 800764c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	781a      	ldrb	r2, [r3, #0]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	785a      	ldrb	r2, [r3, #1]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	3302      	adds	r3, #2
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	b29a      	uxth	r2, r3
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	3303      	adds	r3, #3
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	b29b      	uxth	r3, r3
 800766e:	021b      	lsls	r3, r3, #8
 8007670:	b29b      	uxth	r3, r3
 8007672:	4313      	orrs	r3, r2
 8007674:	b29a      	uxth	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	791a      	ldrb	r2, [r3, #4]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	795a      	ldrb	r2, [r3, #5]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	799a      	ldrb	r2, [r3, #6]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	79da      	ldrb	r2, [r3, #7]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800769a:	88fb      	ldrh	r3, [r7, #6]
 800769c:	2b08      	cmp	r3, #8
 800769e:	d939      	bls.n	8007714 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	3308      	adds	r3, #8
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	3309      	adds	r3, #9
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	021b      	lsls	r3, r3, #8
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	4313      	orrs	r3, r2
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	330a      	adds	r3, #10
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	330b      	adds	r3, #11
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	021b      	lsls	r3, r3, #8
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	4313      	orrs	r3, r2
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	330c      	adds	r3, #12
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	b29a      	uxth	r2, r3
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	330d      	adds	r3, #13
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	021b      	lsls	r3, r3, #8
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	4313      	orrs	r3, r2
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	7b9a      	ldrb	r2, [r3, #14]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	7bda      	ldrb	r2, [r3, #15]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	7c1a      	ldrb	r2, [r3, #16]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	7c5a      	ldrb	r2, [r3, #17]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	745a      	strb	r2, [r3, #17]
  }
}
 8007714:	bf00      	nop
 8007716:	3714      	adds	r7, #20
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b08a      	sub	sp, #40	; 0x28
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	4613      	mov	r3, r2
 800772c:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007738:	2300      	movs	r3, #0
 800773a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	781a      	ldrb	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	785a      	ldrb	r2, [r3, #1]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	3302      	adds	r3, #2
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	b29a      	uxth	r2, r3
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	3303      	adds	r3, #3
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	b29b      	uxth	r3, r3
 8007762:	021b      	lsls	r3, r3, #8
 8007764:	b29b      	uxth	r3, r3
 8007766:	4313      	orrs	r3, r2
 8007768:	b29a      	uxth	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	791a      	ldrb	r2, [r3, #4]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	795a      	ldrb	r2, [r3, #5]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	799a      	ldrb	r2, [r3, #6]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	79da      	ldrb	r2, [r3, #7]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	7a1a      	ldrb	r2, [r3, #8]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007796:	88fb      	ldrh	r3, [r7, #6]
 8007798:	2b09      	cmp	r3, #9
 800779a:	d95f      	bls.n	800785c <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800779c:	2309      	movs	r3, #9
 800779e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80077a0:	2300      	movs	r3, #0
 80077a2:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80077a4:	e051      	b.n	800784a <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80077a6:	f107 0316 	add.w	r3, r7, #22
 80077aa:	4619      	mov	r1, r3
 80077ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077ae:	f000 f8e8 	bl	8007982 <USBH_GetNextDesc>
 80077b2:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	785b      	ldrb	r3, [r3, #1]
 80077b8:	2b04      	cmp	r3, #4
 80077ba:	d146      	bne.n	800784a <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80077bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077c0:	221a      	movs	r2, #26
 80077c2:	fb02 f303 	mul.w	r3, r2, r3
 80077c6:	3308      	adds	r3, #8
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	4413      	add	r3, r2
 80077cc:	3302      	adds	r3, #2
 80077ce:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 80077d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077d2:	69f8      	ldr	r0, [r7, #28]
 80077d4:	f000 f846 	bl	8007864 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80077d8:	2300      	movs	r3, #0
 80077da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80077de:	2300      	movs	r3, #0
 80077e0:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80077e2:	e022      	b.n	800782a <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 80077e4:	f107 0316 	add.w	r3, r7, #22
 80077e8:	4619      	mov	r1, r3
 80077ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077ec:	f000 f8c9 	bl	8007982 <USBH_GetNextDesc>
 80077f0:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	785b      	ldrb	r3, [r3, #1]
 80077f6:	2b05      	cmp	r3, #5
 80077f8:	d117      	bne.n	800782a <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80077fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077fe:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007802:	3201      	adds	r2, #1
 8007804:	00d2      	lsls	r2, r2, #3
 8007806:	211a      	movs	r1, #26
 8007808:	fb01 f303 	mul.w	r3, r1, r3
 800780c:	4413      	add	r3, r2
 800780e:	3308      	adds	r3, #8
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	4413      	add	r3, r2
 8007814:	3304      	adds	r3, #4
 8007816:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8007818:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800781a:	69b8      	ldr	r0, [r7, #24]
 800781c:	f000 f851 	bl	80078c2 <USBH_ParseEPDesc>
            ep_ix++;
 8007820:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007824:	3301      	adds	r3, #1
 8007826:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	791b      	ldrb	r3, [r3, #4]
 800782e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007832:	429a      	cmp	r2, r3
 8007834:	d204      	bcs.n	8007840 <USBH_ParseCfgDesc+0x120>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	885a      	ldrh	r2, [r3, #2]
 800783a:	8afb      	ldrh	r3, [r7, #22]
 800783c:	429a      	cmp	r2, r3
 800783e:	d8d1      	bhi.n	80077e4 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007840:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007844:	3301      	adds	r3, #1
 8007846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800784a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800784e:	2b01      	cmp	r3, #1
 8007850:	d804      	bhi.n	800785c <USBH_ParseCfgDesc+0x13c>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	885a      	ldrh	r2, [r3, #2]
 8007856:	8afb      	ldrh	r3, [r7, #22]
 8007858:	429a      	cmp	r2, r3
 800785a:	d8a4      	bhi.n	80077a6 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800785c:	bf00      	nop
 800785e:	3728      	adds	r7, #40	; 0x28
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781a      	ldrb	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	785a      	ldrb	r2, [r3, #1]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	789a      	ldrb	r2, [r3, #2]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	78da      	ldrb	r2, [r3, #3]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	791a      	ldrb	r2, [r3, #4]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	795a      	ldrb	r2, [r3, #5]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	799a      	ldrb	r2, [r3, #6]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	79da      	ldrb	r2, [r3, #7]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	7a1a      	ldrb	r2, [r3, #8]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	721a      	strb	r2, [r3, #8]
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	781a      	ldrb	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	785a      	ldrb	r2, [r3, #1]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	789a      	ldrb	r2, [r3, #2]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	78da      	ldrb	r2, [r3, #3]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	3304      	adds	r3, #4
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	3305      	adds	r3, #5
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	021b      	lsls	r3, r3, #8
 80078fe:	b29b      	uxth	r3, r3
 8007900:	4313      	orrs	r3, r2
 8007902:	b29a      	uxth	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	799a      	ldrb	r2, [r3, #6]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	719a      	strb	r2, [r3, #6]
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800791c:	b480      	push	{r7}
 800791e:	b087      	sub	sp, #28
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	4613      	mov	r3, r2
 8007928:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	3301      	adds	r3, #1
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	2b03      	cmp	r3, #3
 8007932:	d120      	bne.n	8007976 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	1e9a      	subs	r2, r3, #2
 800793a:	88fb      	ldrh	r3, [r7, #6]
 800793c:	4293      	cmp	r3, r2
 800793e:	bf28      	it	cs
 8007940:	4613      	movcs	r3, r2
 8007942:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	3302      	adds	r3, #2
 8007948:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800794a:	2300      	movs	r3, #0
 800794c:	82fb      	strh	r3, [r7, #22]
 800794e:	e00b      	b.n	8007968 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007950:	8afb      	ldrh	r3, [r7, #22]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	4413      	add	r3, r2
 8007956:	781a      	ldrb	r2, [r3, #0]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	3301      	adds	r3, #1
 8007960:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007962:	8afb      	ldrh	r3, [r7, #22]
 8007964:	3302      	adds	r3, #2
 8007966:	82fb      	strh	r3, [r7, #22]
 8007968:	8afa      	ldrh	r2, [r7, #22]
 800796a:	8abb      	ldrh	r3, [r7, #20]
 800796c:	429a      	cmp	r2, r3
 800796e:	d3ef      	bcc.n	8007950 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2200      	movs	r2, #0
 8007974:	701a      	strb	r2, [r3, #0]
  }
}
 8007976:	bf00      	nop
 8007978:	371c      	adds	r7, #28
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8007982:	b480      	push	{r7}
 8007984:	b085      	sub	sp, #20
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	881a      	ldrh	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	b29b      	uxth	r3, r3
 8007996:	4413      	add	r3, r2
 8007998:	b29a      	uxth	r2, r3
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4413      	add	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]

  return(pnext);
 80079aa:	68fb      	ldr	r3, [r7, #12]
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3714      	adds	r7, #20
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	4613      	mov	r3, r2
 80079c4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80079c6:	2301      	movs	r3, #1
 80079c8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	789b      	ldrb	r3, [r3, #2]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d002      	beq.n	80079d8 <USBH_CtlReq+0x20>
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d00f      	beq.n	80079f6 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 80079d6:	e034      	b.n	8007a42 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	68ba      	ldr	r2, [r7, #8]
 80079dc:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	88fa      	ldrh	r2, [r7, #6]
 80079e2:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2201      	movs	r2, #1
 80079e8:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2202      	movs	r2, #2
 80079ee:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 80079f0:	2301      	movs	r3, #1
 80079f2:	75fb      	strb	r3, [r7, #23]
    break;
 80079f4:	e025      	b.n	8007a42 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f000 f828 	bl	8007a4c <USBH_HandleControl>
 80079fc:	4603      	mov	r3, r0
 80079fe:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8007a00:	7dfb      	ldrb	r3, [r7, #23]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d108      	bne.n	8007a18 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	75fb      	strb	r3, [r7, #23]
    break;
 8007a16:	e013      	b.n	8007a40 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8007a18:	7dfb      	ldrb	r3, [r7, #23]
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d108      	bne.n	8007a30 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2201      	movs	r2, #1
 8007a22:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	75fb      	strb	r3, [r7, #23]
    break;
 8007a2e:	e007      	b.n	8007a40 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8007a30:	7dfb      	ldrb	r3, [r7, #23]
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d104      	bne.n	8007a40 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	75fb      	strb	r3, [r7, #23]
    break;
 8007a40:	bf00      	nop
  }
  return status;
 8007a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af02      	add	r7, sp, #8
 8007a52:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007a54:	2301      	movs	r3, #1
 8007a56:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	7e1b      	ldrb	r3, [r3, #24]
 8007a60:	3b01      	subs	r3, #1
 8007a62:	2b0a      	cmp	r3, #10
 8007a64:	f200 814c 	bhi.w	8007d00 <USBH_HandleControl+0x2b4>
 8007a68:	a201      	add	r2, pc, #4	; (adr r2, 8007a70 <USBH_HandleControl+0x24>)
 8007a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6e:	bf00      	nop
 8007a70:	08007a9d 	.word	0x08007a9d
 8007a74:	08007ab7 	.word	0x08007ab7
 8007a78:	08007b21 	.word	0x08007b21
 8007a7c:	08007b47 	.word	0x08007b47
 8007a80:	08007b7f 	.word	0x08007b7f
 8007a84:	08007bab 	.word	0x08007bab
 8007a88:	08007bfd 	.word	0x08007bfd
 8007a8c:	08007c1f 	.word	0x08007c1f
 8007a90:	08007c5b 	.word	0x08007c5b
 8007a94:	08007c83 	.word	0x08007c83
 8007a98:	08007cc1 	.word	0x08007cc1
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f103 0110 	add.w	r1, r3, #16
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	795b      	ldrb	r3, [r3, #5]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f939 	bl	8007d20 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2202      	movs	r2, #2
 8007ab2:	761a      	strb	r2, [r3, #24]
    break;
 8007ab4:	e12f      	b.n	8007d16 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	795b      	ldrb	r3, [r3, #5]
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f001 fbff 	bl	80092c0 <USBH_LL_GetURBState>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8007ac6:	7bbb      	ldrb	r3, [r7, #14]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d11e      	bne.n	8007b0a <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	7c1b      	ldrb	r3, [r3, #16]
 8007ad0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ad4:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	8adb      	ldrh	r3, [r3, #22]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00a      	beq.n	8007af4 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8007ade:	7b7b      	ldrb	r3, [r7, #13]
 8007ae0:	2b80      	cmp	r3, #128	; 0x80
 8007ae2:	d103      	bne.n	8007aec <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2203      	movs	r2, #3
 8007ae8:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007aea:	e10b      	b.n	8007d04 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2205      	movs	r2, #5
 8007af0:	761a      	strb	r2, [r3, #24]
    break;
 8007af2:	e107      	b.n	8007d04 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8007af4:	7b7b      	ldrb	r3, [r7, #13]
 8007af6:	2b80      	cmp	r3, #128	; 0x80
 8007af8:	d103      	bne.n	8007b02 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2209      	movs	r2, #9
 8007afe:	761a      	strb	r2, [r3, #24]
    break;
 8007b00:	e100      	b.n	8007d04 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2207      	movs	r2, #7
 8007b06:	761a      	strb	r2, [r3, #24]
    break;
 8007b08:	e0fc      	b.n	8007d04 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007b0a:	7bbb      	ldrb	r3, [r7, #14]
 8007b0c:	2b04      	cmp	r3, #4
 8007b0e:	d003      	beq.n	8007b18 <USBH_HandleControl+0xcc>
 8007b10:	7bbb      	ldrb	r3, [r7, #14]
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	f040 80f6 	bne.w	8007d04 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	220b      	movs	r2, #11
 8007b1c:	761a      	strb	r2, [r3, #24]
    break;
 8007b1e:	e0f1      	b.n	8007d04 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6899      	ldr	r1, [r3, #8]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	899a      	ldrh	r2, [r3, #12]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	791b      	ldrb	r3, [r3, #4]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f930 	bl	8007d9e <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2204      	movs	r2, #4
 8007b42:	761a      	strb	r2, [r3, #24]
    break;
 8007b44:	e0e7      	b.n	8007d16 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	791b      	ldrb	r3, [r3, #4]
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f001 fbb7 	bl	80092c0 <USBH_LL_GetURBState>
 8007b52:	4603      	mov	r3, r0
 8007b54:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8007b56:	7bbb      	ldrb	r3, [r7, #14]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d102      	bne.n	8007b62 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2209      	movs	r2, #9
 8007b60:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8007b62:	7bbb      	ldrb	r3, [r7, #14]
 8007b64:	2b05      	cmp	r3, #5
 8007b66:	d102      	bne.n	8007b6e <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007b6c:	e0cc      	b.n	8007d08 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8007b6e:	7bbb      	ldrb	r3, [r7, #14]
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	f040 80c9 	bne.w	8007d08 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	220b      	movs	r2, #11
 8007b7a:	761a      	strb	r2, [r3, #24]
    break;
 8007b7c:	e0c4      	b.n	8007d08 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6899      	ldr	r1, [r3, #8]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	899a      	ldrh	r2, [r3, #12]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	7958      	ldrb	r0, [r3, #5]
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	4603      	mov	r3, r0
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f8df 	bl	8007d54 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2206      	movs	r2, #6
 8007ba6:	761a      	strb	r2, [r3, #24]
    break;
 8007ba8:	e0b5      	b.n	8007d16 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	795b      	ldrb	r3, [r3, #5]
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f001 fb85 	bl	80092c0 <USBH_LL_GetURBState>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8007bba:	7bbb      	ldrb	r3, [r7, #14]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d103      	bne.n	8007bc8 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2207      	movs	r2, #7
 8007bc4:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007bc6:	e0a1      	b.n	8007d0c <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8007bc8:	7bbb      	ldrb	r3, [r7, #14]
 8007bca:	2b05      	cmp	r3, #5
 8007bcc:	d105      	bne.n	8007bda <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	220c      	movs	r2, #12
 8007bd2:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8007bd8:	e098      	b.n	8007d0c <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007bda:	7bbb      	ldrb	r3, [r7, #14]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d103      	bne.n	8007be8 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2205      	movs	r2, #5
 8007be4:	761a      	strb	r2, [r3, #24]
    break;
 8007be6:	e091      	b.n	8007d0c <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8007be8:	7bbb      	ldrb	r3, [r7, #14]
 8007bea:	2b04      	cmp	r3, #4
 8007bec:	f040 808e 	bne.w	8007d0c <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	220b      	movs	r2, #11
 8007bf4:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	73fb      	strb	r3, [r7, #15]
    break;
 8007bfa:	e087      	b.n	8007d0c <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	791b      	ldrb	r3, [r3, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	2100      	movs	r1, #0
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f8ca 	bl	8007d9e <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2208      	movs	r2, #8
 8007c1a:	761a      	strb	r2, [r3, #24]

    break;
 8007c1c:	e07b      	b.n	8007d16 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	791b      	ldrb	r3, [r3, #4]
 8007c22:	4619      	mov	r1, r3
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f001 fb4b 	bl	80092c0 <USBH_LL_GetURBState>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8007c2e:	7bbb      	ldrb	r3, [r7, #14]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d105      	bne.n	8007c40 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	220d      	movs	r2, #13
 8007c38:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007c3e:	e067      	b.n	8007d10 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8007c40:	7bbb      	ldrb	r3, [r7, #14]
 8007c42:	2b04      	cmp	r3, #4
 8007c44:	d103      	bne.n	8007c4e <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	220b      	movs	r2, #11
 8007c4a:	761a      	strb	r2, [r3, #24]
    break;
 8007c4c:	e060      	b.n	8007d10 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8007c4e:	7bbb      	ldrb	r3, [r7, #14]
 8007c50:	2b05      	cmp	r3, #5
 8007c52:	d15d      	bne.n	8007d10 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8007c54:	2303      	movs	r3, #3
 8007c56:	73fb      	strb	r3, [r7, #15]
    break;
 8007c58:	e05a      	b.n	8007d10 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	795a      	ldrb	r2, [r3, #5]
 8007c5e:	2301      	movs	r3, #1
 8007c60:	9300      	str	r3, [sp, #0]
 8007c62:	4613      	mov	r3, r2
 8007c64:	2200      	movs	r2, #0
 8007c66:	2100      	movs	r1, #0
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f873 	bl	8007d54 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	220a      	movs	r2, #10
 8007c7e:	761a      	strb	r2, [r3, #24]
    break;
 8007c80:	e049      	b.n	8007d16 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	795b      	ldrb	r3, [r3, #5]
 8007c86:	4619      	mov	r1, r3
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f001 fb19 	bl	80092c0 <USBH_LL_GetURBState>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8007c92:	7bbb      	ldrb	r3, [r7, #14]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d105      	bne.n	8007ca4 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	220d      	movs	r2, #13
 8007ca0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8007ca2:	e037      	b.n	8007d14 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007ca4:	7bbb      	ldrb	r3, [r7, #14]
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d103      	bne.n	8007cb2 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2209      	movs	r2, #9
 8007cae:	761a      	strb	r2, [r3, #24]
    break;
 8007cb0:	e030      	b.n	8007d14 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
 8007cb4:	2b04      	cmp	r3, #4
 8007cb6:	d12d      	bne.n	8007d14 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	220b      	movs	r2, #11
 8007cbc:	761a      	strb	r2, [r3, #24]
    break;
 8007cbe:	e029      	b.n	8007d14 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	7e5b      	ldrb	r3, [r3, #25]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	765a      	strb	r2, [r3, #25]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	7e5b      	ldrb	r3, [r3, #25]
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d809      	bhi.n	8007ce8 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f001 fa06 	bl	80090e6 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8007ce6:	e016      	b.n	8007d16 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007cee:	2106      	movs	r1, #6
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	73fb      	strb	r3, [r7, #15]
    break;
 8007cfe:	e00a      	b.n	8007d16 <USBH_HandleControl+0x2ca>

  default:
    break;
 8007d00:	bf00      	nop
 8007d02:	e008      	b.n	8007d16 <USBH_HandleControl+0x2ca>
    break;
 8007d04:	bf00      	nop
 8007d06:	e006      	b.n	8007d16 <USBH_HandleControl+0x2ca>
    break;
 8007d08:	bf00      	nop
 8007d0a:	e004      	b.n	8007d16 <USBH_HandleControl+0x2ca>
    break;
 8007d0c:	bf00      	nop
 8007d0e:	e002      	b.n	8007d16 <USBH_HandleControl+0x2ca>
    break;
 8007d10:	bf00      	nop
 8007d12:	e000      	b.n	8007d16 <USBH_HandleControl+0x2ca>
    break;
 8007d14:	bf00      	nop
  }
  return status;
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b088      	sub	sp, #32
 8007d24:	af04      	add	r7, sp, #16
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007d2e:	79f9      	ldrb	r1, [r7, #7]
 8007d30:	2300      	movs	r3, #0
 8007d32:	9303      	str	r3, [sp, #12]
 8007d34:	2308      	movs	r3, #8
 8007d36:	9302      	str	r3, [sp, #8]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	9301      	str	r3, [sp, #4]
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	2300      	movs	r3, #0
 8007d42:	2200      	movs	r2, #0
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f001 fa8a 	bl	800925e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b088      	sub	sp, #32
 8007d58:	af04      	add	r7, sp, #16
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	4611      	mov	r1, r2
 8007d60:	461a      	mov	r2, r3
 8007d62:	460b      	mov	r3, r1
 8007d64:	80fb      	strh	r3, [r7, #6]
 8007d66:	4613      	mov	r3, r2
 8007d68:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d001      	beq.n	8007d78 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007d78:	7979      	ldrb	r1, [r7, #5]
 8007d7a:	7e3b      	ldrb	r3, [r7, #24]
 8007d7c:	9303      	str	r3, [sp, #12]
 8007d7e:	88fb      	ldrh	r3, [r7, #6]
 8007d80:	9302      	str	r3, [sp, #8]
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	9301      	str	r3, [sp, #4]
 8007d86:	2301      	movs	r3, #1
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f001 fa65 	bl	800925e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b088      	sub	sp, #32
 8007da2:	af04      	add	r7, sp, #16
 8007da4:	60f8      	str	r0, [r7, #12]
 8007da6:	60b9      	str	r1, [r7, #8]
 8007da8:	4611      	mov	r1, r2
 8007daa:	461a      	mov	r2, r3
 8007dac:	460b      	mov	r3, r1
 8007dae:	80fb      	strh	r3, [r7, #6]
 8007db0:	4613      	mov	r3, r2
 8007db2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007db4:	7979      	ldrb	r1, [r7, #5]
 8007db6:	2300      	movs	r3, #0
 8007db8:	9303      	str	r3, [sp, #12]
 8007dba:	88fb      	ldrh	r3, [r7, #6]
 8007dbc:	9302      	str	r3, [sp, #8]
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	9301      	str	r3, [sp, #4]
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	2201      	movs	r2, #1
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f001 fa47 	bl	800925e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007dd0:	2300      	movs	r3, #0

}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b088      	sub	sp, #32
 8007dde:	af04      	add	r7, sp, #16
 8007de0:	60f8      	str	r0, [r7, #12]
 8007de2:	60b9      	str	r1, [r7, #8]
 8007de4:	4611      	mov	r1, r2
 8007de6:	461a      	mov	r2, r3
 8007de8:	460b      	mov	r3, r1
 8007dea:	80fb      	strh	r3, [r7, #6]
 8007dec:	4613      	mov	r3, r2
 8007dee:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007dfe:	7979      	ldrb	r1, [r7, #5]
 8007e00:	7e3b      	ldrb	r3, [r7, #24]
 8007e02:	9303      	str	r3, [sp, #12]
 8007e04:	88fb      	ldrh	r3, [r7, #6]
 8007e06:	9302      	str	r3, [sp, #8]
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	9301      	str	r3, [sp, #4]
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	2302      	movs	r3, #2
 8007e12:	2200      	movs	r2, #0
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f001 fa22 	bl	800925e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af04      	add	r7, sp, #16
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	4611      	mov	r1, r2
 8007e30:	461a      	mov	r2, r3
 8007e32:	460b      	mov	r3, r1
 8007e34:	80fb      	strh	r3, [r7, #6]
 8007e36:	4613      	mov	r3, r2
 8007e38:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007e3a:	7979      	ldrb	r1, [r7, #5]
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	9303      	str	r3, [sp, #12]
 8007e40:	88fb      	ldrh	r3, [r7, #6]
 8007e42:	9302      	str	r3, [sp, #8]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	9301      	str	r3, [sp, #4]
 8007e48:	2301      	movs	r3, #1
 8007e4a:	9300      	str	r3, [sp, #0]
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	2201      	movs	r2, #1
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f001 fa04 	bl	800925e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af04      	add	r7, sp, #16
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	4608      	mov	r0, r1
 8007e6a:	4611      	mov	r1, r2
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	4603      	mov	r3, r0
 8007e70:	70fb      	strb	r3, [r7, #3]
 8007e72:	460b      	mov	r3, r1
 8007e74:	70bb      	strb	r3, [r7, #2]
 8007e76:	4613      	mov	r3, r2
 8007e78:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8007e7a:	7878      	ldrb	r0, [r7, #1]
 8007e7c:	78ba      	ldrb	r2, [r7, #2]
 8007e7e:	78f9      	ldrb	r1, [r7, #3]
 8007e80:	8b3b      	ldrh	r3, [r7, #24]
 8007e82:	9302      	str	r3, [sp, #8]
 8007e84:	7d3b      	ldrb	r3, [r7, #20]
 8007e86:	9301      	str	r3, [sp, #4]
 8007e88:	7c3b      	ldrb	r3, [r7, #16]
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f001 f997 	bl	80091c2 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007e94:	2300      	movs	r3, #0

}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b082      	sub	sp, #8
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8007eaa:	78fb      	ldrb	r3, [r7, #3]
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f001 f9b6 	bl	8009220 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007eb4:	2300      	movs	r3, #0

}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3708      	adds	r7, #8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b084      	sub	sp, #16
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f831 	bl	8007f32 <USBH_GetFreePipe>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007ed4:	89fb      	ldrh	r3, [r7, #14]
 8007ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d007      	beq.n	8007eee <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8007ede:	78fb      	ldrb	r3, [r7, #3]
 8007ee0:	89fa      	ldrh	r2, [r7, #14]
 8007ee2:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	32e0      	adds	r2, #224	; 0xe0
 8007eea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8007eee:	89fb      	ldrh	r3, [r7, #14]
 8007ef0:	b2db      	uxtb	r3, r3
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007efa:	b480      	push	{r7}
 8007efc:	b083      	sub	sp, #12
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	460b      	mov	r3, r1
 8007f04:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8007f06:	78fb      	ldrb	r3, [r7, #3]
 8007f08:	2b0a      	cmp	r3, #10
 8007f0a:	d80b      	bhi.n	8007f24 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8007f0c:	78fa      	ldrb	r2, [r7, #3]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	32e0      	adds	r2, #224	; 0xe0
 8007f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f16:	78fa      	ldrb	r2, [r7, #3]
 8007f18:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	32e0      	adds	r2, #224	; 0xe0
 8007f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b085      	sub	sp, #20
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007f3e:	2300      	movs	r3, #0
 8007f40:	73fb      	strb	r3, [r7, #15]
 8007f42:	e00e      	b.n	8007f62 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007f44:	7bfa      	ldrb	r2, [r7, #15]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	32e0      	adds	r2, #224	; 0xe0
 8007f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d102      	bne.n	8007f5c <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	e007      	b.n	8007f6c <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	73fb      	strb	r3, [r7, #15]
 8007f62:	7bfb      	ldrb	r3, [r7, #15]
 8007f64:	2b0a      	cmp	r3, #10
 8007f66:	d9ed      	bls.n	8007f44 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8007f68:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int counter_tim2 = 0;
int counter_tim3 = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b088      	sub	sp, #32
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f88:	d109      	bne.n	8007f9e <HAL_TIM_PeriodElapsedCallback+0x26>
		counter_tim2++;
 8007f8a:	4b1c      	ldr	r3, [pc, #112]	; (8007ffc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	4a1a      	ldr	r2, [pc, #104]	; (8007ffc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8007f92:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8007f94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007f98:	4819      	ldr	r0, [pc, #100]	; (8008000 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8007f9a:	f7f8 fe6c 	bl	8000c76 <HAL_GPIO_TogglePin>
	}
	if (htim->Instance == TIM3) {
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a18      	ldr	r2, [pc, #96]	; (8008004 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d109      	bne.n	8007fbc <HAL_TIM_PeriodElapsedCallback+0x44>
		counter_tim3++;
 8007fa8:	4b17      	ldr	r3, [pc, #92]	; (8008008 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	3301      	adds	r3, #1
 8007fae:	4a16      	ldr	r2, [pc, #88]	; (8008008 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8007fb0:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8007fb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007fb6:	4812      	ldr	r0, [pc, #72]	; (8008000 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8007fb8:	f7f8 fe5d 	bl	8000c76 <HAL_GPIO_TogglePin>
	}
	if (htim->Instance == TIM4) {
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a12      	ldr	r2, [pc, #72]	; (800800c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d116      	bne.n	8007ff4 <HAL_TIM_PeriodElapsedCallback+0x7c>
		char buffer[20];
		sprintf(buffer, "%d %d\r\n", counter_tim2, counter_tim3);
 8007fc6:	4b0d      	ldr	r3, [pc, #52]	; (8007ffc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	4b0f      	ldr	r3, [pc, #60]	; (8008008 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f107 000c 	add.w	r0, r7, #12
 8007fd2:	490f      	ldr	r1, [pc, #60]	; (8008010 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8007fd4:	f001 fb48 	bl	8009668 <siprintf>
		HAL_UART_Transmit(&huart2, &buffer, strlen(buffer), HAL_MAX_DELAY);
 8007fd8:	f107 030c 	add.w	r3, r7, #12
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7f8 f8f7 	bl	80001d0 <strlen>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	f107 010c 	add.w	r1, r7, #12
 8007fea:	f04f 33ff 	mov.w	r3, #4294967295
 8007fee:	4809      	ldr	r0, [pc, #36]	; (8008014 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8007ff0:	f7fc fd83 	bl	8004afa <HAL_UART_Transmit>
	}
}
 8007ff4:	bf00      	nop
 8007ff6:	3720      	adds	r7, #32
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	200000b0 	.word	0x200000b0
 8008000:	40020c00 	.word	0x40020c00
 8008004:	40000400 	.word	0x40000400
 8008008:	200000b4 	.word	0x200000b4
 800800c:	40000800 	.word	0x40000800
 8008010:	08009d20 	.word	0x08009d20
 8008014:	20000238 	.word	0x20000238

08008018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800801c:	f7f8 fab0 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008020:	f000 f830 	bl	8008084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008024:	f000 fad2 	bl	80085cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8008028:	f000 f8ac 	bl	8008184 <MX_I2C1_Init>
  MX_I2S3_Init();
 800802c:	f000 f8d8 	bl	80081e0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8008030:	f000 f906 	bl	8008240 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8008034:	f000 feec 	bl	8008e10 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8008038:	f000 f938 	bl	80082ac <MX_TIM2_Init>
  MX_TIM3_Init();
 800803c:	f000 f9ac 	bl	8008398 <MX_TIM3_Init>
  MX_TIM4_Init();
 8008040:	f000 fa22 	bl	8008488 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8008044:	f000 fa98 	bl	8008578 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8008048:	2100      	movs	r1, #0
 800804a:	480b      	ldr	r0, [pc, #44]	; (8008078 <main+0x60>)
 800804c:	f7fb feb4 	bl	8003db8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8008050:	2100      	movs	r1, #0
 8008052:	480a      	ldr	r0, [pc, #40]	; (800807c <main+0x64>)
 8008054:	f7fb feb0 	bl	8003db8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8008058:	2104      	movs	r1, #4
 800805a:	4809      	ldr	r0, [pc, #36]	; (8008080 <main+0x68>)
 800805c:	f7fb feac 	bl	8003db8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8008060:	4805      	ldr	r0, [pc, #20]	; (8008078 <main+0x60>)
 8008062:	f7fb fe50 	bl	8003d06 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8008066:	4805      	ldr	r0, [pc, #20]	; (800807c <main+0x64>)
 8008068:	f7fb fe4d 	bl	8003d06 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800806c:	4804      	ldr	r0, [pc, #16]	; (8008080 <main+0x68>)
 800806e:	f7fb fe4a 	bl	8003d06 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8008072:	f000 fef3 	bl	8008e5c <MX_USB_HOST_Process>
 8008076:	e7fc      	b.n	8008072 <main+0x5a>
 8008078:	200001f8 	.word	0x200001f8
 800807c:	20000160 	.word	0x20000160
 8008080:	200000cc 	.word	0x200000cc

08008084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b098      	sub	sp, #96	; 0x60
 8008088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800808a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800808e:	2230      	movs	r2, #48	; 0x30
 8008090:	2100      	movs	r1, #0
 8008092:	4618      	mov	r0, r3
 8008094:	f001 fa28 	bl	80094e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008098:	f107 031c 	add.w	r3, r7, #28
 800809c:	2200      	movs	r2, #0
 800809e:	601a      	str	r2, [r3, #0]
 80080a0:	605a      	str	r2, [r3, #4]
 80080a2:	609a      	str	r2, [r3, #8]
 80080a4:	60da      	str	r2, [r3, #12]
 80080a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80080a8:	f107 030c 	add.w	r3, r7, #12
 80080ac:	2200      	movs	r2, #0
 80080ae:	601a      	str	r2, [r3, #0]
 80080b0:	605a      	str	r2, [r3, #4]
 80080b2:	609a      	str	r2, [r3, #8]
 80080b4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80080b6:	2300      	movs	r3, #0
 80080b8:	60bb      	str	r3, [r7, #8]
 80080ba:	4b30      	ldr	r3, [pc, #192]	; (800817c <SystemClock_Config+0xf8>)
 80080bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080be:	4a2f      	ldr	r2, [pc, #188]	; (800817c <SystemClock_Config+0xf8>)
 80080c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080c4:	6413      	str	r3, [r2, #64]	; 0x40
 80080c6:	4b2d      	ldr	r3, [pc, #180]	; (800817c <SystemClock_Config+0xf8>)
 80080c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080ce:	60bb      	str	r3, [r7, #8]
 80080d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80080d2:	2300      	movs	r3, #0
 80080d4:	607b      	str	r3, [r7, #4]
 80080d6:	4b2a      	ldr	r3, [pc, #168]	; (8008180 <SystemClock_Config+0xfc>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a29      	ldr	r2, [pc, #164]	; (8008180 <SystemClock_Config+0xfc>)
 80080dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80080e0:	6013      	str	r3, [r2, #0]
 80080e2:	4b27      	ldr	r3, [pc, #156]	; (8008180 <SystemClock_Config+0xfc>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080ea:	607b      	str	r3, [r7, #4]
 80080ec:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80080ee:	2301      	movs	r3, #1
 80080f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80080f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80080f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80080f8:	2302      	movs	r3, #2
 80080fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80080fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008100:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008102:	2304      	movs	r3, #4
 8008104:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 8008106:	2360      	movs	r3, #96	; 0x60
 8008108:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800810a:	2306      	movs	r3, #6
 800810c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800810e:	2304      	movs	r3, #4
 8008110:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008112:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008116:	4618      	mov	r0, r3
 8008118:	f7fa fff8 	bl	800310c <HAL_RCC_OscConfig>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d001      	beq.n	8008126 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8008122:	f000 fb51 	bl	80087c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008126:	230f      	movs	r3, #15
 8008128:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800812a:	2302      	movs	r3, #2
 800812c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800812e:	2300      	movs	r3, #0
 8008130:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008132:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008136:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800813c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800813e:	f107 031c 	add.w	r3, r7, #28
 8008142:	2101      	movs	r1, #1
 8008144:	4618      	mov	r0, r3
 8008146:	f7fb fa23 	bl	8003590 <HAL_RCC_ClockConfig>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8008150:	f000 fb3a 	bl	80087c8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8008154:	2301      	movs	r3, #1
 8008156:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8008158:	2332      	movs	r3, #50	; 0x32
 800815a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800815c:	2302      	movs	r3, #2
 800815e:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008160:	f107 030c 	add.w	r3, r7, #12
 8008164:	4618      	mov	r0, r3
 8008166:	f7fb fc01 	bl	800396c <HAL_RCCEx_PeriphCLKConfig>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d001      	beq.n	8008174 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8008170:	f000 fb2a 	bl	80087c8 <Error_Handler>
  }
}
 8008174:	bf00      	nop
 8008176:	3760      	adds	r7, #96	; 0x60
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	40023800 	.word	0x40023800
 8008180:	40007000 	.word	0x40007000

08008184 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008188:	4b12      	ldr	r3, [pc, #72]	; (80081d4 <MX_I2C1_Init+0x50>)
 800818a:	4a13      	ldr	r2, [pc, #76]	; (80081d8 <MX_I2C1_Init+0x54>)
 800818c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800818e:	4b11      	ldr	r3, [pc, #68]	; (80081d4 <MX_I2C1_Init+0x50>)
 8008190:	4a12      	ldr	r2, [pc, #72]	; (80081dc <MX_I2C1_Init+0x58>)
 8008192:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008194:	4b0f      	ldr	r3, [pc, #60]	; (80081d4 <MX_I2C1_Init+0x50>)
 8008196:	2200      	movs	r2, #0
 8008198:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800819a:	4b0e      	ldr	r3, [pc, #56]	; (80081d4 <MX_I2C1_Init+0x50>)
 800819c:	2200      	movs	r2, #0
 800819e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80081a0:	4b0c      	ldr	r3, [pc, #48]	; (80081d4 <MX_I2C1_Init+0x50>)
 80081a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80081a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80081a8:	4b0a      	ldr	r3, [pc, #40]	; (80081d4 <MX_I2C1_Init+0x50>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80081ae:	4b09      	ldr	r3, [pc, #36]	; (80081d4 <MX_I2C1_Init+0x50>)
 80081b0:	2200      	movs	r2, #0
 80081b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80081b4:	4b07      	ldr	r3, [pc, #28]	; (80081d4 <MX_I2C1_Init+0x50>)
 80081b6:	2200      	movs	r2, #0
 80081b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80081ba:	4b06      	ldr	r3, [pc, #24]	; (80081d4 <MX_I2C1_Init+0x50>)
 80081bc:	2200      	movs	r2, #0
 80081be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80081c0:	4804      	ldr	r0, [pc, #16]	; (80081d4 <MX_I2C1_Init+0x50>)
 80081c2:	f7fa f9db 	bl	800257c <HAL_I2C_Init>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d001      	beq.n	80081d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80081cc:	f000 fafc 	bl	80087c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80081d0:	bf00      	nop
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	2000010c 	.word	0x2000010c
 80081d8:	40005400 	.word	0x40005400
 80081dc:	000186a0 	.word	0x000186a0

080081e0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80081e4:	4b13      	ldr	r3, [pc, #76]	; (8008234 <MX_I2S3_Init+0x54>)
 80081e6:	4a14      	ldr	r2, [pc, #80]	; (8008238 <MX_I2S3_Init+0x58>)
 80081e8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80081ea:	4b12      	ldr	r3, [pc, #72]	; (8008234 <MX_I2S3_Init+0x54>)
 80081ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081f0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80081f2:	4b10      	ldr	r3, [pc, #64]	; (8008234 <MX_I2S3_Init+0x54>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80081f8:	4b0e      	ldr	r3, [pc, #56]	; (8008234 <MX_I2S3_Init+0x54>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80081fe:	4b0d      	ldr	r3, [pc, #52]	; (8008234 <MX_I2S3_Init+0x54>)
 8008200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008204:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8008206:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <MX_I2S3_Init+0x54>)
 8008208:	4a0c      	ldr	r2, [pc, #48]	; (800823c <MX_I2S3_Init+0x5c>)
 800820a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800820c:	4b09      	ldr	r3, [pc, #36]	; (8008234 <MX_I2S3_Init+0x54>)
 800820e:	2200      	movs	r2, #0
 8008210:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8008212:	4b08      	ldr	r3, [pc, #32]	; (8008234 <MX_I2S3_Init+0x54>)
 8008214:	2200      	movs	r2, #0
 8008216:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8008218:	4b06      	ldr	r3, [pc, #24]	; (8008234 <MX_I2S3_Init+0x54>)
 800821a:	2200      	movs	r2, #0
 800821c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800821e:	4805      	ldr	r0, [pc, #20]	; (8008234 <MX_I2S3_Init+0x54>)
 8008220:	f7fa fad4 	bl	80027cc <HAL_I2S_Init>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d001      	beq.n	800822e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800822a:	f000 facd 	bl	80087c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800822e:	bf00      	nop
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	20000278 	.word	0x20000278
 8008238:	40003c00 	.word	0x40003c00
 800823c:	00017700 	.word	0x00017700

08008240 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008244:	4b17      	ldr	r3, [pc, #92]	; (80082a4 <MX_SPI1_Init+0x64>)
 8008246:	4a18      	ldr	r2, [pc, #96]	; (80082a8 <MX_SPI1_Init+0x68>)
 8008248:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800824a:	4b16      	ldr	r3, [pc, #88]	; (80082a4 <MX_SPI1_Init+0x64>)
 800824c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008250:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008252:	4b14      	ldr	r3, [pc, #80]	; (80082a4 <MX_SPI1_Init+0x64>)
 8008254:	2200      	movs	r2, #0
 8008256:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008258:	4b12      	ldr	r3, [pc, #72]	; (80082a4 <MX_SPI1_Init+0x64>)
 800825a:	2200      	movs	r2, #0
 800825c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800825e:	4b11      	ldr	r3, [pc, #68]	; (80082a4 <MX_SPI1_Init+0x64>)
 8008260:	2200      	movs	r2, #0
 8008262:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008264:	4b0f      	ldr	r3, [pc, #60]	; (80082a4 <MX_SPI1_Init+0x64>)
 8008266:	2200      	movs	r2, #0
 8008268:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800826a:	4b0e      	ldr	r3, [pc, #56]	; (80082a4 <MX_SPI1_Init+0x64>)
 800826c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008270:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008272:	4b0c      	ldr	r3, [pc, #48]	; (80082a4 <MX_SPI1_Init+0x64>)
 8008274:	2200      	movs	r2, #0
 8008276:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008278:	4b0a      	ldr	r3, [pc, #40]	; (80082a4 <MX_SPI1_Init+0x64>)
 800827a:	2200      	movs	r2, #0
 800827c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800827e:	4b09      	ldr	r3, [pc, #36]	; (80082a4 <MX_SPI1_Init+0x64>)
 8008280:	2200      	movs	r2, #0
 8008282:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008284:	4b07      	ldr	r3, [pc, #28]	; (80082a4 <MX_SPI1_Init+0x64>)
 8008286:	2200      	movs	r2, #0
 8008288:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800828a:	4b06      	ldr	r3, [pc, #24]	; (80082a4 <MX_SPI1_Init+0x64>)
 800828c:	220a      	movs	r2, #10
 800828e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008290:	4804      	ldr	r0, [pc, #16]	; (80082a4 <MX_SPI1_Init+0x64>)
 8008292:	f7fb fca9 	bl	8003be8 <HAL_SPI_Init>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d001      	beq.n	80082a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800829c:	f000 fa94 	bl	80087c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80082a0:	bf00      	nop
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	200001a0 	.word	0x200001a0
 80082a8:	40013000 	.word	0x40013000

080082ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b08e      	sub	sp, #56	; 0x38
 80082b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80082b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082b6:	2200      	movs	r2, #0
 80082b8:	601a      	str	r2, [r3, #0]
 80082ba:	605a      	str	r2, [r3, #4]
 80082bc:	609a      	str	r2, [r3, #8]
 80082be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80082c0:	f107 0320 	add.w	r3, r7, #32
 80082c4:	2200      	movs	r2, #0
 80082c6:	601a      	str	r2, [r3, #0]
 80082c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80082ca:	1d3b      	adds	r3, r7, #4
 80082cc:	2200      	movs	r2, #0
 80082ce:	601a      	str	r2, [r3, #0]
 80082d0:	605a      	str	r2, [r3, #4]
 80082d2:	609a      	str	r2, [r3, #8]
 80082d4:	60da      	str	r2, [r3, #12]
 80082d6:	611a      	str	r2, [r3, #16]
 80082d8:	615a      	str	r2, [r3, #20]
 80082da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80082dc:	4b2d      	ldr	r3, [pc, #180]	; (8008394 <MX_TIM2_Init+0xe8>)
 80082de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80082e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000;
 80082e4:	4b2b      	ldr	r3, [pc, #172]	; (8008394 <MX_TIM2_Init+0xe8>)
 80082e6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80082ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80082ec:	4b29      	ldr	r3, [pc, #164]	; (8008394 <MX_TIM2_Init+0xe8>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250;
 80082f2:	4b28      	ldr	r3, [pc, #160]	; (8008394 <MX_TIM2_Init+0xe8>)
 80082f4:	22fa      	movs	r2, #250	; 0xfa
 80082f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80082f8:	4b26      	ldr	r3, [pc, #152]	; (8008394 <MX_TIM2_Init+0xe8>)
 80082fa:	2200      	movs	r2, #0
 80082fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80082fe:	4b25      	ldr	r3, [pc, #148]	; (8008394 <MX_TIM2_Init+0xe8>)
 8008300:	2280      	movs	r2, #128	; 0x80
 8008302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008304:	4823      	ldr	r0, [pc, #140]	; (8008394 <MX_TIM2_Init+0xe8>)
 8008306:	f7fb fcd3 	bl	8003cb0 <HAL_TIM_Base_Init>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8008310:	f000 fa5a 	bl	80087c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008318:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800831a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800831e:	4619      	mov	r1, r3
 8008320:	481c      	ldr	r0, [pc, #112]	; (8008394 <MX_TIM2_Init+0xe8>)
 8008322:	f7fb ff55 	bl	80041d0 <HAL_TIM_ConfigClockSource>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d001      	beq.n	8008330 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800832c:	f000 fa4c 	bl	80087c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008330:	4818      	ldr	r0, [pc, #96]	; (8008394 <MX_TIM2_Init+0xe8>)
 8008332:	f7fb fd0c 	bl	8003d4e <HAL_TIM_PWM_Init>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d001      	beq.n	8008340 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800833c:	f000 fa44 	bl	80087c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008340:	2300      	movs	r3, #0
 8008342:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008344:	2300      	movs	r3, #0
 8008346:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008348:	f107 0320 	add.w	r3, r7, #32
 800834c:	4619      	mov	r1, r3
 800834e:	4811      	ldr	r0, [pc, #68]	; (8008394 <MX_TIM2_Init+0xe8>)
 8008350:	f7fc fb2d 	bl	80049ae <HAL_TIMEx_MasterConfigSynchronization>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800835a:	f000 fa35 	bl	80087c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800835e:	2360      	movs	r3, #96	; 0x60
 8008360:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 125;
 8008362:	237d      	movs	r3, #125	; 0x7d
 8008364:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008366:	2300      	movs	r3, #0
 8008368:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800836a:	2300      	movs	r3, #0
 800836c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800836e:	1d3b      	adds	r3, r7, #4
 8008370:	2200      	movs	r2, #0
 8008372:	4619      	mov	r1, r3
 8008374:	4807      	ldr	r0, [pc, #28]	; (8008394 <MX_TIM2_Init+0xe8>)
 8008376:	f7fb fe65 	bl	8004044 <HAL_TIM_PWM_ConfigChannel>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d001      	beq.n	8008384 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8008380:	f000 fa22 	bl	80087c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8008384:	4803      	ldr	r0, [pc, #12]	; (8008394 <MX_TIM2_Init+0xe8>)
 8008386:	f000 fba9 	bl	8008adc <HAL_TIM_MspPostInit>

}
 800838a:	bf00      	nop
 800838c:	3738      	adds	r7, #56	; 0x38
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	200001f8 	.word	0x200001f8

08008398 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b08e      	sub	sp, #56	; 0x38
 800839c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800839e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80083a2:	2200      	movs	r2, #0
 80083a4:	601a      	str	r2, [r3, #0]
 80083a6:	605a      	str	r2, [r3, #4]
 80083a8:	609a      	str	r2, [r3, #8]
 80083aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80083ac:	f107 0320 	add.w	r3, r7, #32
 80083b0:	2200      	movs	r2, #0
 80083b2:	601a      	str	r2, [r3, #0]
 80083b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80083b6:	1d3b      	adds	r3, r7, #4
 80083b8:	2200      	movs	r2, #0
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	605a      	str	r2, [r3, #4]
 80083be:	609a      	str	r2, [r3, #8]
 80083c0:	60da      	str	r2, [r3, #12]
 80083c2:	611a      	str	r2, [r3, #16]
 80083c4:	615a      	str	r2, [r3, #20]
 80083c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80083c8:	4b2d      	ldr	r3, [pc, #180]	; (8008480 <MX_TIM3_Init+0xe8>)
 80083ca:	4a2e      	ldr	r2, [pc, #184]	; (8008484 <MX_TIM3_Init+0xec>)
 80083cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4000;
 80083ce:	4b2c      	ldr	r3, [pc, #176]	; (8008480 <MX_TIM3_Init+0xe8>)
 80083d0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80083d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083d6:	4b2a      	ldr	r3, [pc, #168]	; (8008480 <MX_TIM3_Init+0xe8>)
 80083d8:	2200      	movs	r2, #0
 80083da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 981;
 80083dc:	4b28      	ldr	r3, [pc, #160]	; (8008480 <MX_TIM3_Init+0xe8>)
 80083de:	f240 32d5 	movw	r2, #981	; 0x3d5
 80083e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80083e4:	4b26      	ldr	r3, [pc, #152]	; (8008480 <MX_TIM3_Init+0xe8>)
 80083e6:	2200      	movs	r2, #0
 80083e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80083ea:	4b25      	ldr	r3, [pc, #148]	; (8008480 <MX_TIM3_Init+0xe8>)
 80083ec:	2280      	movs	r2, #128	; 0x80
 80083ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80083f0:	4823      	ldr	r0, [pc, #140]	; (8008480 <MX_TIM3_Init+0xe8>)
 80083f2:	f7fb fc5d 	bl	8003cb0 <HAL_TIM_Base_Init>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80083fc:	f000 f9e4 	bl	80087c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008404:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800840a:	4619      	mov	r1, r3
 800840c:	481c      	ldr	r0, [pc, #112]	; (8008480 <MX_TIM3_Init+0xe8>)
 800840e:	f7fb fedf 	bl	80041d0 <HAL_TIM_ConfigClockSource>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d001      	beq.n	800841c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8008418:	f000 f9d6 	bl	80087c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800841c:	4818      	ldr	r0, [pc, #96]	; (8008480 <MX_TIM3_Init+0xe8>)
 800841e:	f7fb fc96 	bl	8003d4e <HAL_TIM_PWM_Init>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d001      	beq.n	800842c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8008428:	f000 f9ce 	bl	80087c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800842c:	2300      	movs	r3, #0
 800842e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008430:	2300      	movs	r3, #0
 8008432:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008434:	f107 0320 	add.w	r3, r7, #32
 8008438:	4619      	mov	r1, r3
 800843a:	4811      	ldr	r0, [pc, #68]	; (8008480 <MX_TIM3_Init+0xe8>)
 800843c:	f7fc fab7 	bl	80049ae <HAL_TIMEx_MasterConfigSynchronization>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d001      	beq.n	800844a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8008446:	f000 f9bf 	bl	80087c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800844a:	2360      	movs	r3, #96	; 0x60
 800844c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 490;
 800844e:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 8008452:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008454:	2300      	movs	r3, #0
 8008456:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008458:	2300      	movs	r3, #0
 800845a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800845c:	1d3b      	adds	r3, r7, #4
 800845e:	2200      	movs	r2, #0
 8008460:	4619      	mov	r1, r3
 8008462:	4807      	ldr	r0, [pc, #28]	; (8008480 <MX_TIM3_Init+0xe8>)
 8008464:	f7fb fdee 	bl	8004044 <HAL_TIM_PWM_ConfigChannel>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800846e:	f000 f9ab 	bl	80087c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008472:	4803      	ldr	r0, [pc, #12]	; (8008480 <MX_TIM3_Init+0xe8>)
 8008474:	f000 fb32 	bl	8008adc <HAL_TIM_MspPostInit>

}
 8008478:	bf00      	nop
 800847a:	3738      	adds	r7, #56	; 0x38
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	20000160 	.word	0x20000160
 8008484:	40000400 	.word	0x40000400

08008488 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b08e      	sub	sp, #56	; 0x38
 800848c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800848e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008492:	2200      	movs	r2, #0
 8008494:	601a      	str	r2, [r3, #0]
 8008496:	605a      	str	r2, [r3, #4]
 8008498:	609a      	str	r2, [r3, #8]
 800849a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800849c:	f107 0320 	add.w	r3, r7, #32
 80084a0:	2200      	movs	r2, #0
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80084a6:	1d3b      	adds	r3, r7, #4
 80084a8:	2200      	movs	r2, #0
 80084aa:	601a      	str	r2, [r3, #0]
 80084ac:	605a      	str	r2, [r3, #4]
 80084ae:	609a      	str	r2, [r3, #8]
 80084b0:	60da      	str	r2, [r3, #12]
 80084b2:	611a      	str	r2, [r3, #16]
 80084b4:	615a      	str	r2, [r3, #20]
 80084b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80084b8:	4b2d      	ldr	r3, [pc, #180]	; (8008570 <MX_TIM4_Init+0xe8>)
 80084ba:	4a2e      	ldr	r2, [pc, #184]	; (8008574 <MX_TIM4_Init+0xec>)
 80084bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1600;
 80084be:	4b2c      	ldr	r3, [pc, #176]	; (8008570 <MX_TIM4_Init+0xe8>)
 80084c0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80084c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80084c6:	4b2a      	ldr	r3, [pc, #168]	; (8008570 <MX_TIM4_Init+0xe8>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80084cc:	4b28      	ldr	r3, [pc, #160]	; (8008570 <MX_TIM4_Init+0xe8>)
 80084ce:	f242 720f 	movw	r2, #9999	; 0x270f
 80084d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80084d4:	4b26      	ldr	r3, [pc, #152]	; (8008570 <MX_TIM4_Init+0xe8>)
 80084d6:	2200      	movs	r2, #0
 80084d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80084da:	4b25      	ldr	r3, [pc, #148]	; (8008570 <MX_TIM4_Init+0xe8>)
 80084dc:	2280      	movs	r2, #128	; 0x80
 80084de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80084e0:	4823      	ldr	r0, [pc, #140]	; (8008570 <MX_TIM4_Init+0xe8>)
 80084e2:	f7fb fbe5 	bl	8003cb0 <HAL_TIM_Base_Init>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80084ec:	f000 f96c 	bl	80087c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80084f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80084f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084fa:	4619      	mov	r1, r3
 80084fc:	481c      	ldr	r0, [pc, #112]	; (8008570 <MX_TIM4_Init+0xe8>)
 80084fe:	f7fb fe67 	bl	80041d0 <HAL_TIM_ConfigClockSource>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d001      	beq.n	800850c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8008508:	f000 f95e 	bl	80087c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800850c:	4818      	ldr	r0, [pc, #96]	; (8008570 <MX_TIM4_Init+0xe8>)
 800850e:	f7fb fc1e 	bl	8003d4e <HAL_TIM_PWM_Init>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d001      	beq.n	800851c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8008518:	f000 f956 	bl	80087c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800851c:	2300      	movs	r3, #0
 800851e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008520:	2300      	movs	r3, #0
 8008522:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008524:	f107 0320 	add.w	r3, r7, #32
 8008528:	4619      	mov	r1, r3
 800852a:	4811      	ldr	r0, [pc, #68]	; (8008570 <MX_TIM4_Init+0xe8>)
 800852c:	f7fc fa3f 	bl	80049ae <HAL_TIMEx_MasterConfigSynchronization>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8008536:	f000 f947 	bl	80087c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800853a:	2360      	movs	r3, #96	; 0x60
 800853c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000;
 800853e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008542:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008544:	2300      	movs	r3, #0
 8008546:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008548:	2300      	movs	r3, #0
 800854a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800854c:	1d3b      	adds	r3, r7, #4
 800854e:	2204      	movs	r2, #4
 8008550:	4619      	mov	r1, r3
 8008552:	4807      	ldr	r0, [pc, #28]	; (8008570 <MX_TIM4_Init+0xe8>)
 8008554:	f7fb fd76 	bl	8004044 <HAL_TIM_PWM_ConfigChannel>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d001      	beq.n	8008562 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800855e:	f000 f933 	bl	80087c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8008562:	4803      	ldr	r0, [pc, #12]	; (8008570 <MX_TIM4_Init+0xe8>)
 8008564:	f000 faba 	bl	8008adc <HAL_TIM_MspPostInit>

}
 8008568:	bf00      	nop
 800856a:	3738      	adds	r7, #56	; 0x38
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	200000cc 	.word	0x200000cc
 8008574:	40000800 	.word	0x40000800

08008578 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800857c:	4b11      	ldr	r3, [pc, #68]	; (80085c4 <MX_USART2_UART_Init+0x4c>)
 800857e:	4a12      	ldr	r2, [pc, #72]	; (80085c8 <MX_USART2_UART_Init+0x50>)
 8008580:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008582:	4b10      	ldr	r3, [pc, #64]	; (80085c4 <MX_USART2_UART_Init+0x4c>)
 8008584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008588:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800858a:	4b0e      	ldr	r3, [pc, #56]	; (80085c4 <MX_USART2_UART_Init+0x4c>)
 800858c:	2200      	movs	r2, #0
 800858e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008590:	4b0c      	ldr	r3, [pc, #48]	; (80085c4 <MX_USART2_UART_Init+0x4c>)
 8008592:	2200      	movs	r2, #0
 8008594:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008596:	4b0b      	ldr	r3, [pc, #44]	; (80085c4 <MX_USART2_UART_Init+0x4c>)
 8008598:	2200      	movs	r2, #0
 800859a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800859c:	4b09      	ldr	r3, [pc, #36]	; (80085c4 <MX_USART2_UART_Init+0x4c>)
 800859e:	220c      	movs	r2, #12
 80085a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80085a2:	4b08      	ldr	r3, [pc, #32]	; (80085c4 <MX_USART2_UART_Init+0x4c>)
 80085a4:	2200      	movs	r2, #0
 80085a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80085a8:	4b06      	ldr	r3, [pc, #24]	; (80085c4 <MX_USART2_UART_Init+0x4c>)
 80085aa:	2200      	movs	r2, #0
 80085ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80085ae:	4805      	ldr	r0, [pc, #20]	; (80085c4 <MX_USART2_UART_Init+0x4c>)
 80085b0:	f7fc fa56 	bl	8004a60 <HAL_UART_Init>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d001      	beq.n	80085be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80085ba:	f000 f905 	bl	80087c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80085be:	bf00      	nop
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	20000238 	.word	0x20000238
 80085c8:	40004400 	.word	0x40004400

080085cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b08c      	sub	sp, #48	; 0x30
 80085d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085d2:	f107 031c 	add.w	r3, r7, #28
 80085d6:	2200      	movs	r2, #0
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	605a      	str	r2, [r3, #4]
 80085dc:	609a      	str	r2, [r3, #8]
 80085de:	60da      	str	r2, [r3, #12]
 80085e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80085e2:	2300      	movs	r3, #0
 80085e4:	61bb      	str	r3, [r7, #24]
 80085e6:	4b71      	ldr	r3, [pc, #452]	; (80087ac <MX_GPIO_Init+0x1e0>)
 80085e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ea:	4a70      	ldr	r2, [pc, #448]	; (80087ac <MX_GPIO_Init+0x1e0>)
 80085ec:	f043 0310 	orr.w	r3, r3, #16
 80085f0:	6313      	str	r3, [r2, #48]	; 0x30
 80085f2:	4b6e      	ldr	r3, [pc, #440]	; (80087ac <MX_GPIO_Init+0x1e0>)
 80085f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f6:	f003 0310 	and.w	r3, r3, #16
 80085fa:	61bb      	str	r3, [r7, #24]
 80085fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80085fe:	2300      	movs	r3, #0
 8008600:	617b      	str	r3, [r7, #20]
 8008602:	4b6a      	ldr	r3, [pc, #424]	; (80087ac <MX_GPIO_Init+0x1e0>)
 8008604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008606:	4a69      	ldr	r2, [pc, #420]	; (80087ac <MX_GPIO_Init+0x1e0>)
 8008608:	f043 0304 	orr.w	r3, r3, #4
 800860c:	6313      	str	r3, [r2, #48]	; 0x30
 800860e:	4b67      	ldr	r3, [pc, #412]	; (80087ac <MX_GPIO_Init+0x1e0>)
 8008610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008612:	f003 0304 	and.w	r3, r3, #4
 8008616:	617b      	str	r3, [r7, #20]
 8008618:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800861a:	2300      	movs	r3, #0
 800861c:	613b      	str	r3, [r7, #16]
 800861e:	4b63      	ldr	r3, [pc, #396]	; (80087ac <MX_GPIO_Init+0x1e0>)
 8008620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008622:	4a62      	ldr	r2, [pc, #392]	; (80087ac <MX_GPIO_Init+0x1e0>)
 8008624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008628:	6313      	str	r3, [r2, #48]	; 0x30
 800862a:	4b60      	ldr	r3, [pc, #384]	; (80087ac <MX_GPIO_Init+0x1e0>)
 800862c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008632:	613b      	str	r3, [r7, #16]
 8008634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008636:	2300      	movs	r3, #0
 8008638:	60fb      	str	r3, [r7, #12]
 800863a:	4b5c      	ldr	r3, [pc, #368]	; (80087ac <MX_GPIO_Init+0x1e0>)
 800863c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863e:	4a5b      	ldr	r2, [pc, #364]	; (80087ac <MX_GPIO_Init+0x1e0>)
 8008640:	f043 0301 	orr.w	r3, r3, #1
 8008644:	6313      	str	r3, [r2, #48]	; 0x30
 8008646:	4b59      	ldr	r3, [pc, #356]	; (80087ac <MX_GPIO_Init+0x1e0>)
 8008648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864a:	f003 0301 	and.w	r3, r3, #1
 800864e:	60fb      	str	r3, [r7, #12]
 8008650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008652:	2300      	movs	r3, #0
 8008654:	60bb      	str	r3, [r7, #8]
 8008656:	4b55      	ldr	r3, [pc, #340]	; (80087ac <MX_GPIO_Init+0x1e0>)
 8008658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865a:	4a54      	ldr	r2, [pc, #336]	; (80087ac <MX_GPIO_Init+0x1e0>)
 800865c:	f043 0302 	orr.w	r3, r3, #2
 8008660:	6313      	str	r3, [r2, #48]	; 0x30
 8008662:	4b52      	ldr	r3, [pc, #328]	; (80087ac <MX_GPIO_Init+0x1e0>)
 8008664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008666:	f003 0302 	and.w	r3, r3, #2
 800866a:	60bb      	str	r3, [r7, #8]
 800866c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800866e:	2300      	movs	r3, #0
 8008670:	607b      	str	r3, [r7, #4]
 8008672:	4b4e      	ldr	r3, [pc, #312]	; (80087ac <MX_GPIO_Init+0x1e0>)
 8008674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008676:	4a4d      	ldr	r2, [pc, #308]	; (80087ac <MX_GPIO_Init+0x1e0>)
 8008678:	f043 0308 	orr.w	r3, r3, #8
 800867c:	6313      	str	r3, [r2, #48]	; 0x30
 800867e:	4b4b      	ldr	r3, [pc, #300]	; (80087ac <MX_GPIO_Init+0x1e0>)
 8008680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008682:	f003 0308 	and.w	r3, r3, #8
 8008686:	607b      	str	r3, [r7, #4]
 8008688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800868a:	2200      	movs	r2, #0
 800868c:	2108      	movs	r1, #8
 800868e:	4848      	ldr	r0, [pc, #288]	; (80087b0 <MX_GPIO_Init+0x1e4>)
 8008690:	f7f8 fad8 	bl	8000c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8008694:	2201      	movs	r2, #1
 8008696:	2101      	movs	r1, #1
 8008698:	4846      	ldr	r0, [pc, #280]	; (80087b4 <MX_GPIO_Init+0x1e8>)
 800869a:	f7f8 fad3 	bl	8000c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800869e:	2200      	movs	r2, #0
 80086a0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80086a4:	4844      	ldr	r0, [pc, #272]	; (80087b8 <MX_GPIO_Init+0x1ec>)
 80086a6:	f7f8 facd 	bl	8000c44 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80086aa:	2308      	movs	r3, #8
 80086ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086ae:	2301      	movs	r3, #1
 80086b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086b2:	2300      	movs	r3, #0
 80086b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086b6:	2300      	movs	r3, #0
 80086b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80086ba:	f107 031c 	add.w	r3, r7, #28
 80086be:	4619      	mov	r1, r3
 80086c0:	483b      	ldr	r0, [pc, #236]	; (80087b0 <MX_GPIO_Init+0x1e4>)
 80086c2:	f7f8 f925 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80086c6:	2301      	movs	r3, #1
 80086c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086ca:	2301      	movs	r3, #1
 80086cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ce:	2300      	movs	r3, #0
 80086d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086d2:	2300      	movs	r3, #0
 80086d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80086d6:	f107 031c 	add.w	r3, r7, #28
 80086da:	4619      	mov	r1, r3
 80086dc:	4835      	ldr	r0, [pc, #212]	; (80087b4 <MX_GPIO_Init+0x1e8>)
 80086de:	f7f8 f917 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80086e2:	2308      	movs	r3, #8
 80086e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086e6:	2302      	movs	r3, #2
 80086e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ea:	2300      	movs	r3, #0
 80086ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086ee:	2300      	movs	r3, #0
 80086f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80086f2:	2305      	movs	r3, #5
 80086f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80086f6:	f107 031c 	add.w	r3, r7, #28
 80086fa:	4619      	mov	r1, r3
 80086fc:	482d      	ldr	r0, [pc, #180]	; (80087b4 <MX_GPIO_Init+0x1e8>)
 80086fe:	f7f8 f907 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8008702:	2301      	movs	r3, #1
 8008704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008706:	4b2d      	ldr	r3, [pc, #180]	; (80087bc <MX_GPIO_Init+0x1f0>)
 8008708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800870a:	2300      	movs	r3, #0
 800870c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800870e:	f107 031c 	add.w	r3, r7, #28
 8008712:	4619      	mov	r1, r3
 8008714:	482a      	ldr	r0, [pc, #168]	; (80087c0 <MX_GPIO_Init+0x1f4>)
 8008716:	f7f8 f8fb 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800871a:	2304      	movs	r3, #4
 800871c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800871e:	2300      	movs	r3, #0
 8008720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008722:	2300      	movs	r3, #0
 8008724:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8008726:	f107 031c 	add.w	r3, r7, #28
 800872a:	4619      	mov	r1, r3
 800872c:	4825      	ldr	r0, [pc, #148]	; (80087c4 <MX_GPIO_Init+0x1f8>)
 800872e:	f7f8 f8ef 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8008732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008738:	2302      	movs	r3, #2
 800873a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800873c:	2300      	movs	r3, #0
 800873e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008740:	2300      	movs	r3, #0
 8008742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008744:	2305      	movs	r3, #5
 8008746:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8008748:	f107 031c 	add.w	r3, r7, #28
 800874c:	4619      	mov	r1, r3
 800874e:	481d      	ldr	r0, [pc, #116]	; (80087c4 <MX_GPIO_Init+0x1f8>)
 8008750:	f7f8 f8de 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8008754:	f24f 0310 	movw	r3, #61456	; 0xf010
 8008758:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800875a:	2301      	movs	r3, #1
 800875c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800875e:	2300      	movs	r3, #0
 8008760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008762:	2300      	movs	r3, #0
 8008764:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008766:	f107 031c 	add.w	r3, r7, #28
 800876a:	4619      	mov	r1, r3
 800876c:	4812      	ldr	r0, [pc, #72]	; (80087b8 <MX_GPIO_Init+0x1ec>)
 800876e:	f7f8 f8cf 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8008772:	2320      	movs	r3, #32
 8008774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008776:	2300      	movs	r3, #0
 8008778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800877a:	2300      	movs	r3, #0
 800877c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800877e:	f107 031c 	add.w	r3, r7, #28
 8008782:	4619      	mov	r1, r3
 8008784:	480c      	ldr	r0, [pc, #48]	; (80087b8 <MX_GPIO_Init+0x1ec>)
 8008786:	f7f8 f8c3 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800878a:	2302      	movs	r3, #2
 800878c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800878e:	4b0b      	ldr	r3, [pc, #44]	; (80087bc <MX_GPIO_Init+0x1f0>)
 8008790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008792:	2300      	movs	r3, #0
 8008794:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8008796:	f107 031c 	add.w	r3, r7, #28
 800879a:	4619      	mov	r1, r3
 800879c:	4804      	ldr	r0, [pc, #16]	; (80087b0 <MX_GPIO_Init+0x1e4>)
 800879e:	f7f8 f8b7 	bl	8000910 <HAL_GPIO_Init>

}
 80087a2:	bf00      	nop
 80087a4:	3730      	adds	r7, #48	; 0x30
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	40023800 	.word	0x40023800
 80087b0:	40021000 	.word	0x40021000
 80087b4:	40020800 	.word	0x40020800
 80087b8:	40020c00 	.word	0x40020c00
 80087bc:	10120000 	.word	0x10120000
 80087c0:	40020000 	.word	0x40020000
 80087c4:	40020400 	.word	0x40020400

080087c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80087c8:	b480      	push	{r7}
 80087ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80087cc:	bf00      	nop
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
	...

080087d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087de:	2300      	movs	r3, #0
 80087e0:	607b      	str	r3, [r7, #4]
 80087e2:	4b10      	ldr	r3, [pc, #64]	; (8008824 <HAL_MspInit+0x4c>)
 80087e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087e6:	4a0f      	ldr	r2, [pc, #60]	; (8008824 <HAL_MspInit+0x4c>)
 80087e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087ec:	6453      	str	r3, [r2, #68]	; 0x44
 80087ee:	4b0d      	ldr	r3, [pc, #52]	; (8008824 <HAL_MspInit+0x4c>)
 80087f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087f6:	607b      	str	r3, [r7, #4]
 80087f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80087fa:	2300      	movs	r3, #0
 80087fc:	603b      	str	r3, [r7, #0]
 80087fe:	4b09      	ldr	r3, [pc, #36]	; (8008824 <HAL_MspInit+0x4c>)
 8008800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008802:	4a08      	ldr	r2, [pc, #32]	; (8008824 <HAL_MspInit+0x4c>)
 8008804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008808:	6413      	str	r3, [r2, #64]	; 0x40
 800880a:	4b06      	ldr	r3, [pc, #24]	; (8008824 <HAL_MspInit+0x4c>)
 800880c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008812:	603b      	str	r3, [r7, #0]
 8008814:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8008816:	2005      	movs	r0, #5
 8008818:	f7f8 f816 	bl	8000848 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800881c:	bf00      	nop
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	40023800 	.word	0x40023800

08008828 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b08a      	sub	sp, #40	; 0x28
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008830:	f107 0314 	add.w	r3, r7, #20
 8008834:	2200      	movs	r2, #0
 8008836:	601a      	str	r2, [r3, #0]
 8008838:	605a      	str	r2, [r3, #4]
 800883a:	609a      	str	r2, [r3, #8]
 800883c:	60da      	str	r2, [r3, #12]
 800883e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a19      	ldr	r2, [pc, #100]	; (80088ac <HAL_I2C_MspInit+0x84>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d12c      	bne.n	80088a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800884a:	2300      	movs	r3, #0
 800884c:	613b      	str	r3, [r7, #16]
 800884e:	4b18      	ldr	r3, [pc, #96]	; (80088b0 <HAL_I2C_MspInit+0x88>)
 8008850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008852:	4a17      	ldr	r2, [pc, #92]	; (80088b0 <HAL_I2C_MspInit+0x88>)
 8008854:	f043 0302 	orr.w	r3, r3, #2
 8008858:	6313      	str	r3, [r2, #48]	; 0x30
 800885a:	4b15      	ldr	r3, [pc, #84]	; (80088b0 <HAL_I2C_MspInit+0x88>)
 800885c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885e:	f003 0302 	and.w	r3, r3, #2
 8008862:	613b      	str	r3, [r7, #16]
 8008864:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8008866:	f44f 7310 	mov.w	r3, #576	; 0x240
 800886a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800886c:	2312      	movs	r3, #18
 800886e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008870:	2301      	movs	r3, #1
 8008872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008874:	2300      	movs	r3, #0
 8008876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008878:	2304      	movs	r3, #4
 800887a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800887c:	f107 0314 	add.w	r3, r7, #20
 8008880:	4619      	mov	r1, r3
 8008882:	480c      	ldr	r0, [pc, #48]	; (80088b4 <HAL_I2C_MspInit+0x8c>)
 8008884:	f7f8 f844 	bl	8000910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008888:	2300      	movs	r3, #0
 800888a:	60fb      	str	r3, [r7, #12]
 800888c:	4b08      	ldr	r3, [pc, #32]	; (80088b0 <HAL_I2C_MspInit+0x88>)
 800888e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008890:	4a07      	ldr	r2, [pc, #28]	; (80088b0 <HAL_I2C_MspInit+0x88>)
 8008892:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008896:	6413      	str	r3, [r2, #64]	; 0x40
 8008898:	4b05      	ldr	r3, [pc, #20]	; (80088b0 <HAL_I2C_MspInit+0x88>)
 800889a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088a0:	60fb      	str	r3, [r7, #12]
 80088a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80088a4:	bf00      	nop
 80088a6:	3728      	adds	r7, #40	; 0x28
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	40005400 	.word	0x40005400
 80088b0:	40023800 	.word	0x40023800
 80088b4:	40020400 	.word	0x40020400

080088b8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b08a      	sub	sp, #40	; 0x28
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088c0:	f107 0314 	add.w	r3, r7, #20
 80088c4:	2200      	movs	r2, #0
 80088c6:	601a      	str	r2, [r3, #0]
 80088c8:	605a      	str	r2, [r3, #4]
 80088ca:	609a      	str	r2, [r3, #8]
 80088cc:	60da      	str	r2, [r3, #12]
 80088ce:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a28      	ldr	r2, [pc, #160]	; (8008978 <HAL_I2S_MspInit+0xc0>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d14a      	bne.n	8008970 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80088da:	2300      	movs	r3, #0
 80088dc:	613b      	str	r3, [r7, #16]
 80088de:	4b27      	ldr	r3, [pc, #156]	; (800897c <HAL_I2S_MspInit+0xc4>)
 80088e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e2:	4a26      	ldr	r2, [pc, #152]	; (800897c <HAL_I2S_MspInit+0xc4>)
 80088e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088e8:	6413      	str	r3, [r2, #64]	; 0x40
 80088ea:	4b24      	ldr	r3, [pc, #144]	; (800897c <HAL_I2S_MspInit+0xc4>)
 80088ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088f2:	613b      	str	r3, [r7, #16]
 80088f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088f6:	2300      	movs	r3, #0
 80088f8:	60fb      	str	r3, [r7, #12]
 80088fa:	4b20      	ldr	r3, [pc, #128]	; (800897c <HAL_I2S_MspInit+0xc4>)
 80088fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fe:	4a1f      	ldr	r2, [pc, #124]	; (800897c <HAL_I2S_MspInit+0xc4>)
 8008900:	f043 0301 	orr.w	r3, r3, #1
 8008904:	6313      	str	r3, [r2, #48]	; 0x30
 8008906:	4b1d      	ldr	r3, [pc, #116]	; (800897c <HAL_I2S_MspInit+0xc4>)
 8008908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890a:	f003 0301 	and.w	r3, r3, #1
 800890e:	60fb      	str	r3, [r7, #12]
 8008910:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008912:	2300      	movs	r3, #0
 8008914:	60bb      	str	r3, [r7, #8]
 8008916:	4b19      	ldr	r3, [pc, #100]	; (800897c <HAL_I2S_MspInit+0xc4>)
 8008918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891a:	4a18      	ldr	r2, [pc, #96]	; (800897c <HAL_I2S_MspInit+0xc4>)
 800891c:	f043 0304 	orr.w	r3, r3, #4
 8008920:	6313      	str	r3, [r2, #48]	; 0x30
 8008922:	4b16      	ldr	r3, [pc, #88]	; (800897c <HAL_I2S_MspInit+0xc4>)
 8008924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008926:	f003 0304 	and.w	r3, r3, #4
 800892a:	60bb      	str	r3, [r7, #8]
 800892c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800892e:	2310      	movs	r3, #16
 8008930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008932:	2302      	movs	r3, #2
 8008934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008936:	2300      	movs	r3, #0
 8008938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800893a:	2300      	movs	r3, #0
 800893c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800893e:	2306      	movs	r3, #6
 8008940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8008942:	f107 0314 	add.w	r3, r7, #20
 8008946:	4619      	mov	r1, r3
 8008948:	480d      	ldr	r0, [pc, #52]	; (8008980 <HAL_I2S_MspInit+0xc8>)
 800894a:	f7f7 ffe1 	bl	8000910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800894e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8008952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008954:	2302      	movs	r3, #2
 8008956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008958:	2300      	movs	r3, #0
 800895a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800895c:	2300      	movs	r3, #0
 800895e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008960:	2306      	movs	r3, #6
 8008962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008964:	f107 0314 	add.w	r3, r7, #20
 8008968:	4619      	mov	r1, r3
 800896a:	4806      	ldr	r0, [pc, #24]	; (8008984 <HAL_I2S_MspInit+0xcc>)
 800896c:	f7f7 ffd0 	bl	8000910 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8008970:	bf00      	nop
 8008972:	3728      	adds	r7, #40	; 0x28
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	40003c00 	.word	0x40003c00
 800897c:	40023800 	.word	0x40023800
 8008980:	40020000 	.word	0x40020000
 8008984:	40020800 	.word	0x40020800

08008988 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b08a      	sub	sp, #40	; 0x28
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008990:	f107 0314 	add.w	r3, r7, #20
 8008994:	2200      	movs	r2, #0
 8008996:	601a      	str	r2, [r3, #0]
 8008998:	605a      	str	r2, [r3, #4]
 800899a:	609a      	str	r2, [r3, #8]
 800899c:	60da      	str	r2, [r3, #12]
 800899e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a19      	ldr	r2, [pc, #100]	; (8008a0c <HAL_SPI_MspInit+0x84>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d12b      	bne.n	8008a02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80089aa:	2300      	movs	r3, #0
 80089ac:	613b      	str	r3, [r7, #16]
 80089ae:	4b18      	ldr	r3, [pc, #96]	; (8008a10 <HAL_SPI_MspInit+0x88>)
 80089b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b2:	4a17      	ldr	r2, [pc, #92]	; (8008a10 <HAL_SPI_MspInit+0x88>)
 80089b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80089b8:	6453      	str	r3, [r2, #68]	; 0x44
 80089ba:	4b15      	ldr	r3, [pc, #84]	; (8008a10 <HAL_SPI_MspInit+0x88>)
 80089bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089c2:	613b      	str	r3, [r7, #16]
 80089c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089c6:	2300      	movs	r3, #0
 80089c8:	60fb      	str	r3, [r7, #12]
 80089ca:	4b11      	ldr	r3, [pc, #68]	; (8008a10 <HAL_SPI_MspInit+0x88>)
 80089cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ce:	4a10      	ldr	r2, [pc, #64]	; (8008a10 <HAL_SPI_MspInit+0x88>)
 80089d0:	f043 0301 	orr.w	r3, r3, #1
 80089d4:	6313      	str	r3, [r2, #48]	; 0x30
 80089d6:	4b0e      	ldr	r3, [pc, #56]	; (8008a10 <HAL_SPI_MspInit+0x88>)
 80089d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089da:	f003 0301 	and.w	r3, r3, #1
 80089de:	60fb      	str	r3, [r7, #12]
 80089e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80089e2:	23e0      	movs	r3, #224	; 0xe0
 80089e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089e6:	2302      	movs	r3, #2
 80089e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089ea:	2300      	movs	r3, #0
 80089ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089ee:	2300      	movs	r3, #0
 80089f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80089f2:	2305      	movs	r3, #5
 80089f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089f6:	f107 0314 	add.w	r3, r7, #20
 80089fa:	4619      	mov	r1, r3
 80089fc:	4805      	ldr	r0, [pc, #20]	; (8008a14 <HAL_SPI_MspInit+0x8c>)
 80089fe:	f7f7 ff87 	bl	8000910 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008a02:	bf00      	nop
 8008a04:	3728      	adds	r7, #40	; 0x28
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	40013000 	.word	0x40013000
 8008a10:	40023800 	.word	0x40023800
 8008a14:	40020000 	.word	0x40020000

08008a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b086      	sub	sp, #24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a28:	d116      	bne.n	8008a58 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	617b      	str	r3, [r7, #20]
 8008a2e:	4b28      	ldr	r3, [pc, #160]	; (8008ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8008a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a32:	4a27      	ldr	r2, [pc, #156]	; (8008ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8008a34:	f043 0301 	orr.w	r3, r3, #1
 8008a38:	6413      	str	r3, [r2, #64]	; 0x40
 8008a3a:	4b25      	ldr	r3, [pc, #148]	; (8008ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8008a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	617b      	str	r3, [r7, #20]
 8008a44:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8008a46:	2200      	movs	r2, #0
 8008a48:	2100      	movs	r1, #0
 8008a4a:	201c      	movs	r0, #28
 8008a4c:	f7f7 ff07 	bl	800085e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008a50:	201c      	movs	r0, #28
 8008a52:	f7f7 ff20 	bl	8000896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8008a56:	e036      	b.n	8008ac6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a1d      	ldr	r2, [pc, #116]	; (8008ad4 <HAL_TIM_Base_MspInit+0xbc>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d116      	bne.n	8008a90 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008a62:	2300      	movs	r3, #0
 8008a64:	613b      	str	r3, [r7, #16]
 8008a66:	4b1a      	ldr	r3, [pc, #104]	; (8008ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8008a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6a:	4a19      	ldr	r2, [pc, #100]	; (8008ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8008a6c:	f043 0302 	orr.w	r3, r3, #2
 8008a70:	6413      	str	r3, [r2, #64]	; 0x40
 8008a72:	4b17      	ldr	r3, [pc, #92]	; (8008ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8008a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a76:	f003 0302 	and.w	r3, r3, #2
 8008a7a:	613b      	str	r3, [r7, #16]
 8008a7c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008a7e:	2200      	movs	r2, #0
 8008a80:	2100      	movs	r1, #0
 8008a82:	201d      	movs	r0, #29
 8008a84:	f7f7 feeb 	bl	800085e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008a88:	201d      	movs	r0, #29
 8008a8a:	f7f7 ff04 	bl	8000896 <HAL_NVIC_EnableIRQ>
}
 8008a8e:	e01a      	b.n	8008ac6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a10      	ldr	r2, [pc, #64]	; (8008ad8 <HAL_TIM_Base_MspInit+0xc0>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d115      	bne.n	8008ac6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	60fb      	str	r3, [r7, #12]
 8008a9e:	4b0c      	ldr	r3, [pc, #48]	; (8008ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8008aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa2:	4a0b      	ldr	r2, [pc, #44]	; (8008ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8008aa4:	f043 0304 	orr.w	r3, r3, #4
 8008aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8008aaa:	4b09      	ldr	r3, [pc, #36]	; (8008ad0 <HAL_TIM_Base_MspInit+0xb8>)
 8008aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aae:	f003 0304 	and.w	r3, r3, #4
 8008ab2:	60fb      	str	r3, [r7, #12]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	2100      	movs	r1, #0
 8008aba:	201e      	movs	r0, #30
 8008abc:	f7f7 fecf 	bl	800085e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8008ac0:	201e      	movs	r0, #30
 8008ac2:	f7f7 fee8 	bl	8000896 <HAL_NVIC_EnableIRQ>
}
 8008ac6:	bf00      	nop
 8008ac8:	3718      	adds	r7, #24
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	40023800 	.word	0x40023800
 8008ad4:	40000400 	.word	0x40000400
 8008ad8:	40000800 	.word	0x40000800

08008adc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b08a      	sub	sp, #40	; 0x28
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ae4:	f107 0314 	add.w	r3, r7, #20
 8008ae8:	2200      	movs	r2, #0
 8008aea:	601a      	str	r2, [r3, #0]
 8008aec:	605a      	str	r2, [r3, #4]
 8008aee:	609a      	str	r2, [r3, #8]
 8008af0:	60da      	str	r2, [r3, #12]
 8008af2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008afc:	d11f      	bne.n	8008b3e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008afe:	2300      	movs	r3, #0
 8008b00:	613b      	str	r3, [r7, #16]
 8008b02:	4b34      	ldr	r3, [pc, #208]	; (8008bd4 <HAL_TIM_MspPostInit+0xf8>)
 8008b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b06:	4a33      	ldr	r2, [pc, #204]	; (8008bd4 <HAL_TIM_MspPostInit+0xf8>)
 8008b08:	f043 0301 	orr.w	r3, r3, #1
 8008b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8008b0e:	4b31      	ldr	r3, [pc, #196]	; (8008bd4 <HAL_TIM_MspPostInit+0xf8>)
 8008b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	613b      	str	r3, [r7, #16]
 8008b18:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8008b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b20:	2302      	movs	r3, #2
 8008b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b24:	2300      	movs	r3, #0
 8008b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b30:	f107 0314 	add.w	r3, r7, #20
 8008b34:	4619      	mov	r1, r3
 8008b36:	4828      	ldr	r0, [pc, #160]	; (8008bd8 <HAL_TIM_MspPostInit+0xfc>)
 8008b38:	f7f7 feea 	bl	8000910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8008b3c:	e046      	b.n	8008bcc <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a26      	ldr	r2, [pc, #152]	; (8008bdc <HAL_TIM_MspPostInit+0x100>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d11e      	bne.n	8008b86 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008b48:	2300      	movs	r3, #0
 8008b4a:	60fb      	str	r3, [r7, #12]
 8008b4c:	4b21      	ldr	r3, [pc, #132]	; (8008bd4 <HAL_TIM_MspPostInit+0xf8>)
 8008b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b50:	4a20      	ldr	r2, [pc, #128]	; (8008bd4 <HAL_TIM_MspPostInit+0xf8>)
 8008b52:	f043 0304 	orr.w	r3, r3, #4
 8008b56:	6313      	str	r3, [r2, #48]	; 0x30
 8008b58:	4b1e      	ldr	r3, [pc, #120]	; (8008bd4 <HAL_TIM_MspPostInit+0xf8>)
 8008b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b5c:	f003 0304 	and.w	r3, r3, #4
 8008b60:	60fb      	str	r3, [r7, #12]
 8008b62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008b64:	2340      	movs	r3, #64	; 0x40
 8008b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b68:	2302      	movs	r3, #2
 8008b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b70:	2300      	movs	r3, #0
 8008b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008b74:	2302      	movs	r3, #2
 8008b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b78:	f107 0314 	add.w	r3, r7, #20
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	4818      	ldr	r0, [pc, #96]	; (8008be0 <HAL_TIM_MspPostInit+0x104>)
 8008b80:	f7f7 fec6 	bl	8000910 <HAL_GPIO_Init>
}
 8008b84:	e022      	b.n	8008bcc <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a16      	ldr	r2, [pc, #88]	; (8008be4 <HAL_TIM_MspPostInit+0x108>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d11d      	bne.n	8008bcc <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b90:	2300      	movs	r3, #0
 8008b92:	60bb      	str	r3, [r7, #8]
 8008b94:	4b0f      	ldr	r3, [pc, #60]	; (8008bd4 <HAL_TIM_MspPostInit+0xf8>)
 8008b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b98:	4a0e      	ldr	r2, [pc, #56]	; (8008bd4 <HAL_TIM_MspPostInit+0xf8>)
 8008b9a:	f043 0302 	orr.w	r3, r3, #2
 8008b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8008ba0:	4b0c      	ldr	r3, [pc, #48]	; (8008bd4 <HAL_TIM_MspPostInit+0xf8>)
 8008ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba4:	f003 0302 	and.w	r3, r3, #2
 8008ba8:	60bb      	str	r3, [r7, #8]
 8008baa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008bac:	2380      	movs	r3, #128	; 0x80
 8008bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bb0:	2302      	movs	r3, #2
 8008bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008bc0:	f107 0314 	add.w	r3, r7, #20
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	4808      	ldr	r0, [pc, #32]	; (8008be8 <HAL_TIM_MspPostInit+0x10c>)
 8008bc8:	f7f7 fea2 	bl	8000910 <HAL_GPIO_Init>
}
 8008bcc:	bf00      	nop
 8008bce:	3728      	adds	r7, #40	; 0x28
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	40023800 	.word	0x40023800
 8008bd8:	40020000 	.word	0x40020000
 8008bdc:	40000400 	.word	0x40000400
 8008be0:	40020800 	.word	0x40020800
 8008be4:	40000800 	.word	0x40000800
 8008be8:	40020400 	.word	0x40020400

08008bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b08a      	sub	sp, #40	; 0x28
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bf4:	f107 0314 	add.w	r3, r7, #20
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	601a      	str	r2, [r3, #0]
 8008bfc:	605a      	str	r2, [r3, #4]
 8008bfe:	609a      	str	r2, [r3, #8]
 8008c00:	60da      	str	r2, [r3, #12]
 8008c02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a1d      	ldr	r2, [pc, #116]	; (8008c80 <HAL_UART_MspInit+0x94>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d133      	bne.n	8008c76 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008c0e:	2300      	movs	r3, #0
 8008c10:	613b      	str	r3, [r7, #16]
 8008c12:	4b1c      	ldr	r3, [pc, #112]	; (8008c84 <HAL_UART_MspInit+0x98>)
 8008c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c16:	4a1b      	ldr	r2, [pc, #108]	; (8008c84 <HAL_UART_MspInit+0x98>)
 8008c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8008c1e:	4b19      	ldr	r3, [pc, #100]	; (8008c84 <HAL_UART_MspInit+0x98>)
 8008c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c26:	613b      	str	r3, [r7, #16]
 8008c28:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	60fb      	str	r3, [r7, #12]
 8008c2e:	4b15      	ldr	r3, [pc, #84]	; (8008c84 <HAL_UART_MspInit+0x98>)
 8008c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c32:	4a14      	ldr	r2, [pc, #80]	; (8008c84 <HAL_UART_MspInit+0x98>)
 8008c34:	f043 0301 	orr.w	r3, r3, #1
 8008c38:	6313      	str	r3, [r2, #48]	; 0x30
 8008c3a:	4b12      	ldr	r3, [pc, #72]	; (8008c84 <HAL_UART_MspInit+0x98>)
 8008c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3e:	f003 0301 	and.w	r3, r3, #1
 8008c42:	60fb      	str	r3, [r7, #12]
 8008c44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008c46:	230c      	movs	r3, #12
 8008c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c52:	2303      	movs	r3, #3
 8008c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008c56:	2307      	movs	r3, #7
 8008c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c5a:	f107 0314 	add.w	r3, r7, #20
 8008c5e:	4619      	mov	r1, r3
 8008c60:	4809      	ldr	r0, [pc, #36]	; (8008c88 <HAL_UART_MspInit+0x9c>)
 8008c62:	f7f7 fe55 	bl	8000910 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8008c66:	2200      	movs	r2, #0
 8008c68:	2102      	movs	r1, #2
 8008c6a:	2026      	movs	r0, #38	; 0x26
 8008c6c:	f7f7 fdf7 	bl	800085e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008c70:	2026      	movs	r0, #38	; 0x26
 8008c72:	f7f7 fe10 	bl	8000896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008c76:	bf00      	nop
 8008c78:	3728      	adds	r7, #40	; 0x28
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	40004400 	.word	0x40004400
 8008c84:	40023800 	.word	0x40023800
 8008c88:	40020000 	.word	0x40020000

08008c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008c90:	bf00      	nop
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008c9a:	b480      	push	{r7}
 8008c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008c9e:	e7fe      	b.n	8008c9e <HardFault_Handler+0x4>

08008ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008ca4:	e7fe      	b.n	8008ca4 <MemManage_Handler+0x4>

08008ca6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008caa:	e7fe      	b.n	8008caa <BusFault_Handler+0x4>

08008cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008cac:	b480      	push	{r7}
 8008cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008cb0:	e7fe      	b.n	8008cb0 <UsageFault_Handler+0x4>

08008cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008cb2:	b480      	push	{r7}
 8008cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008cb6:	bf00      	nop
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008cc4:	bf00      	nop
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008cce:	b480      	push	{r7}
 8008cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008cd2:	bf00      	nop
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008ce0:	f7f7 fca0 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008ce4:	bf00      	nop
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008cec:	4802      	ldr	r0, [pc, #8]	; (8008cf8 <TIM2_IRQHandler+0x10>)
 8008cee:	f7fb f8a1 	bl	8003e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008cf2:	bf00      	nop
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	200001f8 	.word	0x200001f8

08008cfc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008d00:	4802      	ldr	r0, [pc, #8]	; (8008d0c <TIM3_IRQHandler+0x10>)
 8008d02:	f7fb f897 	bl	8003e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008d06:	bf00      	nop
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20000160 	.word	0x20000160

08008d10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8008d14:	4802      	ldr	r0, [pc, #8]	; (8008d20 <TIM4_IRQHandler+0x10>)
 8008d16:	f7fb f88d 	bl	8003e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8008d1a:	bf00      	nop
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	200000cc 	.word	0x200000cc

08008d24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008d28:	4802      	ldr	r0, [pc, #8]	; (8008d34 <USART2_IRQHandler+0x10>)
 8008d2a:	f7fb ff7f 	bl	8004c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008d2e:	bf00      	nop
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	20000238 	.word	0x20000238

08008d38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8008d3c:	4802      	ldr	r0, [pc, #8]	; (8008d48 <OTG_FS_IRQHandler+0x10>)
 8008d3e:	f7f8 fa3b 	bl	80011b8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008d42:	bf00      	nop
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	2000068c 	.word	0x2000068c

08008d4c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008d54:	4b11      	ldr	r3, [pc, #68]	; (8008d9c <_sbrk+0x50>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d102      	bne.n	8008d62 <_sbrk+0x16>
		heap_end = &end;
 8008d5c:	4b0f      	ldr	r3, [pc, #60]	; (8008d9c <_sbrk+0x50>)
 8008d5e:	4a10      	ldr	r2, [pc, #64]	; (8008da0 <_sbrk+0x54>)
 8008d60:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008d62:	4b0e      	ldr	r3, [pc, #56]	; (8008d9c <_sbrk+0x50>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008d68:	4b0c      	ldr	r3, [pc, #48]	; (8008d9c <_sbrk+0x50>)
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4413      	add	r3, r2
 8008d70:	466a      	mov	r2, sp
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d907      	bls.n	8008d86 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008d76:	f000 fb7d 	bl	8009474 <__errno>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	230c      	movs	r3, #12
 8008d7e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008d80:	f04f 33ff 	mov.w	r3, #4294967295
 8008d84:	e006      	b.n	8008d94 <_sbrk+0x48>
	}

	heap_end += incr;
 8008d86:	4b05      	ldr	r3, [pc, #20]	; (8008d9c <_sbrk+0x50>)
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	4a03      	ldr	r2, [pc, #12]	; (8008d9c <_sbrk+0x50>)
 8008d90:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008d92:	68fb      	ldr	r3, [r7, #12]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	200000b8 	.word	0x200000b8
 8008da0:	20000958 	.word	0x20000958

08008da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008da4:	b480      	push	{r7}
 8008da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008da8:	4b16      	ldr	r3, [pc, #88]	; (8008e04 <SystemInit+0x60>)
 8008daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dae:	4a15      	ldr	r2, [pc, #84]	; (8008e04 <SystemInit+0x60>)
 8008db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008db8:	4b13      	ldr	r3, [pc, #76]	; (8008e08 <SystemInit+0x64>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a12      	ldr	r2, [pc, #72]	; (8008e08 <SystemInit+0x64>)
 8008dbe:	f043 0301 	orr.w	r3, r3, #1
 8008dc2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008dc4:	4b10      	ldr	r3, [pc, #64]	; (8008e08 <SystemInit+0x64>)
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008dca:	4b0f      	ldr	r3, [pc, #60]	; (8008e08 <SystemInit+0x64>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a0e      	ldr	r2, [pc, #56]	; (8008e08 <SystemInit+0x64>)
 8008dd0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dd8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008dda:	4b0b      	ldr	r3, [pc, #44]	; (8008e08 <SystemInit+0x64>)
 8008ddc:	4a0b      	ldr	r2, [pc, #44]	; (8008e0c <SystemInit+0x68>)
 8008dde:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008de0:	4b09      	ldr	r3, [pc, #36]	; (8008e08 <SystemInit+0x64>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a08      	ldr	r2, [pc, #32]	; (8008e08 <SystemInit+0x64>)
 8008de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008dea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008dec:	4b06      	ldr	r3, [pc, #24]	; (8008e08 <SystemInit+0x64>)
 8008dee:	2200      	movs	r2, #0
 8008df0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008df2:	4b04      	ldr	r3, [pc, #16]	; (8008e04 <SystemInit+0x60>)
 8008df4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008df8:	609a      	str	r2, [r3, #8]
#endif
}
 8008dfa:	bf00      	nop
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr
 8008e04:	e000ed00 	.word	0xe000ed00
 8008e08:	40023800 	.word	0x40023800
 8008e0c:	24003010 	.word	0x24003010

08008e10 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008e14:	2201      	movs	r2, #1
 8008e16:	490e      	ldr	r1, [pc, #56]	; (8008e50 <MX_USB_HOST_Init+0x40>)
 8008e18:	480e      	ldr	r0, [pc, #56]	; (8008e54 <MX_USB_HOST_Init+0x44>)
 8008e1a:	f7fd fe6f 	bl	8006afc <USBH_Init>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d001      	beq.n	8008e28 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008e24:	f7ff fcd0 	bl	80087c8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008e28:	490b      	ldr	r1, [pc, #44]	; (8008e58 <MX_USB_HOST_Init+0x48>)
 8008e2a:	480a      	ldr	r0, [pc, #40]	; (8008e54 <MX_USB_HOST_Init+0x44>)
 8008e2c:	f7fd fed9 	bl	8006be2 <USBH_RegisterClass>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d001      	beq.n	8008e3a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008e36:	f7ff fcc7 	bl	80087c8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008e3a:	4806      	ldr	r0, [pc, #24]	; (8008e54 <MX_USB_HOST_Init+0x44>)
 8008e3c:	f7fd ff5e 	bl	8006cfc <USBH_Start>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d001      	beq.n	8008e4a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008e46:	f7ff fcbf 	bl	80087c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008e4a:	bf00      	nop
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	08008e71 	.word	0x08008e71
 8008e54:	200002c0 	.word	0x200002c0
 8008e58:	20000008 	.word	0x20000008

08008e5c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008e60:	4802      	ldr	r0, [pc, #8]	; (8008e6c <MX_USB_HOST_Process+0x10>)
 8008e62:	f7fd ff5b 	bl	8006d1c <USBH_Process>
}
 8008e66:	bf00      	nop
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	200002c0 	.word	0x200002c0

08008e70 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	460b      	mov	r3, r1
 8008e7a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008e7c:	78fb      	ldrb	r3, [r7, #3]
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	2b04      	cmp	r3, #4
 8008e82:	d819      	bhi.n	8008eb8 <USBH_UserProcess+0x48>
 8008e84:	a201      	add	r2, pc, #4	; (adr r2, 8008e8c <USBH_UserProcess+0x1c>)
 8008e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8a:	bf00      	nop
 8008e8c:	08008eb9 	.word	0x08008eb9
 8008e90:	08008ea9 	.word	0x08008ea9
 8008e94:	08008eb9 	.word	0x08008eb9
 8008e98:	08008eb1 	.word	0x08008eb1
 8008e9c:	08008ea1 	.word	0x08008ea1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008ea0:	4b09      	ldr	r3, [pc, #36]	; (8008ec8 <USBH_UserProcess+0x58>)
 8008ea2:	2203      	movs	r2, #3
 8008ea4:	701a      	strb	r2, [r3, #0]
  break;
 8008ea6:	e008      	b.n	8008eba <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008ea8:	4b07      	ldr	r3, [pc, #28]	; (8008ec8 <USBH_UserProcess+0x58>)
 8008eaa:	2202      	movs	r2, #2
 8008eac:	701a      	strb	r2, [r3, #0]
  break;
 8008eae:	e004      	b.n	8008eba <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008eb0:	4b05      	ldr	r3, [pc, #20]	; (8008ec8 <USBH_UserProcess+0x58>)
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	701a      	strb	r2, [r3, #0]
  break;
 8008eb6:	e000      	b.n	8008eba <USBH_UserProcess+0x4a>

  default:
  break;
 8008eb8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008eba:	bf00      	nop
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	200000bc 	.word	0x200000bc

08008ecc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b08a      	sub	sp, #40	; 0x28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ed4:	f107 0314 	add.w	r3, r7, #20
 8008ed8:	2200      	movs	r2, #0
 8008eda:	601a      	str	r2, [r3, #0]
 8008edc:	605a      	str	r2, [r3, #4]
 8008ede:	609a      	str	r2, [r3, #8]
 8008ee0:	60da      	str	r2, [r3, #12]
 8008ee2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008eec:	d147      	bne.n	8008f7e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eee:	2300      	movs	r3, #0
 8008ef0:	613b      	str	r3, [r7, #16]
 8008ef2:	4b25      	ldr	r3, [pc, #148]	; (8008f88 <HAL_HCD_MspInit+0xbc>)
 8008ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef6:	4a24      	ldr	r2, [pc, #144]	; (8008f88 <HAL_HCD_MspInit+0xbc>)
 8008ef8:	f043 0301 	orr.w	r3, r3, #1
 8008efc:	6313      	str	r3, [r2, #48]	; 0x30
 8008efe:	4b22      	ldr	r3, [pc, #136]	; (8008f88 <HAL_HCD_MspInit+0xbc>)
 8008f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f02:	f003 0301 	and.w	r3, r3, #1
 8008f06:	613b      	str	r3, [r7, #16]
 8008f08:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f10:	2300      	movs	r3, #0
 8008f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f14:	2300      	movs	r3, #0
 8008f16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008f18:	f107 0314 	add.w	r3, r7, #20
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	481b      	ldr	r0, [pc, #108]	; (8008f8c <HAL_HCD_MspInit+0xc0>)
 8008f20:	f7f7 fcf6 	bl	8000910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008f24:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f2a:	2302      	movs	r3, #2
 8008f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f32:	2300      	movs	r3, #0
 8008f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f36:	230a      	movs	r3, #10
 8008f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f3a:	f107 0314 	add.w	r3, r7, #20
 8008f3e:	4619      	mov	r1, r3
 8008f40:	4812      	ldr	r0, [pc, #72]	; (8008f8c <HAL_HCD_MspInit+0xc0>)
 8008f42:	f7f7 fce5 	bl	8000910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f46:	4b10      	ldr	r3, [pc, #64]	; (8008f88 <HAL_HCD_MspInit+0xbc>)
 8008f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4a:	4a0f      	ldr	r2, [pc, #60]	; (8008f88 <HAL_HCD_MspInit+0xbc>)
 8008f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f50:	6353      	str	r3, [r2, #52]	; 0x34
 8008f52:	2300      	movs	r3, #0
 8008f54:	60fb      	str	r3, [r7, #12]
 8008f56:	4b0c      	ldr	r3, [pc, #48]	; (8008f88 <HAL_HCD_MspInit+0xbc>)
 8008f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5a:	4a0b      	ldr	r2, [pc, #44]	; (8008f88 <HAL_HCD_MspInit+0xbc>)
 8008f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f60:	6453      	str	r3, [r2, #68]	; 0x44
 8008f62:	4b09      	ldr	r3, [pc, #36]	; (8008f88 <HAL_HCD_MspInit+0xbc>)
 8008f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f6e:	2200      	movs	r2, #0
 8008f70:	2100      	movs	r1, #0
 8008f72:	2043      	movs	r0, #67	; 0x43
 8008f74:	f7f7 fc73 	bl	800085e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f78:	2043      	movs	r0, #67	; 0x43
 8008f7a:	f7f7 fc8c 	bl	8000896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f7e:	bf00      	nop
 8008f80:	3728      	adds	r7, #40	; 0x28
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	40023800 	.word	0x40023800
 8008f8c:	40020000 	.word	0x40020000

08008f90 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fe f96d 	bl	800727e <USBH_LL_IncTimer>
}
 8008fa4:	bf00      	nop
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fe f9b2 	bl	8007324 <USBH_LL_Connect>
}
 8008fc0:	bf00      	nop
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fe f9ca 	bl	8007370 <USBH_LL_Disconnect>
}
 8008fdc:	bf00      	nop
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	460b      	mov	r3, r1
 8008fee:	70fb      	strb	r3, [r7, #3]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008ff4:	bf00      	nop
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800900e:	4618      	mov	r0, r3
 8009010:	f7fe f95f 	bl	80072d2 <USBH_LL_PortEnabled>
} 
 8009014:	bf00      	nop
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800902a:	4618      	mov	r0, r3
 800902c:	f7fe f95f 	bl	80072ee <USBH_LL_PortDisabled>
} 
 8009030:	bf00      	nop
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8009046:	2b01      	cmp	r3, #1
 8009048:	d12a      	bne.n	80090a0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800904a:	4a18      	ldr	r2, [pc, #96]	; (80090ac <USBH_LL_Init+0x74>)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a15      	ldr	r2, [pc, #84]	; (80090ac <USBH_LL_Init+0x74>)
 8009056:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800905a:	4b14      	ldr	r3, [pc, #80]	; (80090ac <USBH_LL_Init+0x74>)
 800905c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009060:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009062:	4b12      	ldr	r3, [pc, #72]	; (80090ac <USBH_LL_Init+0x74>)
 8009064:	2208      	movs	r2, #8
 8009066:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009068:	4b10      	ldr	r3, [pc, #64]	; (80090ac <USBH_LL_Init+0x74>)
 800906a:	2201      	movs	r2, #1
 800906c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800906e:	4b0f      	ldr	r3, [pc, #60]	; (80090ac <USBH_LL_Init+0x74>)
 8009070:	2200      	movs	r2, #0
 8009072:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009074:	4b0d      	ldr	r3, [pc, #52]	; (80090ac <USBH_LL_Init+0x74>)
 8009076:	2202      	movs	r2, #2
 8009078:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800907a:	4b0c      	ldr	r3, [pc, #48]	; (80090ac <USBH_LL_Init+0x74>)
 800907c:	2200      	movs	r2, #0
 800907e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009080:	480a      	ldr	r0, [pc, #40]	; (80090ac <USBH_LL_Init+0x74>)
 8009082:	f7f7 fe13 	bl	8000cac <HAL_HCD_Init>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d001      	beq.n	8009090 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800908c:	f7ff fb9c 	bl	80087c8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009090:	4806      	ldr	r0, [pc, #24]	; (80090ac <USBH_LL_Init+0x74>)
 8009092:	f7f8 fa0f 	bl	80014b4 <HAL_HCD_GetCurrentFrame>
 8009096:	4603      	mov	r3, r0
 8009098:	4619      	mov	r1, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f7fe f8e0 	bl	8007260 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	2000068c 	.word	0x2000068c

080090b0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7f8 f97c 	bl	80013c4 <HAL_HCD_Start>
 80090cc:	4603      	mov	r3, r0
 80090ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 f95c 	bl	8009390 <USBH_Get_USB_Status>
 80090d8:	4603      	mov	r3, r0
 80090da:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80090dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b084      	sub	sp, #16
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ee:	2300      	movs	r3, #0
 80090f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7f8 f984 	bl	800140a <HAL_HCD_Stop>
 8009102:	4603      	mov	r3, r0
 8009104:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009106:	7bfb      	ldrb	r3, [r7, #15]
 8009108:	4618      	mov	r0, r3
 800910a:	f000 f941 	bl	8009390 <USBH_Get_USB_Status>
 800910e:	4603      	mov	r3, r0
 8009110:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8009112:	7bbb      	ldrb	r3, [r7, #14]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009124:	2301      	movs	r3, #1
 8009126:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800912e:	4618      	mov	r0, r3
 8009130:	f7f8 f9ce 	bl	80014d0 <HAL_HCD_GetCurrentSpeed>
 8009134:	4603      	mov	r3, r0
 8009136:	2b01      	cmp	r3, #1
 8009138:	d007      	beq.n	800914a <USBH_LL_GetSpeed+0x2e>
 800913a:	2b01      	cmp	r3, #1
 800913c:	d302      	bcc.n	8009144 <USBH_LL_GetSpeed+0x28>
 800913e:	2b02      	cmp	r3, #2
 8009140:	d006      	beq.n	8009150 <USBH_LL_GetSpeed+0x34>
 8009142:	e008      	b.n	8009156 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009144:	2300      	movs	r3, #0
 8009146:	73fb      	strb	r3, [r7, #15]
    break;
 8009148:	e008      	b.n	800915c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800914a:	2301      	movs	r3, #1
 800914c:	73fb      	strb	r3, [r7, #15]
    break;
 800914e:	e005      	b.n	800915c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009150:	2302      	movs	r3, #2
 8009152:	73fb      	strb	r3, [r7, #15]
    break;
 8009154:	e002      	b.n	800915c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8009156:	2301      	movs	r3, #1
 8009158:	73fb      	strb	r3, [r7, #15]
    break;
 800915a:	bf00      	nop
  }
  return  speed;
 800915c:	7bfb      	ldrb	r3, [r7, #15]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009166:	b580      	push	{r7, lr}
 8009168:	b084      	sub	sp, #16
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009172:	2300      	movs	r3, #0
 8009174:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800917c:	4618      	mov	r0, r3
 800917e:	f7f8 f961 	bl	8001444 <HAL_HCD_ResetPort>
 8009182:	4603      	mov	r3, r0
 8009184:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8009186:	7bfb      	ldrb	r3, [r7, #15]
 8009188:	4618      	mov	r0, r3
 800918a:	f000 f901 	bl	8009390 <USBH_Get_USB_Status>
 800918e:	4603      	mov	r3, r0
 8009190:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009192:	7bbb      	ldrb	r3, [r7, #14]
}
 8009194:	4618      	mov	r0, r3
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	460b      	mov	r3, r1
 80091a6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80091ae:	78fa      	ldrb	r2, [r7, #3]
 80091b0:	4611      	mov	r1, r2
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7f8 f969 	bl	800148a <HAL_HCD_HC_GetXferCount>
 80091b8:	4603      	mov	r3, r0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80091c2:	b590      	push	{r4, r7, lr}
 80091c4:	b089      	sub	sp, #36	; 0x24
 80091c6:	af04      	add	r7, sp, #16
 80091c8:	6078      	str	r0, [r7, #4]
 80091ca:	4608      	mov	r0, r1
 80091cc:	4611      	mov	r1, r2
 80091ce:	461a      	mov	r2, r3
 80091d0:	4603      	mov	r3, r0
 80091d2:	70fb      	strb	r3, [r7, #3]
 80091d4:	460b      	mov	r3, r1
 80091d6:	70bb      	strb	r3, [r7, #2]
 80091d8:	4613      	mov	r3, r2
 80091da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091dc:	2300      	movs	r3, #0
 80091de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091e0:	2300      	movs	r3, #0
 80091e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80091ea:	787c      	ldrb	r4, [r7, #1]
 80091ec:	78ba      	ldrb	r2, [r7, #2]
 80091ee:	78f9      	ldrb	r1, [r7, #3]
 80091f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80091f2:	9302      	str	r3, [sp, #8]
 80091f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80091f8:	9301      	str	r3, [sp, #4]
 80091fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80091fe:	9300      	str	r3, [sp, #0]
 8009200:	4623      	mov	r3, r4
 8009202:	f7f7 fdb5 	bl	8000d70 <HAL_HCD_HC_Init>
 8009206:	4603      	mov	r3, r0
 8009208:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800920a:	7bfb      	ldrb	r3, [r7, #15]
 800920c:	4618      	mov	r0, r3
 800920e:	f000 f8bf 	bl	8009390 <USBH_Get_USB_Status>
 8009212:	4603      	mov	r3, r0
 8009214:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009216:	7bbb      	ldrb	r3, [r7, #14]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	bd90      	pop	{r4, r7, pc}

08009220 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	460b      	mov	r3, r1
 800922a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800922c:	2300      	movs	r3, #0
 800922e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009230:	2300      	movs	r3, #0
 8009232:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800923a:	78fa      	ldrb	r2, [r7, #3]
 800923c:	4611      	mov	r1, r2
 800923e:	4618      	mov	r0, r3
 8009240:	f7f7 fe2e 	bl	8000ea0 <HAL_HCD_HC_Halt>
 8009244:	4603      	mov	r3, r0
 8009246:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009248:	7bfb      	ldrb	r3, [r7, #15]
 800924a:	4618      	mov	r0, r3
 800924c:	f000 f8a0 	bl	8009390 <USBH_Get_USB_Status>
 8009250:	4603      	mov	r3, r0
 8009252:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009254:	7bbb      	ldrb	r3, [r7, #14]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800925e:	b590      	push	{r4, r7, lr}
 8009260:	b089      	sub	sp, #36	; 0x24
 8009262:	af04      	add	r7, sp, #16
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	4608      	mov	r0, r1
 8009268:	4611      	mov	r1, r2
 800926a:	461a      	mov	r2, r3
 800926c:	4603      	mov	r3, r0
 800926e:	70fb      	strb	r3, [r7, #3]
 8009270:	460b      	mov	r3, r1
 8009272:	70bb      	strb	r3, [r7, #2]
 8009274:	4613      	mov	r3, r2
 8009276:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009278:	2300      	movs	r3, #0
 800927a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800927c:	2300      	movs	r3, #0
 800927e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8009286:	787c      	ldrb	r4, [r7, #1]
 8009288:	78ba      	ldrb	r2, [r7, #2]
 800928a:	78f9      	ldrb	r1, [r7, #3]
 800928c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009290:	9303      	str	r3, [sp, #12]
 8009292:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009294:	9302      	str	r3, [sp, #8]
 8009296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009298:	9301      	str	r3, [sp, #4]
 800929a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	4623      	mov	r3, r4
 80092a2:	f7f7 fe21 	bl	8000ee8 <HAL_HCD_HC_SubmitRequest>
 80092a6:	4603      	mov	r3, r0
 80092a8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
 80092ac:	4618      	mov	r0, r3
 80092ae:	f000 f86f 	bl	8009390 <USBH_Get_USB_Status>
 80092b2:	4603      	mov	r3, r0
 80092b4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80092b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd90      	pop	{r4, r7, pc}

080092c0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	460b      	mov	r3, r1
 80092ca:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80092d2:	78fa      	ldrb	r2, [r7, #3]
 80092d4:	4611      	mov	r1, r2
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7f8 f8c2 	bl	8001460 <HAL_HCD_HC_GetURBState>
 80092dc:	4603      	mov	r3, r0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b082      	sub	sp, #8
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	460b      	mov	r3, r1
 80092f0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d103      	bne.n	8009304 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80092fc:	78fb      	ldrb	r3, [r7, #3]
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 f872 	bl	80093e8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009304:	20c8      	movs	r0, #200	; 0xc8
 8009306:	f7f7 f9ad 	bl	8000664 <HAL_Delay>
  return USBH_OK;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	460b      	mov	r3, r1
 800931e:	70fb      	strb	r3, [r7, #3]
 8009320:	4613      	mov	r3, r2
 8009322:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800932a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800932c:	78fa      	ldrb	r2, [r7, #3]
 800932e:	68f9      	ldr	r1, [r7, #12]
 8009330:	4613      	mov	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4413      	add	r3, r2
 8009336:	00db      	lsls	r3, r3, #3
 8009338:	440b      	add	r3, r1
 800933a:	333b      	adds	r3, #59	; 0x3b
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00a      	beq.n	8009358 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009342:	78fa      	ldrb	r2, [r7, #3]
 8009344:	68f9      	ldr	r1, [r7, #12]
 8009346:	4613      	mov	r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4413      	add	r3, r2
 800934c:	00db      	lsls	r3, r3, #3
 800934e:	440b      	add	r3, r1
 8009350:	3350      	adds	r3, #80	; 0x50
 8009352:	78ba      	ldrb	r2, [r7, #2]
 8009354:	701a      	strb	r2, [r3, #0]
 8009356:	e009      	b.n	800936c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009358:	78fa      	ldrb	r2, [r7, #3]
 800935a:	68f9      	ldr	r1, [r7, #12]
 800935c:	4613      	mov	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	00db      	lsls	r3, r3, #3
 8009364:	440b      	add	r3, r1
 8009366:	3351      	adds	r3, #81	; 0x51
 8009368:	78ba      	ldrb	r2, [r7, #2]
 800936a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3714      	adds	r7, #20
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr

0800937a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b082      	sub	sp, #8
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7f7 f96e 	bl	8000664 <HAL_Delay>
}
 8009388:	bf00      	nop
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009390:	b480      	push	{r7}
 8009392:	b085      	sub	sp, #20
 8009394:	af00      	add	r7, sp, #0
 8009396:	4603      	mov	r3, r0
 8009398:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800939e:	79fb      	ldrb	r3, [r7, #7]
 80093a0:	2b03      	cmp	r3, #3
 80093a2:	d817      	bhi.n	80093d4 <USBH_Get_USB_Status+0x44>
 80093a4:	a201      	add	r2, pc, #4	; (adr r2, 80093ac <USBH_Get_USB_Status+0x1c>)
 80093a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093aa:	bf00      	nop
 80093ac:	080093bd 	.word	0x080093bd
 80093b0:	080093c3 	.word	0x080093c3
 80093b4:	080093c9 	.word	0x080093c9
 80093b8:	080093cf 	.word	0x080093cf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80093bc:	2300      	movs	r3, #0
 80093be:	73fb      	strb	r3, [r7, #15]
    break;
 80093c0:	e00b      	b.n	80093da <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80093c2:	2302      	movs	r3, #2
 80093c4:	73fb      	strb	r3, [r7, #15]
    break;
 80093c6:	e008      	b.n	80093da <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80093c8:	2301      	movs	r3, #1
 80093ca:	73fb      	strb	r3, [r7, #15]
    break;
 80093cc:	e005      	b.n	80093da <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80093ce:	2302      	movs	r3, #2
 80093d0:	73fb      	strb	r3, [r7, #15]
    break;
 80093d2:	e002      	b.n	80093da <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80093d4:	2302      	movs	r3, #2
 80093d6:	73fb      	strb	r3, [r7, #15]
    break;
 80093d8:	bf00      	nop
  }
  return usb_status;
 80093da:	7bfb      	ldrb	r3, [r7, #15]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3714      	adds	r7, #20
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	4603      	mov	r3, r0
 80093f0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80093f2:	79fb      	ldrb	r3, [r7, #7]
 80093f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80093f6:	79fb      	ldrb	r3, [r7, #7]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d102      	bne.n	8009402 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80093fc:	2301      	movs	r3, #1
 80093fe:	73fb      	strb	r3, [r7, #15]
 8009400:	e001      	b.n	8009406 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009402:	2300      	movs	r3, #0
 8009404:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009406:	7bfb      	ldrb	r3, [r7, #15]
 8009408:	461a      	mov	r2, r3
 800940a:	2101      	movs	r1, #1
 800940c:	4803      	ldr	r0, [pc, #12]	; (800941c <MX_DriverVbusFS+0x34>)
 800940e:	f7f7 fc19 	bl	8000c44 <HAL_GPIO_WritePin>
}
 8009412:	bf00      	nop
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	40020800 	.word	0x40020800

08009420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009458 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009424:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009426:	e003      	b.n	8009430 <LoopCopyDataInit>

08009428 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009428:	4b0c      	ldr	r3, [pc, #48]	; (800945c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800942a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800942c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800942e:	3104      	adds	r1, #4

08009430 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009430:	480b      	ldr	r0, [pc, #44]	; (8009460 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009432:	4b0c      	ldr	r3, [pc, #48]	; (8009464 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009434:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009436:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009438:	d3f6      	bcc.n	8009428 <CopyDataInit>
  ldr  r2, =_sbss
 800943a:	4a0b      	ldr	r2, [pc, #44]	; (8009468 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800943c:	e002      	b.n	8009444 <LoopFillZerobss>

0800943e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800943e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009440:	f842 3b04 	str.w	r3, [r2], #4

08009444 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009444:	4b09      	ldr	r3, [pc, #36]	; (800946c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009446:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009448:	d3f9      	bcc.n	800943e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800944a:	f7ff fcab 	bl	8008da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800944e:	f000 f817 	bl	8009480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009452:	f7fe fde1 	bl	8008018 <main>
  bx  lr    
 8009456:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009458:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800945c:	08009d84 	.word	0x08009d84
  ldr  r0, =_sdata
 8009460:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009464:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8009468:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 800946c:	20000954 	.word	0x20000954

08009470 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009470:	e7fe      	b.n	8009470 <ADC_IRQHandler>
	...

08009474 <__errno>:
 8009474:	4b01      	ldr	r3, [pc, #4]	; (800947c <__errno+0x8>)
 8009476:	6818      	ldr	r0, [r3, #0]
 8009478:	4770      	bx	lr
 800947a:	bf00      	nop
 800947c:	2000002c 	.word	0x2000002c

08009480 <__libc_init_array>:
 8009480:	b570      	push	{r4, r5, r6, lr}
 8009482:	4e0d      	ldr	r6, [pc, #52]	; (80094b8 <__libc_init_array+0x38>)
 8009484:	4c0d      	ldr	r4, [pc, #52]	; (80094bc <__libc_init_array+0x3c>)
 8009486:	1ba4      	subs	r4, r4, r6
 8009488:	10a4      	asrs	r4, r4, #2
 800948a:	2500      	movs	r5, #0
 800948c:	42a5      	cmp	r5, r4
 800948e:	d109      	bne.n	80094a4 <__libc_init_array+0x24>
 8009490:	4e0b      	ldr	r6, [pc, #44]	; (80094c0 <__libc_init_array+0x40>)
 8009492:	4c0c      	ldr	r4, [pc, #48]	; (80094c4 <__libc_init_array+0x44>)
 8009494:	f000 fc36 	bl	8009d04 <_init>
 8009498:	1ba4      	subs	r4, r4, r6
 800949a:	10a4      	asrs	r4, r4, #2
 800949c:	2500      	movs	r5, #0
 800949e:	42a5      	cmp	r5, r4
 80094a0:	d105      	bne.n	80094ae <__libc_init_array+0x2e>
 80094a2:	bd70      	pop	{r4, r5, r6, pc}
 80094a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094a8:	4798      	blx	r3
 80094aa:	3501      	adds	r5, #1
 80094ac:	e7ee      	b.n	800948c <__libc_init_array+0xc>
 80094ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094b2:	4798      	blx	r3
 80094b4:	3501      	adds	r5, #1
 80094b6:	e7f2      	b.n	800949e <__libc_init_array+0x1e>
 80094b8:	08009d7c 	.word	0x08009d7c
 80094bc:	08009d7c 	.word	0x08009d7c
 80094c0:	08009d7c 	.word	0x08009d7c
 80094c4:	08009d80 	.word	0x08009d80

080094c8 <malloc>:
 80094c8:	4b02      	ldr	r3, [pc, #8]	; (80094d4 <malloc+0xc>)
 80094ca:	4601      	mov	r1, r0
 80094cc:	6818      	ldr	r0, [r3, #0]
 80094ce:	f000 b861 	b.w	8009594 <_malloc_r>
 80094d2:	bf00      	nop
 80094d4:	2000002c 	.word	0x2000002c

080094d8 <free>:
 80094d8:	4b02      	ldr	r3, [pc, #8]	; (80094e4 <free+0xc>)
 80094da:	4601      	mov	r1, r0
 80094dc:	6818      	ldr	r0, [r3, #0]
 80094de:	f000 b80b 	b.w	80094f8 <_free_r>
 80094e2:	bf00      	nop
 80094e4:	2000002c 	.word	0x2000002c

080094e8 <memset>:
 80094e8:	4402      	add	r2, r0
 80094ea:	4603      	mov	r3, r0
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d100      	bne.n	80094f2 <memset+0xa>
 80094f0:	4770      	bx	lr
 80094f2:	f803 1b01 	strb.w	r1, [r3], #1
 80094f6:	e7f9      	b.n	80094ec <memset+0x4>

080094f8 <_free_r>:
 80094f8:	b538      	push	{r3, r4, r5, lr}
 80094fa:	4605      	mov	r5, r0
 80094fc:	2900      	cmp	r1, #0
 80094fe:	d045      	beq.n	800958c <_free_r+0x94>
 8009500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009504:	1f0c      	subs	r4, r1, #4
 8009506:	2b00      	cmp	r3, #0
 8009508:	bfb8      	it	lt
 800950a:	18e4      	addlt	r4, r4, r3
 800950c:	f000 f8cc 	bl	80096a8 <__malloc_lock>
 8009510:	4a1f      	ldr	r2, [pc, #124]	; (8009590 <_free_r+0x98>)
 8009512:	6813      	ldr	r3, [r2, #0]
 8009514:	4610      	mov	r0, r2
 8009516:	b933      	cbnz	r3, 8009526 <_free_r+0x2e>
 8009518:	6063      	str	r3, [r4, #4]
 800951a:	6014      	str	r4, [r2, #0]
 800951c:	4628      	mov	r0, r5
 800951e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009522:	f000 b8c2 	b.w	80096aa <__malloc_unlock>
 8009526:	42a3      	cmp	r3, r4
 8009528:	d90c      	bls.n	8009544 <_free_r+0x4c>
 800952a:	6821      	ldr	r1, [r4, #0]
 800952c:	1862      	adds	r2, r4, r1
 800952e:	4293      	cmp	r3, r2
 8009530:	bf04      	itt	eq
 8009532:	681a      	ldreq	r2, [r3, #0]
 8009534:	685b      	ldreq	r3, [r3, #4]
 8009536:	6063      	str	r3, [r4, #4]
 8009538:	bf04      	itt	eq
 800953a:	1852      	addeq	r2, r2, r1
 800953c:	6022      	streq	r2, [r4, #0]
 800953e:	6004      	str	r4, [r0, #0]
 8009540:	e7ec      	b.n	800951c <_free_r+0x24>
 8009542:	4613      	mov	r3, r2
 8009544:	685a      	ldr	r2, [r3, #4]
 8009546:	b10a      	cbz	r2, 800954c <_free_r+0x54>
 8009548:	42a2      	cmp	r2, r4
 800954a:	d9fa      	bls.n	8009542 <_free_r+0x4a>
 800954c:	6819      	ldr	r1, [r3, #0]
 800954e:	1858      	adds	r0, r3, r1
 8009550:	42a0      	cmp	r0, r4
 8009552:	d10b      	bne.n	800956c <_free_r+0x74>
 8009554:	6820      	ldr	r0, [r4, #0]
 8009556:	4401      	add	r1, r0
 8009558:	1858      	adds	r0, r3, r1
 800955a:	4282      	cmp	r2, r0
 800955c:	6019      	str	r1, [r3, #0]
 800955e:	d1dd      	bne.n	800951c <_free_r+0x24>
 8009560:	6810      	ldr	r0, [r2, #0]
 8009562:	6852      	ldr	r2, [r2, #4]
 8009564:	605a      	str	r2, [r3, #4]
 8009566:	4401      	add	r1, r0
 8009568:	6019      	str	r1, [r3, #0]
 800956a:	e7d7      	b.n	800951c <_free_r+0x24>
 800956c:	d902      	bls.n	8009574 <_free_r+0x7c>
 800956e:	230c      	movs	r3, #12
 8009570:	602b      	str	r3, [r5, #0]
 8009572:	e7d3      	b.n	800951c <_free_r+0x24>
 8009574:	6820      	ldr	r0, [r4, #0]
 8009576:	1821      	adds	r1, r4, r0
 8009578:	428a      	cmp	r2, r1
 800957a:	bf04      	itt	eq
 800957c:	6811      	ldreq	r1, [r2, #0]
 800957e:	6852      	ldreq	r2, [r2, #4]
 8009580:	6062      	str	r2, [r4, #4]
 8009582:	bf04      	itt	eq
 8009584:	1809      	addeq	r1, r1, r0
 8009586:	6021      	streq	r1, [r4, #0]
 8009588:	605c      	str	r4, [r3, #4]
 800958a:	e7c7      	b.n	800951c <_free_r+0x24>
 800958c:	bd38      	pop	{r3, r4, r5, pc}
 800958e:	bf00      	nop
 8009590:	200000c0 	.word	0x200000c0

08009594 <_malloc_r>:
 8009594:	b570      	push	{r4, r5, r6, lr}
 8009596:	1ccd      	adds	r5, r1, #3
 8009598:	f025 0503 	bic.w	r5, r5, #3
 800959c:	3508      	adds	r5, #8
 800959e:	2d0c      	cmp	r5, #12
 80095a0:	bf38      	it	cc
 80095a2:	250c      	movcc	r5, #12
 80095a4:	2d00      	cmp	r5, #0
 80095a6:	4606      	mov	r6, r0
 80095a8:	db01      	blt.n	80095ae <_malloc_r+0x1a>
 80095aa:	42a9      	cmp	r1, r5
 80095ac:	d903      	bls.n	80095b6 <_malloc_r+0x22>
 80095ae:	230c      	movs	r3, #12
 80095b0:	6033      	str	r3, [r6, #0]
 80095b2:	2000      	movs	r0, #0
 80095b4:	bd70      	pop	{r4, r5, r6, pc}
 80095b6:	f000 f877 	bl	80096a8 <__malloc_lock>
 80095ba:	4a21      	ldr	r2, [pc, #132]	; (8009640 <_malloc_r+0xac>)
 80095bc:	6814      	ldr	r4, [r2, #0]
 80095be:	4621      	mov	r1, r4
 80095c0:	b991      	cbnz	r1, 80095e8 <_malloc_r+0x54>
 80095c2:	4c20      	ldr	r4, [pc, #128]	; (8009644 <_malloc_r+0xb0>)
 80095c4:	6823      	ldr	r3, [r4, #0]
 80095c6:	b91b      	cbnz	r3, 80095d0 <_malloc_r+0x3c>
 80095c8:	4630      	mov	r0, r6
 80095ca:	f000 f83d 	bl	8009648 <_sbrk_r>
 80095ce:	6020      	str	r0, [r4, #0]
 80095d0:	4629      	mov	r1, r5
 80095d2:	4630      	mov	r0, r6
 80095d4:	f000 f838 	bl	8009648 <_sbrk_r>
 80095d8:	1c43      	adds	r3, r0, #1
 80095da:	d124      	bne.n	8009626 <_malloc_r+0x92>
 80095dc:	230c      	movs	r3, #12
 80095de:	6033      	str	r3, [r6, #0]
 80095e0:	4630      	mov	r0, r6
 80095e2:	f000 f862 	bl	80096aa <__malloc_unlock>
 80095e6:	e7e4      	b.n	80095b2 <_malloc_r+0x1e>
 80095e8:	680b      	ldr	r3, [r1, #0]
 80095ea:	1b5b      	subs	r3, r3, r5
 80095ec:	d418      	bmi.n	8009620 <_malloc_r+0x8c>
 80095ee:	2b0b      	cmp	r3, #11
 80095f0:	d90f      	bls.n	8009612 <_malloc_r+0x7e>
 80095f2:	600b      	str	r3, [r1, #0]
 80095f4:	50cd      	str	r5, [r1, r3]
 80095f6:	18cc      	adds	r4, r1, r3
 80095f8:	4630      	mov	r0, r6
 80095fa:	f000 f856 	bl	80096aa <__malloc_unlock>
 80095fe:	f104 000b 	add.w	r0, r4, #11
 8009602:	1d23      	adds	r3, r4, #4
 8009604:	f020 0007 	bic.w	r0, r0, #7
 8009608:	1ac3      	subs	r3, r0, r3
 800960a:	d0d3      	beq.n	80095b4 <_malloc_r+0x20>
 800960c:	425a      	negs	r2, r3
 800960e:	50e2      	str	r2, [r4, r3]
 8009610:	e7d0      	b.n	80095b4 <_malloc_r+0x20>
 8009612:	428c      	cmp	r4, r1
 8009614:	684b      	ldr	r3, [r1, #4]
 8009616:	bf16      	itet	ne
 8009618:	6063      	strne	r3, [r4, #4]
 800961a:	6013      	streq	r3, [r2, #0]
 800961c:	460c      	movne	r4, r1
 800961e:	e7eb      	b.n	80095f8 <_malloc_r+0x64>
 8009620:	460c      	mov	r4, r1
 8009622:	6849      	ldr	r1, [r1, #4]
 8009624:	e7cc      	b.n	80095c0 <_malloc_r+0x2c>
 8009626:	1cc4      	adds	r4, r0, #3
 8009628:	f024 0403 	bic.w	r4, r4, #3
 800962c:	42a0      	cmp	r0, r4
 800962e:	d005      	beq.n	800963c <_malloc_r+0xa8>
 8009630:	1a21      	subs	r1, r4, r0
 8009632:	4630      	mov	r0, r6
 8009634:	f000 f808 	bl	8009648 <_sbrk_r>
 8009638:	3001      	adds	r0, #1
 800963a:	d0cf      	beq.n	80095dc <_malloc_r+0x48>
 800963c:	6025      	str	r5, [r4, #0]
 800963e:	e7db      	b.n	80095f8 <_malloc_r+0x64>
 8009640:	200000c0 	.word	0x200000c0
 8009644:	200000c4 	.word	0x200000c4

08009648 <_sbrk_r>:
 8009648:	b538      	push	{r3, r4, r5, lr}
 800964a:	4c06      	ldr	r4, [pc, #24]	; (8009664 <_sbrk_r+0x1c>)
 800964c:	2300      	movs	r3, #0
 800964e:	4605      	mov	r5, r0
 8009650:	4608      	mov	r0, r1
 8009652:	6023      	str	r3, [r4, #0]
 8009654:	f7ff fb7a 	bl	8008d4c <_sbrk>
 8009658:	1c43      	adds	r3, r0, #1
 800965a:	d102      	bne.n	8009662 <_sbrk_r+0x1a>
 800965c:	6823      	ldr	r3, [r4, #0]
 800965e:	b103      	cbz	r3, 8009662 <_sbrk_r+0x1a>
 8009660:	602b      	str	r3, [r5, #0]
 8009662:	bd38      	pop	{r3, r4, r5, pc}
 8009664:	20000950 	.word	0x20000950

08009668 <siprintf>:
 8009668:	b40e      	push	{r1, r2, r3}
 800966a:	b500      	push	{lr}
 800966c:	b09c      	sub	sp, #112	; 0x70
 800966e:	ab1d      	add	r3, sp, #116	; 0x74
 8009670:	9002      	str	r0, [sp, #8]
 8009672:	9006      	str	r0, [sp, #24]
 8009674:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009678:	4809      	ldr	r0, [pc, #36]	; (80096a0 <siprintf+0x38>)
 800967a:	9107      	str	r1, [sp, #28]
 800967c:	9104      	str	r1, [sp, #16]
 800967e:	4909      	ldr	r1, [pc, #36]	; (80096a4 <siprintf+0x3c>)
 8009680:	f853 2b04 	ldr.w	r2, [r3], #4
 8009684:	9105      	str	r1, [sp, #20]
 8009686:	6800      	ldr	r0, [r0, #0]
 8009688:	9301      	str	r3, [sp, #4]
 800968a:	a902      	add	r1, sp, #8
 800968c:	f000 f868 	bl	8009760 <_svfiprintf_r>
 8009690:	9b02      	ldr	r3, [sp, #8]
 8009692:	2200      	movs	r2, #0
 8009694:	701a      	strb	r2, [r3, #0]
 8009696:	b01c      	add	sp, #112	; 0x70
 8009698:	f85d eb04 	ldr.w	lr, [sp], #4
 800969c:	b003      	add	sp, #12
 800969e:	4770      	bx	lr
 80096a0:	2000002c 	.word	0x2000002c
 80096a4:	ffff0208 	.word	0xffff0208

080096a8 <__malloc_lock>:
 80096a8:	4770      	bx	lr

080096aa <__malloc_unlock>:
 80096aa:	4770      	bx	lr

080096ac <__ssputs_r>:
 80096ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b0:	688e      	ldr	r6, [r1, #8]
 80096b2:	429e      	cmp	r6, r3
 80096b4:	4682      	mov	sl, r0
 80096b6:	460c      	mov	r4, r1
 80096b8:	4690      	mov	r8, r2
 80096ba:	4699      	mov	r9, r3
 80096bc:	d837      	bhi.n	800972e <__ssputs_r+0x82>
 80096be:	898a      	ldrh	r2, [r1, #12]
 80096c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80096c4:	d031      	beq.n	800972a <__ssputs_r+0x7e>
 80096c6:	6825      	ldr	r5, [r4, #0]
 80096c8:	6909      	ldr	r1, [r1, #16]
 80096ca:	1a6f      	subs	r7, r5, r1
 80096cc:	6965      	ldr	r5, [r4, #20]
 80096ce:	2302      	movs	r3, #2
 80096d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80096d8:	f109 0301 	add.w	r3, r9, #1
 80096dc:	443b      	add	r3, r7
 80096de:	429d      	cmp	r5, r3
 80096e0:	bf38      	it	cc
 80096e2:	461d      	movcc	r5, r3
 80096e4:	0553      	lsls	r3, r2, #21
 80096e6:	d530      	bpl.n	800974a <__ssputs_r+0x9e>
 80096e8:	4629      	mov	r1, r5
 80096ea:	f7ff ff53 	bl	8009594 <_malloc_r>
 80096ee:	4606      	mov	r6, r0
 80096f0:	b950      	cbnz	r0, 8009708 <__ssputs_r+0x5c>
 80096f2:	230c      	movs	r3, #12
 80096f4:	f8ca 3000 	str.w	r3, [sl]
 80096f8:	89a3      	ldrh	r3, [r4, #12]
 80096fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096fe:	81a3      	strh	r3, [r4, #12]
 8009700:	f04f 30ff 	mov.w	r0, #4294967295
 8009704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009708:	463a      	mov	r2, r7
 800970a:	6921      	ldr	r1, [r4, #16]
 800970c:	f000 faa8 	bl	8009c60 <memcpy>
 8009710:	89a3      	ldrh	r3, [r4, #12]
 8009712:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800971a:	81a3      	strh	r3, [r4, #12]
 800971c:	6126      	str	r6, [r4, #16]
 800971e:	6165      	str	r5, [r4, #20]
 8009720:	443e      	add	r6, r7
 8009722:	1bed      	subs	r5, r5, r7
 8009724:	6026      	str	r6, [r4, #0]
 8009726:	60a5      	str	r5, [r4, #8]
 8009728:	464e      	mov	r6, r9
 800972a:	454e      	cmp	r6, r9
 800972c:	d900      	bls.n	8009730 <__ssputs_r+0x84>
 800972e:	464e      	mov	r6, r9
 8009730:	4632      	mov	r2, r6
 8009732:	4641      	mov	r1, r8
 8009734:	6820      	ldr	r0, [r4, #0]
 8009736:	f000 fa9e 	bl	8009c76 <memmove>
 800973a:	68a3      	ldr	r3, [r4, #8]
 800973c:	1b9b      	subs	r3, r3, r6
 800973e:	60a3      	str	r3, [r4, #8]
 8009740:	6823      	ldr	r3, [r4, #0]
 8009742:	441e      	add	r6, r3
 8009744:	6026      	str	r6, [r4, #0]
 8009746:	2000      	movs	r0, #0
 8009748:	e7dc      	b.n	8009704 <__ssputs_r+0x58>
 800974a:	462a      	mov	r2, r5
 800974c:	f000 faac 	bl	8009ca8 <_realloc_r>
 8009750:	4606      	mov	r6, r0
 8009752:	2800      	cmp	r0, #0
 8009754:	d1e2      	bne.n	800971c <__ssputs_r+0x70>
 8009756:	6921      	ldr	r1, [r4, #16]
 8009758:	4650      	mov	r0, sl
 800975a:	f7ff fecd 	bl	80094f8 <_free_r>
 800975e:	e7c8      	b.n	80096f2 <__ssputs_r+0x46>

08009760 <_svfiprintf_r>:
 8009760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009764:	461d      	mov	r5, r3
 8009766:	898b      	ldrh	r3, [r1, #12]
 8009768:	061f      	lsls	r7, r3, #24
 800976a:	b09d      	sub	sp, #116	; 0x74
 800976c:	4680      	mov	r8, r0
 800976e:	460c      	mov	r4, r1
 8009770:	4616      	mov	r6, r2
 8009772:	d50f      	bpl.n	8009794 <_svfiprintf_r+0x34>
 8009774:	690b      	ldr	r3, [r1, #16]
 8009776:	b96b      	cbnz	r3, 8009794 <_svfiprintf_r+0x34>
 8009778:	2140      	movs	r1, #64	; 0x40
 800977a:	f7ff ff0b 	bl	8009594 <_malloc_r>
 800977e:	6020      	str	r0, [r4, #0]
 8009780:	6120      	str	r0, [r4, #16]
 8009782:	b928      	cbnz	r0, 8009790 <_svfiprintf_r+0x30>
 8009784:	230c      	movs	r3, #12
 8009786:	f8c8 3000 	str.w	r3, [r8]
 800978a:	f04f 30ff 	mov.w	r0, #4294967295
 800978e:	e0c8      	b.n	8009922 <_svfiprintf_r+0x1c2>
 8009790:	2340      	movs	r3, #64	; 0x40
 8009792:	6163      	str	r3, [r4, #20]
 8009794:	2300      	movs	r3, #0
 8009796:	9309      	str	r3, [sp, #36]	; 0x24
 8009798:	2320      	movs	r3, #32
 800979a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800979e:	2330      	movs	r3, #48	; 0x30
 80097a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097a4:	9503      	str	r5, [sp, #12]
 80097a6:	f04f 0b01 	mov.w	fp, #1
 80097aa:	4637      	mov	r7, r6
 80097ac:	463d      	mov	r5, r7
 80097ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80097b2:	b10b      	cbz	r3, 80097b8 <_svfiprintf_r+0x58>
 80097b4:	2b25      	cmp	r3, #37	; 0x25
 80097b6:	d13e      	bne.n	8009836 <_svfiprintf_r+0xd6>
 80097b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80097bc:	d00b      	beq.n	80097d6 <_svfiprintf_r+0x76>
 80097be:	4653      	mov	r3, sl
 80097c0:	4632      	mov	r2, r6
 80097c2:	4621      	mov	r1, r4
 80097c4:	4640      	mov	r0, r8
 80097c6:	f7ff ff71 	bl	80096ac <__ssputs_r>
 80097ca:	3001      	adds	r0, #1
 80097cc:	f000 80a4 	beq.w	8009918 <_svfiprintf_r+0x1b8>
 80097d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097d2:	4453      	add	r3, sl
 80097d4:	9309      	str	r3, [sp, #36]	; 0x24
 80097d6:	783b      	ldrb	r3, [r7, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f000 809d 	beq.w	8009918 <_svfiprintf_r+0x1b8>
 80097de:	2300      	movs	r3, #0
 80097e0:	f04f 32ff 	mov.w	r2, #4294967295
 80097e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097e8:	9304      	str	r3, [sp, #16]
 80097ea:	9307      	str	r3, [sp, #28]
 80097ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097f0:	931a      	str	r3, [sp, #104]	; 0x68
 80097f2:	462f      	mov	r7, r5
 80097f4:	2205      	movs	r2, #5
 80097f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80097fa:	4850      	ldr	r0, [pc, #320]	; (800993c <_svfiprintf_r+0x1dc>)
 80097fc:	f7f6 fcf0 	bl	80001e0 <memchr>
 8009800:	9b04      	ldr	r3, [sp, #16]
 8009802:	b9d0      	cbnz	r0, 800983a <_svfiprintf_r+0xda>
 8009804:	06d9      	lsls	r1, r3, #27
 8009806:	bf44      	itt	mi
 8009808:	2220      	movmi	r2, #32
 800980a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800980e:	071a      	lsls	r2, r3, #28
 8009810:	bf44      	itt	mi
 8009812:	222b      	movmi	r2, #43	; 0x2b
 8009814:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009818:	782a      	ldrb	r2, [r5, #0]
 800981a:	2a2a      	cmp	r2, #42	; 0x2a
 800981c:	d015      	beq.n	800984a <_svfiprintf_r+0xea>
 800981e:	9a07      	ldr	r2, [sp, #28]
 8009820:	462f      	mov	r7, r5
 8009822:	2000      	movs	r0, #0
 8009824:	250a      	movs	r5, #10
 8009826:	4639      	mov	r1, r7
 8009828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800982c:	3b30      	subs	r3, #48	; 0x30
 800982e:	2b09      	cmp	r3, #9
 8009830:	d94d      	bls.n	80098ce <_svfiprintf_r+0x16e>
 8009832:	b1b8      	cbz	r0, 8009864 <_svfiprintf_r+0x104>
 8009834:	e00f      	b.n	8009856 <_svfiprintf_r+0xf6>
 8009836:	462f      	mov	r7, r5
 8009838:	e7b8      	b.n	80097ac <_svfiprintf_r+0x4c>
 800983a:	4a40      	ldr	r2, [pc, #256]	; (800993c <_svfiprintf_r+0x1dc>)
 800983c:	1a80      	subs	r0, r0, r2
 800983e:	fa0b f000 	lsl.w	r0, fp, r0
 8009842:	4318      	orrs	r0, r3
 8009844:	9004      	str	r0, [sp, #16]
 8009846:	463d      	mov	r5, r7
 8009848:	e7d3      	b.n	80097f2 <_svfiprintf_r+0x92>
 800984a:	9a03      	ldr	r2, [sp, #12]
 800984c:	1d11      	adds	r1, r2, #4
 800984e:	6812      	ldr	r2, [r2, #0]
 8009850:	9103      	str	r1, [sp, #12]
 8009852:	2a00      	cmp	r2, #0
 8009854:	db01      	blt.n	800985a <_svfiprintf_r+0xfa>
 8009856:	9207      	str	r2, [sp, #28]
 8009858:	e004      	b.n	8009864 <_svfiprintf_r+0x104>
 800985a:	4252      	negs	r2, r2
 800985c:	f043 0302 	orr.w	r3, r3, #2
 8009860:	9207      	str	r2, [sp, #28]
 8009862:	9304      	str	r3, [sp, #16]
 8009864:	783b      	ldrb	r3, [r7, #0]
 8009866:	2b2e      	cmp	r3, #46	; 0x2e
 8009868:	d10c      	bne.n	8009884 <_svfiprintf_r+0x124>
 800986a:	787b      	ldrb	r3, [r7, #1]
 800986c:	2b2a      	cmp	r3, #42	; 0x2a
 800986e:	d133      	bne.n	80098d8 <_svfiprintf_r+0x178>
 8009870:	9b03      	ldr	r3, [sp, #12]
 8009872:	1d1a      	adds	r2, r3, #4
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	9203      	str	r2, [sp, #12]
 8009878:	2b00      	cmp	r3, #0
 800987a:	bfb8      	it	lt
 800987c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009880:	3702      	adds	r7, #2
 8009882:	9305      	str	r3, [sp, #20]
 8009884:	4d2e      	ldr	r5, [pc, #184]	; (8009940 <_svfiprintf_r+0x1e0>)
 8009886:	7839      	ldrb	r1, [r7, #0]
 8009888:	2203      	movs	r2, #3
 800988a:	4628      	mov	r0, r5
 800988c:	f7f6 fca8 	bl	80001e0 <memchr>
 8009890:	b138      	cbz	r0, 80098a2 <_svfiprintf_r+0x142>
 8009892:	2340      	movs	r3, #64	; 0x40
 8009894:	1b40      	subs	r0, r0, r5
 8009896:	fa03 f000 	lsl.w	r0, r3, r0
 800989a:	9b04      	ldr	r3, [sp, #16]
 800989c:	4303      	orrs	r3, r0
 800989e:	3701      	adds	r7, #1
 80098a0:	9304      	str	r3, [sp, #16]
 80098a2:	7839      	ldrb	r1, [r7, #0]
 80098a4:	4827      	ldr	r0, [pc, #156]	; (8009944 <_svfiprintf_r+0x1e4>)
 80098a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098aa:	2206      	movs	r2, #6
 80098ac:	1c7e      	adds	r6, r7, #1
 80098ae:	f7f6 fc97 	bl	80001e0 <memchr>
 80098b2:	2800      	cmp	r0, #0
 80098b4:	d038      	beq.n	8009928 <_svfiprintf_r+0x1c8>
 80098b6:	4b24      	ldr	r3, [pc, #144]	; (8009948 <_svfiprintf_r+0x1e8>)
 80098b8:	bb13      	cbnz	r3, 8009900 <_svfiprintf_r+0x1a0>
 80098ba:	9b03      	ldr	r3, [sp, #12]
 80098bc:	3307      	adds	r3, #7
 80098be:	f023 0307 	bic.w	r3, r3, #7
 80098c2:	3308      	adds	r3, #8
 80098c4:	9303      	str	r3, [sp, #12]
 80098c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098c8:	444b      	add	r3, r9
 80098ca:	9309      	str	r3, [sp, #36]	; 0x24
 80098cc:	e76d      	b.n	80097aa <_svfiprintf_r+0x4a>
 80098ce:	fb05 3202 	mla	r2, r5, r2, r3
 80098d2:	2001      	movs	r0, #1
 80098d4:	460f      	mov	r7, r1
 80098d6:	e7a6      	b.n	8009826 <_svfiprintf_r+0xc6>
 80098d8:	2300      	movs	r3, #0
 80098da:	3701      	adds	r7, #1
 80098dc:	9305      	str	r3, [sp, #20]
 80098de:	4619      	mov	r1, r3
 80098e0:	250a      	movs	r5, #10
 80098e2:	4638      	mov	r0, r7
 80098e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098e8:	3a30      	subs	r2, #48	; 0x30
 80098ea:	2a09      	cmp	r2, #9
 80098ec:	d903      	bls.n	80098f6 <_svfiprintf_r+0x196>
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d0c8      	beq.n	8009884 <_svfiprintf_r+0x124>
 80098f2:	9105      	str	r1, [sp, #20]
 80098f4:	e7c6      	b.n	8009884 <_svfiprintf_r+0x124>
 80098f6:	fb05 2101 	mla	r1, r5, r1, r2
 80098fa:	2301      	movs	r3, #1
 80098fc:	4607      	mov	r7, r0
 80098fe:	e7f0      	b.n	80098e2 <_svfiprintf_r+0x182>
 8009900:	ab03      	add	r3, sp, #12
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	4622      	mov	r2, r4
 8009906:	4b11      	ldr	r3, [pc, #68]	; (800994c <_svfiprintf_r+0x1ec>)
 8009908:	a904      	add	r1, sp, #16
 800990a:	4640      	mov	r0, r8
 800990c:	f3af 8000 	nop.w
 8009910:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009914:	4681      	mov	r9, r0
 8009916:	d1d6      	bne.n	80098c6 <_svfiprintf_r+0x166>
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	065b      	lsls	r3, r3, #25
 800991c:	f53f af35 	bmi.w	800978a <_svfiprintf_r+0x2a>
 8009920:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009922:	b01d      	add	sp, #116	; 0x74
 8009924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009928:	ab03      	add	r3, sp, #12
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	4622      	mov	r2, r4
 800992e:	4b07      	ldr	r3, [pc, #28]	; (800994c <_svfiprintf_r+0x1ec>)
 8009930:	a904      	add	r1, sp, #16
 8009932:	4640      	mov	r0, r8
 8009934:	f000 f882 	bl	8009a3c <_printf_i>
 8009938:	e7ea      	b.n	8009910 <_svfiprintf_r+0x1b0>
 800993a:	bf00      	nop
 800993c:	08009d40 	.word	0x08009d40
 8009940:	08009d46 	.word	0x08009d46
 8009944:	08009d4a 	.word	0x08009d4a
 8009948:	00000000 	.word	0x00000000
 800994c:	080096ad 	.word	0x080096ad

08009950 <_printf_common>:
 8009950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009954:	4691      	mov	r9, r2
 8009956:	461f      	mov	r7, r3
 8009958:	688a      	ldr	r2, [r1, #8]
 800995a:	690b      	ldr	r3, [r1, #16]
 800995c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009960:	4293      	cmp	r3, r2
 8009962:	bfb8      	it	lt
 8009964:	4613      	movlt	r3, r2
 8009966:	f8c9 3000 	str.w	r3, [r9]
 800996a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800996e:	4606      	mov	r6, r0
 8009970:	460c      	mov	r4, r1
 8009972:	b112      	cbz	r2, 800997a <_printf_common+0x2a>
 8009974:	3301      	adds	r3, #1
 8009976:	f8c9 3000 	str.w	r3, [r9]
 800997a:	6823      	ldr	r3, [r4, #0]
 800997c:	0699      	lsls	r1, r3, #26
 800997e:	bf42      	ittt	mi
 8009980:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009984:	3302      	addmi	r3, #2
 8009986:	f8c9 3000 	strmi.w	r3, [r9]
 800998a:	6825      	ldr	r5, [r4, #0]
 800998c:	f015 0506 	ands.w	r5, r5, #6
 8009990:	d107      	bne.n	80099a2 <_printf_common+0x52>
 8009992:	f104 0a19 	add.w	sl, r4, #25
 8009996:	68e3      	ldr	r3, [r4, #12]
 8009998:	f8d9 2000 	ldr.w	r2, [r9]
 800999c:	1a9b      	subs	r3, r3, r2
 800999e:	42ab      	cmp	r3, r5
 80099a0:	dc28      	bgt.n	80099f4 <_printf_common+0xa4>
 80099a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80099a6:	6822      	ldr	r2, [r4, #0]
 80099a8:	3300      	adds	r3, #0
 80099aa:	bf18      	it	ne
 80099ac:	2301      	movne	r3, #1
 80099ae:	0692      	lsls	r2, r2, #26
 80099b0:	d42d      	bmi.n	8009a0e <_printf_common+0xbe>
 80099b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099b6:	4639      	mov	r1, r7
 80099b8:	4630      	mov	r0, r6
 80099ba:	47c0      	blx	r8
 80099bc:	3001      	adds	r0, #1
 80099be:	d020      	beq.n	8009a02 <_printf_common+0xb2>
 80099c0:	6823      	ldr	r3, [r4, #0]
 80099c2:	68e5      	ldr	r5, [r4, #12]
 80099c4:	f8d9 2000 	ldr.w	r2, [r9]
 80099c8:	f003 0306 	and.w	r3, r3, #6
 80099cc:	2b04      	cmp	r3, #4
 80099ce:	bf08      	it	eq
 80099d0:	1aad      	subeq	r5, r5, r2
 80099d2:	68a3      	ldr	r3, [r4, #8]
 80099d4:	6922      	ldr	r2, [r4, #16]
 80099d6:	bf0c      	ite	eq
 80099d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099dc:	2500      	movne	r5, #0
 80099de:	4293      	cmp	r3, r2
 80099e0:	bfc4      	itt	gt
 80099e2:	1a9b      	subgt	r3, r3, r2
 80099e4:	18ed      	addgt	r5, r5, r3
 80099e6:	f04f 0900 	mov.w	r9, #0
 80099ea:	341a      	adds	r4, #26
 80099ec:	454d      	cmp	r5, r9
 80099ee:	d11a      	bne.n	8009a26 <_printf_common+0xd6>
 80099f0:	2000      	movs	r0, #0
 80099f2:	e008      	b.n	8009a06 <_printf_common+0xb6>
 80099f4:	2301      	movs	r3, #1
 80099f6:	4652      	mov	r2, sl
 80099f8:	4639      	mov	r1, r7
 80099fa:	4630      	mov	r0, r6
 80099fc:	47c0      	blx	r8
 80099fe:	3001      	adds	r0, #1
 8009a00:	d103      	bne.n	8009a0a <_printf_common+0xba>
 8009a02:	f04f 30ff 	mov.w	r0, #4294967295
 8009a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a0a:	3501      	adds	r5, #1
 8009a0c:	e7c3      	b.n	8009996 <_printf_common+0x46>
 8009a0e:	18e1      	adds	r1, r4, r3
 8009a10:	1c5a      	adds	r2, r3, #1
 8009a12:	2030      	movs	r0, #48	; 0x30
 8009a14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a18:	4422      	add	r2, r4
 8009a1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a22:	3302      	adds	r3, #2
 8009a24:	e7c5      	b.n	80099b2 <_printf_common+0x62>
 8009a26:	2301      	movs	r3, #1
 8009a28:	4622      	mov	r2, r4
 8009a2a:	4639      	mov	r1, r7
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	47c0      	blx	r8
 8009a30:	3001      	adds	r0, #1
 8009a32:	d0e6      	beq.n	8009a02 <_printf_common+0xb2>
 8009a34:	f109 0901 	add.w	r9, r9, #1
 8009a38:	e7d8      	b.n	80099ec <_printf_common+0x9c>
	...

08009a3c <_printf_i>:
 8009a3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a40:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009a44:	460c      	mov	r4, r1
 8009a46:	7e09      	ldrb	r1, [r1, #24]
 8009a48:	b085      	sub	sp, #20
 8009a4a:	296e      	cmp	r1, #110	; 0x6e
 8009a4c:	4617      	mov	r7, r2
 8009a4e:	4606      	mov	r6, r0
 8009a50:	4698      	mov	r8, r3
 8009a52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a54:	f000 80b3 	beq.w	8009bbe <_printf_i+0x182>
 8009a58:	d822      	bhi.n	8009aa0 <_printf_i+0x64>
 8009a5a:	2963      	cmp	r1, #99	; 0x63
 8009a5c:	d036      	beq.n	8009acc <_printf_i+0x90>
 8009a5e:	d80a      	bhi.n	8009a76 <_printf_i+0x3a>
 8009a60:	2900      	cmp	r1, #0
 8009a62:	f000 80b9 	beq.w	8009bd8 <_printf_i+0x19c>
 8009a66:	2958      	cmp	r1, #88	; 0x58
 8009a68:	f000 8083 	beq.w	8009b72 <_printf_i+0x136>
 8009a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a70:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009a74:	e032      	b.n	8009adc <_printf_i+0xa0>
 8009a76:	2964      	cmp	r1, #100	; 0x64
 8009a78:	d001      	beq.n	8009a7e <_printf_i+0x42>
 8009a7a:	2969      	cmp	r1, #105	; 0x69
 8009a7c:	d1f6      	bne.n	8009a6c <_printf_i+0x30>
 8009a7e:	6820      	ldr	r0, [r4, #0]
 8009a80:	6813      	ldr	r3, [r2, #0]
 8009a82:	0605      	lsls	r5, r0, #24
 8009a84:	f103 0104 	add.w	r1, r3, #4
 8009a88:	d52a      	bpl.n	8009ae0 <_printf_i+0xa4>
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	6011      	str	r1, [r2, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	da03      	bge.n	8009a9a <_printf_i+0x5e>
 8009a92:	222d      	movs	r2, #45	; 0x2d
 8009a94:	425b      	negs	r3, r3
 8009a96:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009a9a:	486f      	ldr	r0, [pc, #444]	; (8009c58 <_printf_i+0x21c>)
 8009a9c:	220a      	movs	r2, #10
 8009a9e:	e039      	b.n	8009b14 <_printf_i+0xd8>
 8009aa0:	2973      	cmp	r1, #115	; 0x73
 8009aa2:	f000 809d 	beq.w	8009be0 <_printf_i+0x1a4>
 8009aa6:	d808      	bhi.n	8009aba <_printf_i+0x7e>
 8009aa8:	296f      	cmp	r1, #111	; 0x6f
 8009aaa:	d020      	beq.n	8009aee <_printf_i+0xb2>
 8009aac:	2970      	cmp	r1, #112	; 0x70
 8009aae:	d1dd      	bne.n	8009a6c <_printf_i+0x30>
 8009ab0:	6823      	ldr	r3, [r4, #0]
 8009ab2:	f043 0320 	orr.w	r3, r3, #32
 8009ab6:	6023      	str	r3, [r4, #0]
 8009ab8:	e003      	b.n	8009ac2 <_printf_i+0x86>
 8009aba:	2975      	cmp	r1, #117	; 0x75
 8009abc:	d017      	beq.n	8009aee <_printf_i+0xb2>
 8009abe:	2978      	cmp	r1, #120	; 0x78
 8009ac0:	d1d4      	bne.n	8009a6c <_printf_i+0x30>
 8009ac2:	2378      	movs	r3, #120	; 0x78
 8009ac4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ac8:	4864      	ldr	r0, [pc, #400]	; (8009c5c <_printf_i+0x220>)
 8009aca:	e055      	b.n	8009b78 <_printf_i+0x13c>
 8009acc:	6813      	ldr	r3, [r2, #0]
 8009ace:	1d19      	adds	r1, r3, #4
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	6011      	str	r1, [r2, #0]
 8009ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ad8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009adc:	2301      	movs	r3, #1
 8009ade:	e08c      	b.n	8009bfa <_printf_i+0x1be>
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	6011      	str	r1, [r2, #0]
 8009ae4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ae8:	bf18      	it	ne
 8009aea:	b21b      	sxthne	r3, r3
 8009aec:	e7cf      	b.n	8009a8e <_printf_i+0x52>
 8009aee:	6813      	ldr	r3, [r2, #0]
 8009af0:	6825      	ldr	r5, [r4, #0]
 8009af2:	1d18      	adds	r0, r3, #4
 8009af4:	6010      	str	r0, [r2, #0]
 8009af6:	0628      	lsls	r0, r5, #24
 8009af8:	d501      	bpl.n	8009afe <_printf_i+0xc2>
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	e002      	b.n	8009b04 <_printf_i+0xc8>
 8009afe:	0668      	lsls	r0, r5, #25
 8009b00:	d5fb      	bpl.n	8009afa <_printf_i+0xbe>
 8009b02:	881b      	ldrh	r3, [r3, #0]
 8009b04:	4854      	ldr	r0, [pc, #336]	; (8009c58 <_printf_i+0x21c>)
 8009b06:	296f      	cmp	r1, #111	; 0x6f
 8009b08:	bf14      	ite	ne
 8009b0a:	220a      	movne	r2, #10
 8009b0c:	2208      	moveq	r2, #8
 8009b0e:	2100      	movs	r1, #0
 8009b10:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b14:	6865      	ldr	r5, [r4, #4]
 8009b16:	60a5      	str	r5, [r4, #8]
 8009b18:	2d00      	cmp	r5, #0
 8009b1a:	f2c0 8095 	blt.w	8009c48 <_printf_i+0x20c>
 8009b1e:	6821      	ldr	r1, [r4, #0]
 8009b20:	f021 0104 	bic.w	r1, r1, #4
 8009b24:	6021      	str	r1, [r4, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d13d      	bne.n	8009ba6 <_printf_i+0x16a>
 8009b2a:	2d00      	cmp	r5, #0
 8009b2c:	f040 808e 	bne.w	8009c4c <_printf_i+0x210>
 8009b30:	4665      	mov	r5, ip
 8009b32:	2a08      	cmp	r2, #8
 8009b34:	d10b      	bne.n	8009b4e <_printf_i+0x112>
 8009b36:	6823      	ldr	r3, [r4, #0]
 8009b38:	07db      	lsls	r3, r3, #31
 8009b3a:	d508      	bpl.n	8009b4e <_printf_i+0x112>
 8009b3c:	6923      	ldr	r3, [r4, #16]
 8009b3e:	6862      	ldr	r2, [r4, #4]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	bfde      	ittt	le
 8009b44:	2330      	movle	r3, #48	; 0x30
 8009b46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b4e:	ebac 0305 	sub.w	r3, ip, r5
 8009b52:	6123      	str	r3, [r4, #16]
 8009b54:	f8cd 8000 	str.w	r8, [sp]
 8009b58:	463b      	mov	r3, r7
 8009b5a:	aa03      	add	r2, sp, #12
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f7ff fef6 	bl	8009950 <_printf_common>
 8009b64:	3001      	adds	r0, #1
 8009b66:	d14d      	bne.n	8009c04 <_printf_i+0x1c8>
 8009b68:	f04f 30ff 	mov.w	r0, #4294967295
 8009b6c:	b005      	add	sp, #20
 8009b6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b72:	4839      	ldr	r0, [pc, #228]	; (8009c58 <_printf_i+0x21c>)
 8009b74:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009b78:	6813      	ldr	r3, [r2, #0]
 8009b7a:	6821      	ldr	r1, [r4, #0]
 8009b7c:	1d1d      	adds	r5, r3, #4
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6015      	str	r5, [r2, #0]
 8009b82:	060a      	lsls	r2, r1, #24
 8009b84:	d50b      	bpl.n	8009b9e <_printf_i+0x162>
 8009b86:	07ca      	lsls	r2, r1, #31
 8009b88:	bf44      	itt	mi
 8009b8a:	f041 0120 	orrmi.w	r1, r1, #32
 8009b8e:	6021      	strmi	r1, [r4, #0]
 8009b90:	b91b      	cbnz	r3, 8009b9a <_printf_i+0x15e>
 8009b92:	6822      	ldr	r2, [r4, #0]
 8009b94:	f022 0220 	bic.w	r2, r2, #32
 8009b98:	6022      	str	r2, [r4, #0]
 8009b9a:	2210      	movs	r2, #16
 8009b9c:	e7b7      	b.n	8009b0e <_printf_i+0xd2>
 8009b9e:	064d      	lsls	r5, r1, #25
 8009ba0:	bf48      	it	mi
 8009ba2:	b29b      	uxthmi	r3, r3
 8009ba4:	e7ef      	b.n	8009b86 <_printf_i+0x14a>
 8009ba6:	4665      	mov	r5, ip
 8009ba8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009bac:	fb02 3311 	mls	r3, r2, r1, r3
 8009bb0:	5cc3      	ldrb	r3, [r0, r3]
 8009bb2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	2900      	cmp	r1, #0
 8009bba:	d1f5      	bne.n	8009ba8 <_printf_i+0x16c>
 8009bbc:	e7b9      	b.n	8009b32 <_printf_i+0xf6>
 8009bbe:	6813      	ldr	r3, [r2, #0]
 8009bc0:	6825      	ldr	r5, [r4, #0]
 8009bc2:	6961      	ldr	r1, [r4, #20]
 8009bc4:	1d18      	adds	r0, r3, #4
 8009bc6:	6010      	str	r0, [r2, #0]
 8009bc8:	0628      	lsls	r0, r5, #24
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	d501      	bpl.n	8009bd2 <_printf_i+0x196>
 8009bce:	6019      	str	r1, [r3, #0]
 8009bd0:	e002      	b.n	8009bd8 <_printf_i+0x19c>
 8009bd2:	066a      	lsls	r2, r5, #25
 8009bd4:	d5fb      	bpl.n	8009bce <_printf_i+0x192>
 8009bd6:	8019      	strh	r1, [r3, #0]
 8009bd8:	2300      	movs	r3, #0
 8009bda:	6123      	str	r3, [r4, #16]
 8009bdc:	4665      	mov	r5, ip
 8009bde:	e7b9      	b.n	8009b54 <_printf_i+0x118>
 8009be0:	6813      	ldr	r3, [r2, #0]
 8009be2:	1d19      	adds	r1, r3, #4
 8009be4:	6011      	str	r1, [r2, #0]
 8009be6:	681d      	ldr	r5, [r3, #0]
 8009be8:	6862      	ldr	r2, [r4, #4]
 8009bea:	2100      	movs	r1, #0
 8009bec:	4628      	mov	r0, r5
 8009bee:	f7f6 faf7 	bl	80001e0 <memchr>
 8009bf2:	b108      	cbz	r0, 8009bf8 <_printf_i+0x1bc>
 8009bf4:	1b40      	subs	r0, r0, r5
 8009bf6:	6060      	str	r0, [r4, #4]
 8009bf8:	6863      	ldr	r3, [r4, #4]
 8009bfa:	6123      	str	r3, [r4, #16]
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c02:	e7a7      	b.n	8009b54 <_printf_i+0x118>
 8009c04:	6923      	ldr	r3, [r4, #16]
 8009c06:	462a      	mov	r2, r5
 8009c08:	4639      	mov	r1, r7
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	47c0      	blx	r8
 8009c0e:	3001      	adds	r0, #1
 8009c10:	d0aa      	beq.n	8009b68 <_printf_i+0x12c>
 8009c12:	6823      	ldr	r3, [r4, #0]
 8009c14:	079b      	lsls	r3, r3, #30
 8009c16:	d413      	bmi.n	8009c40 <_printf_i+0x204>
 8009c18:	68e0      	ldr	r0, [r4, #12]
 8009c1a:	9b03      	ldr	r3, [sp, #12]
 8009c1c:	4298      	cmp	r0, r3
 8009c1e:	bfb8      	it	lt
 8009c20:	4618      	movlt	r0, r3
 8009c22:	e7a3      	b.n	8009b6c <_printf_i+0x130>
 8009c24:	2301      	movs	r3, #1
 8009c26:	464a      	mov	r2, r9
 8009c28:	4639      	mov	r1, r7
 8009c2a:	4630      	mov	r0, r6
 8009c2c:	47c0      	blx	r8
 8009c2e:	3001      	adds	r0, #1
 8009c30:	d09a      	beq.n	8009b68 <_printf_i+0x12c>
 8009c32:	3501      	adds	r5, #1
 8009c34:	68e3      	ldr	r3, [r4, #12]
 8009c36:	9a03      	ldr	r2, [sp, #12]
 8009c38:	1a9b      	subs	r3, r3, r2
 8009c3a:	42ab      	cmp	r3, r5
 8009c3c:	dcf2      	bgt.n	8009c24 <_printf_i+0x1e8>
 8009c3e:	e7eb      	b.n	8009c18 <_printf_i+0x1dc>
 8009c40:	2500      	movs	r5, #0
 8009c42:	f104 0919 	add.w	r9, r4, #25
 8009c46:	e7f5      	b.n	8009c34 <_printf_i+0x1f8>
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1ac      	bne.n	8009ba6 <_printf_i+0x16a>
 8009c4c:	7803      	ldrb	r3, [r0, #0]
 8009c4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c56:	e76c      	b.n	8009b32 <_printf_i+0xf6>
 8009c58:	08009d51 	.word	0x08009d51
 8009c5c:	08009d62 	.word	0x08009d62

08009c60 <memcpy>:
 8009c60:	b510      	push	{r4, lr}
 8009c62:	1e43      	subs	r3, r0, #1
 8009c64:	440a      	add	r2, r1
 8009c66:	4291      	cmp	r1, r2
 8009c68:	d100      	bne.n	8009c6c <memcpy+0xc>
 8009c6a:	bd10      	pop	{r4, pc}
 8009c6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c74:	e7f7      	b.n	8009c66 <memcpy+0x6>

08009c76 <memmove>:
 8009c76:	4288      	cmp	r0, r1
 8009c78:	b510      	push	{r4, lr}
 8009c7a:	eb01 0302 	add.w	r3, r1, r2
 8009c7e:	d807      	bhi.n	8009c90 <memmove+0x1a>
 8009c80:	1e42      	subs	r2, r0, #1
 8009c82:	4299      	cmp	r1, r3
 8009c84:	d00a      	beq.n	8009c9c <memmove+0x26>
 8009c86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c8a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009c8e:	e7f8      	b.n	8009c82 <memmove+0xc>
 8009c90:	4283      	cmp	r3, r0
 8009c92:	d9f5      	bls.n	8009c80 <memmove+0xa>
 8009c94:	1881      	adds	r1, r0, r2
 8009c96:	1ad2      	subs	r2, r2, r3
 8009c98:	42d3      	cmn	r3, r2
 8009c9a:	d100      	bne.n	8009c9e <memmove+0x28>
 8009c9c:	bd10      	pop	{r4, pc}
 8009c9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ca2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009ca6:	e7f7      	b.n	8009c98 <memmove+0x22>

08009ca8 <_realloc_r>:
 8009ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009caa:	4607      	mov	r7, r0
 8009cac:	4614      	mov	r4, r2
 8009cae:	460e      	mov	r6, r1
 8009cb0:	b921      	cbnz	r1, 8009cbc <_realloc_r+0x14>
 8009cb2:	4611      	mov	r1, r2
 8009cb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009cb8:	f7ff bc6c 	b.w	8009594 <_malloc_r>
 8009cbc:	b922      	cbnz	r2, 8009cc8 <_realloc_r+0x20>
 8009cbe:	f7ff fc1b 	bl	80094f8 <_free_r>
 8009cc2:	4625      	mov	r5, r4
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cc8:	f000 f814 	bl	8009cf4 <_malloc_usable_size_r>
 8009ccc:	42a0      	cmp	r0, r4
 8009cce:	d20f      	bcs.n	8009cf0 <_realloc_r+0x48>
 8009cd0:	4621      	mov	r1, r4
 8009cd2:	4638      	mov	r0, r7
 8009cd4:	f7ff fc5e 	bl	8009594 <_malloc_r>
 8009cd8:	4605      	mov	r5, r0
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	d0f2      	beq.n	8009cc4 <_realloc_r+0x1c>
 8009cde:	4631      	mov	r1, r6
 8009ce0:	4622      	mov	r2, r4
 8009ce2:	f7ff ffbd 	bl	8009c60 <memcpy>
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	4638      	mov	r0, r7
 8009cea:	f7ff fc05 	bl	80094f8 <_free_r>
 8009cee:	e7e9      	b.n	8009cc4 <_realloc_r+0x1c>
 8009cf0:	4635      	mov	r5, r6
 8009cf2:	e7e7      	b.n	8009cc4 <_realloc_r+0x1c>

08009cf4 <_malloc_usable_size_r>:
 8009cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cf8:	1f18      	subs	r0, r3, #4
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	bfbc      	itt	lt
 8009cfe:	580b      	ldrlt	r3, [r1, r0]
 8009d00:	18c0      	addlt	r0, r0, r3
 8009d02:	4770      	bx	lr

08009d04 <_init>:
 8009d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d06:	bf00      	nop
 8009d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d0a:	bc08      	pop	{r3}
 8009d0c:	469e      	mov	lr, r3
 8009d0e:	4770      	bx	lr

08009d10 <_fini>:
 8009d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d12:	bf00      	nop
 8009d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d16:	bc08      	pop	{r3}
 8009d18:	469e      	mov	lr, r3
 8009d1a:	4770      	bx	lr
